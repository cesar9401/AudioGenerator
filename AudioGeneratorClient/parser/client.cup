package com.cesar31.audiogeneratorclient.parser;

import com.cesar31.audiogeneratorclient.model.*;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

class ClientParser;

parser code {:

    private List<Err> errors; // Errores
    private List<Track> tracks; // listado de pistas
    private List<Playlist> playlists; // listado de listas
    private Playlist playlist; // playlist con listado de pistas
    private Track track; // pista con sus respectivas notas

    public ClientParser(ClientLex lex) {
        super(lex);
    }

    public Track getTrack() {
        return track;
    }

    public Playlist getPlaylist() {
        return playlist;
    }

    public List<Playlist> getPlaylists() {
        return playlists;
    }

    public List<Track> getTracks() {
        return tracks;
    }

    public List<Err> getErrors() {
        return errors;
    }

    public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
        System.out.println();
        //this.errorHandler.setErrorForListGram((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

    protected int error_sync_size() {
        return 1;
    }
:}

terminal Token ERRORS, ERROR, TYPE, TYPE_E, LINE, COLUMN, LEXEMA, DESCRIPTION, TRACKS, TRACK, NAME, DURATION;
terminal Token LISTS, LIST, RANDOM, CIRCULAR, TRUE, FALSE, CHANNEL, NOTE, NUMBER, EIGHTH, EQUAL, SMALLER, GREATER, DIVIDE;
terminal Token INTEGER, DECIMAL, STR;
terminal Token UNKNOWN;

non terminal String type, lex, desc, name, eighth;
non terminal Integer line, column, number, op_channel;
non terminal Err error_options, err;
non terminal List<Err> error_list, errors;
non terminal Double duration;
non terminal Track track, track_notes;
non terminal List<Track> track_list, tracks;
non terminal Integer number_tracks;
non terminal Boolean random, circular, boolean_value;
non terminal Playlist list_item, list_tracks;
non terminal List<Playlist>  list_list, list;
non terminal Note note;
non terminal List<Note> list_notes, channel, list_channel;

non terminal op_type, op_line, op_column, op_lex, op_desc, op_error, op_errors;
non terminal cl_type, cl_line, cl_column, cl_lex, cl_desc, cl_error, cl_errors;
non terminal op_tracks, cl_tracks;
non terminal op_lists, cl_lists;
non terminal cl_list;
non terminal cl_channel;
non terminal cl_track;

non terminal client;

// opciones
client ::=
            list:list_list {: playlists = list_list; :} // lista de listas
            | tracks:list_track {: tracks = list_track; :} // Todas las pistas
            | list_tracks:play {: playlist = play; :} // Respuesta de lista por nombre
            | track_notes:track_notes {: track = track_notes; :}// Respuesta notas de una pista
            | errors:list_err {: errors = list_err; :} // Respuesta de errores
            ;
// opciones

// Gramatica para pista por nombre
track_notes ::=
            track:track list_channel:list_notes cl_track
                {: RESULT = track; RESULT.setNotes(list_notes); :}
            ;

cl_track ::=
            SMALLER DIVIDE TRACK GREATER
            ;

list_channel ::=
            list_channel:sup_list channel:list
                {: RESULT = sup_list; RESULT.addAll(list); :}
            | channel:list
                {: RESULT = list; :}
            ;

channel ::=
            op_channel:numb_channel list_notes:list cl_channel
                {:
                    for(Note n : list) {
                        n.setChannel(numb_channel);
                    }
                    RESULT = list;
                :}
            ;

list_notes ::=
            list_notes:list note:note
                {: RESULT = list; RESULT.add(note); :}
            | note:note
                {: RESULT = new ArrayList<>(); RESULT.add(note); :}
            ;

op_channel ::=
            SMALLER CHANNEL number:number GREATER
                {: RESULT = number; :}
            ;

cl_channel ::=
            SMALLER DIVIDE CHANNEL GREATER
            ;

number ::=
            NUMBER EQUAL INTEGER:token
                {: RESULT = Integer.valueOf(token.getValue()); :}
            ;

note ::=
            SMALLER NOTE name:name eighth:eighth duration:duration GREATER
                {: RESULT = new Note(name, eighth, duration); :}
            ;

eighth ::=
            EIGHTH EQUAL STR:token
                {: RESULT = token.getValue(); :}
            ;

// Gramatica para lista
list_tracks ::=
            list_item:playlist track_list:tracklist cl_list
                {: RESULT = playlist; RESULT.setTracks(tracklist); :}
            ;

cl_list ::=
            SMALLER DIVIDE LIST GREATER
            ;

// Gramatica para lista de listas
list ::=
            op_lists list_list:list cl_lists
                {: RESULT = list; :}
            ;

list_list ::=
            list_list:list list_item:play
                {: RESULT = list; RESULT.add(play); :}
            | list_item:play
                {: RESULT = new ArrayList<>(); RESULT.add(play); :}
            ;

list_item ::=
            SMALLER LIST name:name number_tracks:number random:random circular:circular GREATER
                {: RESULT = new Playlist(name, number, random, circular); :}
            ;

number_tracks ::=
            TRACKS EQUAL INTEGER:token
                {: RESULT = Integer.valueOf(token.getValue()); :}
            ;

random ::=
            RANDOM EQUAL boolean_value:value
                {: RESULT = value; :}
            ;

circular ::=
            CIRCULAR EQUAL boolean_value:value
                {: RESULT = value; :}
            ;

boolean_value ::=
            TRUE {: RESULT = true; :}
            | FALSE {: RESULT = false; :}
            ;

op_lists ::=
            SMALLER LISTS GREATER
            ;

cl_lists ::=
            SMALLER DIVIDE LISTS GREATER
            ;

// Gramatica para lista de pistas
tracks ::=
            op_tracks track_list:list cl_tracks
                {: RESULT = list; :}
            ;

track_list ::=
            track_list:list track:track
                {: RESULT = list; RESULT.add(track); :}
            | track:track
                {: RESULT = new ArrayList<>(); RESULT.add(track); :}
            ;

track ::=
            SMALLER TRACK name:name duration:duration GREATER
                {: RESULT = new Track(name, duration); :}
            ;

name ::=
            NAME EQUAL STR:token
                {: RESULT = token.getValue(); :}
            ;

duration ::=
            DURATION EQUAL DECIMAL:token
                {: RESULT = Double.valueOf(token.getValue()); :}
            ;

op_tracks ::=
            SMALLER TRACKS GREATER
            ;

cl_tracks ::=
            SMALLER DIVIDE TRACKS GREATER
            ;

// Gramatica para errores
errors ::=
            op_errors error_list:list cl_errors
                {: RESULT = list; :}
            ;

error_list ::=
            error_list:list err:e
                {: RESULT = list; RESULT.add(e); :}
            | err:e
                {: RESULT = new ArrayList<>(); RESULT.add(e); :}
            ;

err ::=
            op_error error_options:err cl_error
                {: RESULT = err; :}
            ;

error_options ::=
            type:a line:b column:c lex:d desc:e
                {: RESULT = new Err(a, b, c, d, e); :}
            ;

type ::=
            op_type TYPE_E:token cl_type
                {: RESULT = token.getValue(); :}
            ;

line ::=
            op_line INTEGER:token cl_line
                {: RESULT = Integer.valueOf(token.getValue()); :}
            ;

column ::=
            op_column INTEGER:token cl_column
                {: RESULT = Integer.valueOf(token.getValue()); :}
            ;

lex ::=
            op_lex STR:token cl_lex
                {: RESULT = token.getValue(); :}
            ;

desc ::=
            op_desc STR:token cl_desc
                {: RESULT = token.getValue(); :}
            ;

op_type ::=
            SMALLER TYPE GREATER
            ;

op_line ::=
            SMALLER LINE GREATER
            ;

op_column ::=
            SMALLER COLUMN GREATER
            ;

op_lex ::=
            SMALLER LEXEMA GREATER
            ;

op_desc ::=
            SMALLER DESCRIPTION GREATER
            ;

op_error ::=
            SMALLER ERROR GREATER
            ;

op_errors ::=
            SMALLER ERRORS GREATER
            ;

cl_type ::=
            SMALLER DIVIDE TYPE GREATER
            ;

cl_line ::=
            SMALLER DIVIDE LINE GREATER
            ;

cl_column ::=
            SMALLER DIVIDE COLUMN GREATER
            ;

cl_lex ::=
            SMALLER DIVIDE LEXEMA GREATER
            ;

cl_desc ::=
            SMALLER DIVIDE DESCRIPTION GREATER
            ;

cl_error ::=
            SMALLER DIVIDE ERROR GREATER
            ;

cl_errors ::=
            SMALLER DIVIDE ERRORS GREATER
            ;
// Gramatica para errores
