// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: client.flex

package com.cesar31.audiogeneratorclient.parser;

import static com.cesar31.audiogeneratorclient.parser.ClientParserSym.*;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class ClientLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\211\u0100\1\u0600\1\u0100\1\u0e00\1\u0f00\1\u1000\1\u1100\123\u0100"+
    "\1\u0900\4\u0100\1\u1200\10\u0100\1\u1300\2\u0100\1\u1400\1\u1500"+
    "\1\u1100\1\u0100\1\u0500\1\u0100\1\u1600\1\u1300\1\u0800\3\u0100"+
    "\1\u1000\1\u1700\114\u0100\1\u1800\1\u1000\153\u0100\1\u1900\11\u0100"+
    "\1\u1a00\1\u1100\6\u0100\1\u1000\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\13\0\1\5\1\6\1\7\11\10\2\0"+
    "\1\11\1\12\1\13\2\0\1\14\1\0\1\15\1\0"+
    "\1\16\3\0\1\17\1\20\1\0\1\21\1\22\1\23"+
    "\1\24\3\0\1\25\1\26\1\27\2\0\1\30\3\0"+
    "\1\31\4\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\0\1\40\2\0\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\0\1\53"+
    "\u01e7\0\12\54\206\0\12\54\306\0\12\54\234\0\12\54"+
    "\166\0\12\54\140\0\12\54\166\0\12\54\106\0\12\54"+
    "\u0116\0\12\54\106\0\12\54\u0146\0\12\54\46\0\12\54"+
    "\u012c\0\12\54\200\0\12\54\246\0\12\54\6\0\12\54"+
    "\266\0\12\54\126\0\12\54\206\0\12\54\6\0\12\54"+
    "\u0176\0\12\54\46\0\12\54\306\0\12\54\26\0\12\54"+
    "\126\0\12\54\u0196\0\12\54\246\0\12\54\206\0\12\54"+
    "\u012c\0\12\54\200\0\12\54\74\0\12\54\220\0\12\54"+
    "\166\0\12\54\146\0\12\54\206\0\12\54\106\0\12\54"+
    "\266\0\12\54\u0164\0\62\54\100\0\12\54\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\15\1\1\11\1\12\1\13\25\0\1\14\1\15"+
    "\1\16\1\17\1\20\45\0\1\21\4\0\1\22\1\23"+
    "\4\0\1\24\4\0\1\25\1\26\1\0\1\27\1\30"+
    "\3\0\1\31\2\0\1\32\5\0\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\0\1\42\2\0\1\43"+
    "\1\0\1\44\1\0\1\45\2\0\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\132\0\207\0\132\0\132\0\264"+
    "\0\341\0\132\0\132\0\132\0\u010e\0\u013b\0\u0168\0\u0195"+
    "\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd"+
    "\0\u032a\0\u0357\0\132\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438"+
    "\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0"+
    "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\u0735\0\132\0\132\0\132\0\132\0\u03b1\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f"+
    "\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\132\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\132\0\132\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\132\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\132\0\u102c\0\132\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\132\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\132\0\132\0\132\0\132"+
    "\0\132\0\132\0\132\0\u1275\0\u12a2\0\132\0\u12cf\0\u12fc"+
    "\0\132\0\u1329\0\132\0\u1356\0\132\0\u1383\0\u13b0\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\3\1\15\2\3\1\16\3\3"+
    "\1\17\6\3\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\3\1\25\1\26\1\27\1\30\1\3\1\31\4\3"+
    "\2\32\2\3\1\33\24\32\1\34\23\32\57\0\1\4"+
    "\57\0\1\35\54\0\1\35\1\0\2\11\64\0\1\36"+
    "\52\0\1\37\54\0\1\40\1\41\67\0\1\42\5\0"+
    "\1\43\3\0\1\44\46\0\1\45\12\0\1\46\51\0"+
    "\1\47\40\0\1\50\60\0\1\51\1\0\1\52\60\0"+
    "\1\53\4\0\1\54\37\0\1\55\60\0\1\56\46\0"+
    "\1\57\62\0\1\60\5\0\1\61\6\0\2\32\3\0"+
    "\24\32\1\0\23\32\4\0\1\62\36\0\1\63\2\0"+
    "\1\64\1\0\1\65\13\0\2\66\43\0\1\66\16\0"+
    "\1\67\66\0\1\70\46\0\1\71\55\0\1\72\74\0"+
    "\1\73\57\0\1\74\47\0\1\75\62\0\1\76\53\0"+
    "\1\77\54\0\1\100\47\0\1\101\66\0\1\102\44\0"+
    "\1\103\3\0\1\104\47\0\1\105\5\0\1\106\46\0"+
    "\1\107\62\0\1\110\53\0\1\111\50\0\1\112\56\0"+
    "\1\113\60\0\1\114\20\0\1\115\56\0\1\116\51\0"+
    "\1\117\66\0\1\120\60\0\1\121\56\0\1\122\71\0"+
    "\1\123\37\0\1\124\52\0\1\125\66\0\1\126\57\0"+
    "\1\127\43\0\1\130\54\0\1\131\66\0\1\132\37\0"+
    "\1\133\53\0\1\134\60\0\1\135\50\0\1\136\72\0"+
    "\1\137\41\0\1\140\63\0\1\141\46\0\1\142\45\0"+
    "\1\143\42\0\1\144\62\0\1\145\45\0\1\146\101\0"+
    "\1\147\64\0\1\150\45\0\1\151\60\0\1\152\42\0"+
    "\1\153\66\0\1\154\44\0\1\155\60\0\1\156\44\0"+
    "\1\157\54\0\1\160\70\0\1\161\54\0\1\162\60\0"+
    "\1\163\34\0\1\164\66\0\1\165\25\0\1\166\63\0"+
    "\1\167\56\0\1\70\43\0\1\145\100\0\1\170\56\0"+
    "\1\171\51\0\1\172\54\0\1\173\52\0\1\174\50\0"+
    "\1\175\71\0\1\176\43\0\1\177\62\0\1\200\42\0"+
    "\1\201\71\0\1\202\47\0\1\203\31\0\1\204\67\0"+
    "\1\205\54\0\1\206\67\0\1\207\53\0\1\210\57\0"+
    "\1\211\31\0\1\212\76\0\1\213\42\0\1\214\63\0"+
    "\1\215\34\0\1\167\71\0\1\216\60\0\1\217\53\0"+
    "\1\220\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5085];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\2\11\2\1\3\11\16\1\1\11"+
    "\1\1\25\0\4\11\1\1\45\0\1\11\4\0\2\11"+
    "\4\0\1\11\4\0\1\1\1\11\1\0\1\11\1\1"+
    "\3\0\1\1\2\0\1\11\5\0\7\11\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, yyline + 1, yycolumn + 1));
	}

	private Symbol symbol(int type, Object object) {
		return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, (String) object, yyline + 1, yycolumn + 1));
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ClientLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;

  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(UNKNOWN, yytext());
            }
            // fall through
          case 39: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 40: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 41: break;
          case 4:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 42: break;
          case 5:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 43: break;
          case 6:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 44: break;
          case 7:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 45: break;
          case 8:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 46: break;
          case 9:
            { string.append(yytext());
            }
            // fall through
          case 47: break;
          case 10:
            { yybegin(YYINITIAL); return symbol(STR, string.toString());
            }
            // fall through
          case 48: break;
          case 11:
            { string.append('\\');
            }
            // fall through
          case 49: break;
          case 12:
            { string.append('\"');
            }
            // fall through
          case 50: break;
          case 13:
            { string.append('\n');
            }
            // fall through
          case 51: break;
          case 14:
            { string.append('\r');
            }
            // fall through
          case 52: break;
          case 15:
            { string.append('\t');
            }
            // fall through
          case 53: break;
          case 16:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 54: break;
          case 17:
            { return symbol(NOTE, yytext());
            }
            // fall through
          case 55: break;
          case 18:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 56: break;
          case 19:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 57: break;
          case 20:
            { return symbol(CHANNEL, yytext());
            }
            // fall through
          case 58: break;
          case 21:
            { return symbol(ERROR, yytext());
            }
            // fall through
          case 59: break;
          case 22:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 60: break;
          case 23:
            { return symbol(LINE, yytext());
            }
            // fall through
          case 61: break;
          case 24:
            { return symbol(LIST, yytext());
            }
            // fall through
          case 62: break;
          case 25:
            { return symbol(TRACK, yytext());
            }
            // fall through
          case 63: break;
          case 26:
            { return symbol(TYPE_E, yytext());
            }
            // fall through
          case 64: break;
          case 27:
            { return symbol(LEXEMA, yytext());
            }
            // fall through
          case 65: break;
          case 28:
            { return symbol(LISTS, yytext());
            }
            // fall through
          case 66: break;
          case 29:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 67: break;
          case 30:
            { return symbol(NUMBER, yytext());
            }
            // fall through
          case 68: break;
          case 31:
            { return symbol(EIGHTH, yytext());
            }
            // fall through
          case 69: break;
          case 32:
            { return symbol(TRACKS, yytext());
            }
            // fall through
          case 70: break;
          case 33:
            { return symbol(RANDOM, yytext());
            }
            // fall through
          case 71: break;
          case 34:
            { return symbol(COLUMN, yytext());
            }
            // fall through
          case 72: break;
          case 35:
            { return symbol(ERRORS, yytext());
            }
            // fall through
          case 73: break;
          case 36:
            { return symbol(CIRCULAR, yytext());
            }
            // fall through
          case 74: break;
          case 37:
            { return symbol(DURATION, yytext());
            }
            // fall through
          case 75: break;
          case 38:
            { return symbol(DESCRIPTION, yytext());
            }
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
