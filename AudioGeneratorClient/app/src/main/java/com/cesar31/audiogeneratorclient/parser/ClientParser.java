
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogeneratorclient.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ClientParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClientParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ClientParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ClientParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ClientParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\065\003\000\002\002\004\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\063\005\000\002\064\006\000\002\062\004\000" +
    "\002\062\003\000\002\061\005\000\002\054\004\000\002" +
    "\054\003\000\002\057\006\000\002\060\006\000\002\056" +
    "\005\000\002\053\010\000\002\055\005\000\002\052\005" +
    "\000\002\051\006\000\002\050\005\000\002\047\004\000" +
    "\002\047\003\000\002\046\011\000\002\045\005\000\002" +
    "\037\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\003\000\002\043\005\000\002\044\006\000\002\042\005" +
    "\000\002\034\004\000\002\034\003\000\002\033\007\000" +
    "\002\036\005\000\002\035\005\000\002\031\005\000\002" +
    "\032\006\000\002\010\005\000\002\030\004\000\002\030" +
    "\003\000\002\007\005\000\002\027\007\000\002\002\005" +
    "\000\002\003\005\000\002\004\005\000\002\005\005\000" +
    "\002\006\005\000\002\011\005\000\002\012\005\000\002" +
    "\013\005\000\002\014\005\000\002\015\005\000\002\016" +
    "\005\000\002\017\005\000\002\020\006\000\002\021\006" +
    "\000\002\022\006\000\002\023\006\000\002\024\006\000" +
    "\002\025\006\000\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\033\005\001\002\000\004\002\ufffe\001" +
    "\002\000\014\004\260\014\257\015\063\020\256\021\023" +
    "\001\002\000\004\033\216\001\002\000\004\033\056\001" +
    "\002\000\004\002\206\001\002\000\004\033\076\001\002" +
    "\000\004\002\ufffd\001\002\000\004\033\056\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\004" +
    "\033\022\001\002\000\004\002\ufffc\001\002\000\004\033" +
    "\uffeb\001\002\000\004\033\050\001\002\000\004\021\023" +
    "\001\002\000\004\016\025\001\002\000\004\014\030\001" +
    "\002\000\004\032\026\001\002\000\004\040\027\001\002" +
    "\000\010\014\uffde\017\uffde\031\uffde\001\002\000\004\032" +
    "\045\001\002\000\004\022\032\001\002\000\004\032\043" +
    "\001\002\000\004\023\034\001\002\000\004\032\037\001" +
    "\002\000\004\034\036\001\002\000\004\033\uffea\001\002" +
    "\000\006\024\041\025\042\001\002\000\004\034\uffe7\001" +
    "\002\000\006\023\uffe6\034\uffe6\001\002\000\006\023\uffe5" +
    "\034\uffe5\001\002\000\006\024\041\025\042\001\002\000" +
    "\004\023\uffe8\001\002\000\004\036\046\001\002\000\004" +
    "\022\uffe9\001\002\000\004\033\uffec\001\002\000\006\021" +
    "\023\035\052\001\002\000\004\002\uffed\001\002\000\004" +
    "\020\053\001\002\000\004\034\054\001\002\000\004\002" +
    "\uffe3\001\002\000\004\033\uffe0\001\002\000\004\015\063" +
    "\001\002\000\004\033\062\001\002\000\004\033\uffe1\001" +
    "\002\000\004\002\uffef\001\002\000\006\015\063\035\064" +
    "\001\002\000\004\016\025\001\002\000\004\021\065\001" +
    "\002\000\004\034\066\001\002\000\004\002\uffee\001\002" +
    "\000\004\017\070\001\002\000\004\032\073\001\002\000" +
    "\004\034\072\001\002\000\004\033\uffdf\001\002\000\004" +
    "\037\074\001\002\000\004\034\uffdd\001\002\000\004\033" +
    "\202\001\002\000\004\005\176\001\002\000\004\033\uffd8" +
    "\001\002\000\004\033\103\001\002\000\004\033\172\001" +
    "\002\000\004\033\117\001\002\000\004\006\113\001\002" +
    "\000\004\007\105\001\002\000\004\033\107\001\002\000" +
    "\004\033\uffd5\001\002\000\004\035\110\001\002\000\004" +
    "\006\111\001\002\000\004\034\112\001\002\000\004\033" +
    "\uffc9\001\002\000\004\034\114\001\002\000\004\007\uffd0" +
    "\001\002\000\004\033\132\001\002\000\004\036\122\001" +
    "\002\000\004\010\120\001\002\000\004\034\121\001\002" +
    "\000\004\036\uffcf\001\002\000\004\033\123\001\002\000" +
    "\004\035\125\001\002\000\004\033\uffd4\001\002\000\004" +
    "\010\126\001\002\000\004\034\127\001\002\000\004\033" +
    "\uffc8\001\002\000\004\036\163\001\002\000\004\033\137" +
    "\001\002\000\004\011\133\001\002\000\004\034\134\001" +
    "\002\000\004\036\uffce\001\002\000\004\033\151\001\002" +
    "\000\004\040\142\001\002\000\004\012\140\001\002\000" +
    "\004\034\141\001\002\000\004\040\uffcd\001\002\000\004" +
    "\033\144\001\002\000\004\033\uffd2\001\002\000\004\035" +
    "\145\001\002\000\004\012\146\001\002\000\004\034\147" +
    "\001\002\000\004\033\uffc6\001\002\000\004\040\155\001" +
    "\002\000\004\013\153\001\002\000\004\033\uffd6\001\002" +
    "\000\004\034\154\001\002\000\004\040\uffcc\001\002\000" +
    "\004\033\157\001\002\000\004\033\uffd1\001\002\000\004" +
    "\035\160\001\002\000\004\013\161\001\002\000\004\034" +
    "\162\001\002\000\004\033\uffc5\001\002\000\004\033\164" +
    "\001\002\000\004\035\166\001\002\000\004\033\uffd3\001" +
    "\002\000\004\011\167\001\002\000\004\034\170\001\002" +
    "\000\004\033\uffc7\001\002\000\004\033\uffd7\001\002\000" +
    "\004\035\173\001\002\000\004\005\174\001\002\000\004" +
    "\034\175\001\002\000\004\033\uffc4\001\002\000\004\034" +
    "\177\001\002\000\004\033\uffcb\001\002\000\004\002\uffda" +
    "\001\002\000\004\033\uffd9\001\002\000\006\005\176\035" +
    "\203\001\002\000\004\004\204\001\002\000\004\034\205" +
    "\001\002\000\004\002\uffc3\001\002\000\004\002\000\001" +
    "\002\000\004\033\210\001\002\000\006\015\063\035\212" +
    "\001\002\000\004\002\uffe2\001\002\000\004\014\213\001" +
    "\002\000\004\034\214\001\002\000\004\002\uffdb\001\002" +
    "\000\004\033\ufff8\001\002\000\004\026\224\001\002\000" +
    "\004\033\237\001\002\000\004\033\223\001\002\000\004" +
    "\002\ufffb\001\002\000\004\033\ufff9\001\002\000\006\026" +
    "\224\035\225\001\002\000\004\030\230\001\002\000\004" +
    "\015\226\001\002\000\004\034\227\001\002\000\004\002" +
    "\ufffa\001\002\000\004\032\233\001\002\000\004\034\232" +
    "\001\002\000\004\033\ufff4\001\002\000\004\036\234\001" +
    "\002\000\004\034\ufff2\001\002\000\004\033\251\001\002" +
    "\000\004\033\ufff5\001\002\000\004\027\240\001\002\000" +
    "\004\016\025\001\002\000\004\031\242\001\002\000\004" +
    "\032\246\001\002\000\004\017\070\001\002\000\004\034" +
    "\245\001\002\000\004\033\ufff1\001\002\000\004\040\247" +
    "\001\002\000\004\017\ufff0\001\002\000\004\033\ufff6\001" +
    "\002\000\006\027\240\035\253\001\002\000\004\033\ufff7" +
    "\001\002\000\004\026\254\001\002\000\004\034\255\001" +
    "\002\000\004\033\ufff3\001\002\000\004\034\263\001\002" +
    "\000\004\034\262\001\002\000\004\034\261\001\002\000" +
    "\004\033\uffca\001\002\000\004\033\uffdc\001\002\000\004" +
    "\033\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\030\010\016\017\010\031\006\033\005\042" +
    "\014\043\015\046\012\050\013\052\003\063\011\065\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\216\061\214\062\217\001\001\000\006\033\054\034\206" +
    "\001\001\000\002\001\001\000\010\007\076\016\077\030" +
    "\074\001\001\000\002\001\001\000\006\033\054\034\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\017\047\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\050\046\046\001\001\000\002\001\001\000" +
    "\004\036\023\001\001\000\004\045\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\032\001\001\000\002\001\001\000\004" +
    "\040\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\057\051\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\200\016\077\026\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\101\011\103\027\100\001\001\000\004\025\170\001\001" +
    "\000\006\003\114\012\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\130\013\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\134\014\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\151\015\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\210\033\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\235\054\234\001\001\000\010\057\216\061" +
    "\221\064\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\247\060\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\240\001\001\000" +
    "\004\055\242\001\001\000\002\001\001\000\004\035\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ClientParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ClientParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ClientParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ClientParser(ClientLex lex) {
        super(lex);
    }
    public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
        System.out.println();
        //this.errorHandler.setErrorForListGram((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ClientParser$actions {
  private final ClientParser parser;

  /** Constructor */
  CUP$ClientParser$actions(ClientParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ClientParser$do_action_part00000000(
    int                        CUP$ClientParser$act_num,
    java_cup.runtime.lr_parser CUP$ClientParser$parser,
    java.util.Stack            CUP$ClientParser$stack,
    int                        CUP$ClientParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ClientParser$result;

      /* select the action based on the action number */
      switch (CUP$ClientParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // client ::= list 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("client",51, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= client EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).value;
		RESULT = start_val;
              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ClientParser$parser.done_parsing();
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // client ::= tracks 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("client",51, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // client ::= list_tracks 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("client",51, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // client ::= track_notes 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("client",51, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // client ::= errors 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("client",51, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // track_notes ::= track list_channel cl_track 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("track_notes",49, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cl_track ::= SMALLER DIVIDE TRACK GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_track",50, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_channel ::= list_channel channel 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_channel",48, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_channel ::= channel 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_channel",48, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // channel ::= op_channel list_notes cl_channel 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("channel",47, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_notes ::= list_notes note 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_notes",42, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_notes ::= note 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_notes",42, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op_channel ::= SMALLER CHANNEL number GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_channel",45, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cl_channel ::= SMALLER DIVIDE CHANNEL GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_channel",46, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // number ::= NUMBER EQUAL INTEGER 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.peek()).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("number",44, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // note ::= SMALLER NOTE name eighth duration GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("note",41, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-5)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // eighth ::= EIGHTH EQUAL STR 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.peek()).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("eighth",43, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_tracks ::= list_item track_list cl_list 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_tracks",40, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cl_list ::= SMALLER DIVIDE LIST GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_list",39, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list ::= op_lists list_list cl_lists 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_list ::= list_list list_item 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_list",37, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_list ::= list_item 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_list",37, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_item ::= SMALLER LIST name number_tracks random circular GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("list_item",36, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-6)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // number_tracks ::= TRACKS EQUAL INTEGER 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.peek()).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("number_tracks",35, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // random ::= RANDOM EQUAL boolean_value 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("random",29, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // circular ::= CIRCULAR EQUAL boolean_value 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("circular",30, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolean_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("boolean_value",31, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolean_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("boolean_value",31, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_lists ::= SMALLER LISTS GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_lists",33, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cl_lists ::= SMALLER DIVIDE LISTS GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_lists",34, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tracks ::= op_tracks track_list cl_tracks 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("tracks",32, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // track_list ::= track_list track 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("track_list",26, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // track_list ::= track 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("track_list",26, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // track ::= SMALLER TRACK name duration GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("track",25, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-4)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // name ::= NAME EQUAL STR 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.peek()).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("name",28, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // duration ::= DURATION EQUAL DECIMAL 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.peek()).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("duration",27, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_tracks ::= SMALLER TRACKS GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_tracks",23, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cl_tracks ::= SMALLER DIVIDE TRACKS GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_tracks",24, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // errors ::= op_errors error_list cl_errors 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("errors",6, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // error_list ::= error_list err 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("error_list",22, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // error_list ::= err 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("error_list",22, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // err ::= op_error error_options cl_error 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("err",5, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // error_options ::= type line column lex desc 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("error_options",21, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-4)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= op_type TYPE_E cl_type 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // line ::= op_line INTEGER cl_line 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("line",1, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // column ::= op_column INTEGER cl_column 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("column",2, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lex ::= op_lex STR cl_lex 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("lex",3, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // desc ::= op_desc STR cl_desc 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-1)).value;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("desc",4, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_type ::= SMALLER TYPE GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_type",7, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_line ::= SMALLER LINE GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_line",8, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_column ::= SMALLER COLUMN GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_column",9, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_lex ::= SMALLER LEXEMA GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_lex",10, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_desc ::= SMALLER DESCRIPTION GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_desc",11, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op_error ::= SMALLER ERROR GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_error",12, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op_errors ::= SMALLER ERRORS GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("op_errors",13, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-2)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cl_type ::= SMALLER DIVIDE TYPE GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_type",14, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cl_line ::= SMALLER DIVIDE LINE GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_line",15, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cl_column ::= SMALLER DIVIDE COLUMN GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_column",16, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cl_lex ::= SMALLER DIVIDE LEXEMA GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_lex",17, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cl_desc ::= SMALLER DIVIDE DESCRIPTION GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_desc",18, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cl_error ::= SMALLER DIVIDE ERROR GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_error",19, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cl_errors ::= SMALLER DIVIDE ERRORS GREATER 
            {
              Object RESULT =null;

              CUP$ClientParser$result = parser.getSymbolFactory().newSymbol("cl_errors",20, ((java_cup.runtime.Symbol)CUP$ClientParser$stack.elementAt(CUP$ClientParser$top-3)), ((java_cup.runtime.Symbol)CUP$ClientParser$stack.peek()), RESULT);
            }
          return CUP$ClientParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ClientParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ClientParser$do_action(
    int                        CUP$ClientParser$act_num,
    java_cup.runtime.lr_parser CUP$ClientParser$parser,
    java.util.Stack            CUP$ClientParser$stack,
    int                        CUP$ClientParser$top)
    throws java.lang.Exception
    {
              return CUP$ClientParser$do_action_part00000000(
                               CUP$ClientParser$act_num,
                               CUP$ClientParser$parser,
                               CUP$ClientParser$stack,
                               CUP$ClientParser$top);
    }
}

}
