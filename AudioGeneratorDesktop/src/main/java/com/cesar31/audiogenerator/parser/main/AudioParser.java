
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser.main;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Array;
import com.cesar31.audiogenerator.parser.Token;
import com.cesar31.audiogenerator.instruction.*;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AudioParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AudioParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AudioParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AudioParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AudioParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\002\002\004\000\002\014\010\000\002\014" +
    "\007\000\002\014\010\000\002\014\010\000\002\014\010" +
    "\000\002\014\010\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\102\004\000\002" +
    "\102\002\000\002\102\004\000\002\102\004\000\002\013" +
    "\005\000\002\013\002\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\060\004\000\002\060\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\016\005\000\002\016" +
    "\002\000\002\016\005\000\002\016\005\000\002\015\004" +
    "\000\002\015\003\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\006\007\000\002\006\006" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\004\004\000\002\004\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\005\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\004\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\004\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\004\000\002\055\004\000\002\047\011" +
    "\000\002\047\010\000\002\047\011\000\002\047\011\000" +
    "\002\047\011\000\002\047\011\000\002\047\011\000\002" +
    "\047\011\000\002\047\010\000\002\047\010\000\002\047" +
    "\010\000\002\047\010\000\002\047\010\000\002\050\010" +
    "\000\002\050\010\000\002\050\010\000\002\050\010\000" +
    "\002\050\010\000\002\037\004\000\002\037\003\000\002" +
    "\036\005\000\002\053\004\000\002\053\002\000\002\053" +
    "\003\000\002\051\005\000\002\051\005\000\002\054\005" +
    "\000\002\054\003\000\002\052\003\000\002\040\005\000" +
    "\002\040\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\032\004\000\002\032\003\000" +
    "\002\033\004\000\002\033\003\000\002\034\004\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\005\000\002\035\003\000" +
    "\002\035\003\000\002\023\003\000\002\023\003\000\002" +
    "\101\004\000\002\101\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\056\003\000\002\056\004\000\002\056\004\000" +
    "\002\056\005\000\002\017\010\000\002\017\010\000\002" +
    "\017\010\000\002\017\010\000\002\017\010\000\002\020" +
    "\005\000\002\020\005\000\002\022\004\000\002\022\003" +
    "\000\002\021\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\011\000\002\045\014\000\002" +
    "\045\014\000\002\045\014\000\002\045\014\000\002\045" +
    "\014\000\002\045\014\000\002\045\014\000\002\011\006" +
    "\000\002\011\003\000\002\041\010\000\002\041\010\000" +
    "\002\041\010\000\002\041\010\000\002\046\012\000\002" +
    "\046\012\000\002\046\012\000\002\046\012\000\002\046" +
    "\012\000\002\046\012\000\002\070\010\000\002\070\010" +
    "\000\002\070\010\000\002\070\010\000\002\067\006\000" +
    "\002\067\002\000\002\066\004\000\002\066\002\000\002" +
    "\064\006\000\002\064\006\000\002\064\006\000\002\065" +
    "\005\000\002\065\002\000\002\065\005\000\002\065\005" +
    "\000\002\063\003\000\002\062\003\000\002\100\004\000" +
    "\002\042\010\000\002\042\011\000\002\042\012\000\002" +
    "\042\011\000\002\042\010\000\002\042\010\000\002\042" +
    "\010\000\002\042\010\000\002\042\011\000\002\042\011" +
    "\000\002\042\011\000\002\042\011\000\002\042\011\000" +
    "\002\042\012\000\002\042\012\000\002\042\012\000\002" +
    "\042\012\000\002\042\012\000\002\042\012\000\002\042" +
    "\011\000\002\042\011\000\002\042\011\000\002\042\011" +
    "\000\002\043\007\000\002\043\010\000\002\043\007\000" +
    "\002\043\007\000\002\043\007\000\002\043\010\000\002" +
    "\043\010\000\002\043\010\000\002\043\010\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\074\003" +
    "\000\002\074\002\000\002\073\005\000\002\073\003\000" +
    "\002\072\004\000\002\071\003\000\002\071\003\000\002" +
    "\075\006\000\002\075\010\000\002\075\010\000\002\077" +
    "\003\000\002\077\002\000\002\076\005\000\002\076\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02b1\000\010\003\006\004\004\106\005\001\002\000" +
    "\020\003\u02a8\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\001\002\000\102\002\uff65\003\uff65\004\uff65\006" +
    "\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65" +
    "\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026" +
    "\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\035\uff65" +
    "\036\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\106" +
    "\uff65\111\uff65\112\uff65\001\002\000\020\004\u029f\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\001\002\000" +
    "\006\004\012\106\013\001\002\000\004\002\011\001\002" +
    "\000\004\002\001\001\002\000\020\003\021\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\001\002\000\102" +
    "\002\uff66\003\uff66\004\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\020\uff66\021\uff66\022\uff66" +
    "\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031" +
    "\uff66\032\uff66\033\uff66\035\uff66\036\uff66\040\uff66\041\uff66" +
    "\042\uff66\043\uff66\044\uff66\106\uff66\111\uff66\112\uff66\001" +
    "\002\000\100\003\ufef7\005\ufef7\047\ufef7\050\ufef7\051\ufef7" +
    "\052\ufef7\053\ufef7\054\ufef7\056\ufef7\057\ufef7\060\ufef7\061" +
    "\ufef7\062\ufef7\064\ufef7\065\ufef7\066\ufef7\067\ufef7\070\ufef7" +
    "\071\ufef7\072\ufef7\073\ufef7\074\ufef7\075\ufef7\076\ufef7\100" +
    "\ufef7\101\ufef7\102\ufef7\103\ufef7\104\ufef7\105\ufef7\106\ufef7" +
    "\001\002\000\100\003\ufef4\005\ufef4\047\ufef4\050\ufef4\051" +
    "\ufef4\052\ufef4\053\ufef4\054\ufef4\056\ufef4\057\ufef4\060\ufef4" +
    "\061\ufef4\062\ufef4\064\ufef4\065\ufef4\066\ufef4\067\ufef4\070" +
    "\ufef4\071\ufef4\072\ufef4\073\ufef4\074\ufef4\075\ufef4\076\ufef4" +
    "\100\ufef4\101\ufef4\102\ufef4\103\ufef4\104\ufef4\105\ufef4\106" +
    "\ufef4\001\002\000\100\003\ufef5\005\ufef5\047\ufef5\050\ufef5" +
    "\051\ufef5\052\ufef5\053\ufef5\054\ufef5\056\ufef5\057\ufef5\060" +
    "\ufef5\061\ufef5\062\ufef5\064\ufef5\065\ufef5\066\ufef5\067\ufef5" +
    "\070\ufef5\071\ufef5\072\ufef5\073\ufef5\074\ufef5\075\ufef5\076" +
    "\ufef5\100\ufef5\101\ufef5\102\ufef5\103\ufef5\104\ufef5\105\ufef5" +
    "\106\ufef5\001\002\000\100\003\ufef2\005\ufef2\047\ufef2\050" +
    "\ufef2\051\ufef2\052\ufef2\053\ufef2\054\ufef2\056\ufef2\057\ufef2" +
    "\060\ufef2\061\ufef2\062\ufef2\064\ufef2\065\ufef2\066\ufef2\067" +
    "\ufef2\070\ufef2\071\ufef2\072\ufef2\073\ufef2\074\ufef2\075\ufef2" +
    "\076\ufef2\100\ufef2\101\ufef2\102\ufef2\103\ufef2\104\ufef2\105" +
    "\ufef2\106\ufef2\001\002\000\100\003\ufef3\005\ufef3\047\ufef3" +
    "\050\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\056\ufef3\057" +
    "\ufef3\060\ufef3\061\ufef3\062\ufef3\064\ufef3\065\ufef3\066\ufef3" +
    "\067\ufef3\070\ufef3\071\ufef3\072\ufef3\073\ufef3\074\ufef3\075" +
    "\ufef3\076\ufef3\100\ufef3\101\ufef3\102\ufef3\103\ufef3\104\ufef3" +
    "\105\ufef3\106\ufef3\001\002\000\010\003\u029c\005\025\106" +
    "\ufff5\001\002\000\100\003\ufef6\005\ufef6\047\ufef6\050\ufef6" +
    "\051\ufef6\052\ufef6\053\ufef6\054\ufef6\056\ufef6\057\ufef6\060" +
    "\ufef6\061\ufef6\062\ufef6\064\ufef6\065\ufef6\066\ufef6\067\ufef6" +
    "\070\ufef6\071\ufef6\072\ufef6\073\ufef6\074\ufef6\075\ufef6\076" +
    "\ufef6\100\ufef6\101\ufef6\102\ufef6\103\ufef6\104\ufef6\105\ufef6" +
    "\106\ufef6\001\002\000\010\003\026\005\025\106\ufff5\001" +
    "\002\000\004\106\005\001\002\000\020\003\u0296\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\001\002\000" +
    "\020\033\020\035\017\036\015\040\016\041\022\044\014" +
    "\106\005\001\002\000\014\003\uffc5\064\uffc5\065\uffc5\101" +
    "\uffc5\106\uffc5\001\002\000\012\002\ufff1\003\034\106\013" +
    "\111\036\001\002\000\006\064\032\106\ufff4\001\002\000" +
    "\016\033\020\035\017\036\015\040\016\041\022\044\014" +
    "\001\002\000\014\003\uffc6\064\uffc6\065\uffc6\101\uffc6\106" +
    "\uffc6\001\002\000\040\003\u0294\006\041\007\057\010\042" +
    "\011\040\012\054\013\046\014\053\033\020\035\017\036" +
    "\015\040\016\041\022\043\047\044\014\001\002\000\004" +
    "\002\ufffc\001\002\000\040\003\052\006\041\007\057\010" +
    "\042\011\040\012\054\013\046\014\053\033\020\035\017" +
    "\036\015\040\016\041\022\043\047\044\014\001\002\000" +
    "\004\106\005\001\002\000\022\003\uffc3\017\uffc3\033\uffc3" +
    "\035\uffc3\036\uffc3\040\uffc3\041\uffc3\044\uffc3\001\002\000" +
    "\036\003\u0233\007\u0231\010\042\011\040\012\054\013\046" +
    "\014\053\033\020\035\017\036\015\040\016\041\022\043" +
    "\u0230\044\014\001\002\000\022\003\uffc4\017\uffc4\033\uffc4" +
    "\035\uffc4\036\uffc4\040\uffc4\041\uffc4\044\uffc4\001\002\000" +
    "\020\003\u0218\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\001\002\000\042\003\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\033\uffea\035\uffea" +
    "\036\uffea\040\uffea\041\uffea\043\uffea\044\uffea\112\uffea\001" +
    "\002\000\042\003\u0217\006\041\007\057\010\042\011\040" +
    "\012\054\013\046\014\053\033\020\035\017\036\015\040" +
    "\016\041\022\043\047\044\014\112\u0215\001\002\000\022" +
    "\003\uffc0\017\uffc0\033\uffc0\035\uffc0\036\uffc0\040\uffc0\041" +
    "\uffc0\044\uffc0\001\002\000\006\003\u0208\103\u0209\001\002" +
    "\000\006\003\u01f8\103\u01f9\001\002\000\042\003\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\033\uffec\035\uffec\036\uffec\040\uffec\041\uffec\043\uffec\044" +
    "\uffec\112\uffec\001\002\000\042\007\267\010\042\011\040" +
    "\012\054\013\046\014\053\033\020\035\017\036\015\040" +
    "\016\041\022\043\266\044\014\103\264\106\005\112\262" +
    "\001\002\000\022\003\uffc1\017\uffc1\033\uffc1\035\uffc1\036" +
    "\uffc1\040\uffc1\041\uffc1\044\uffc1\001\002\000\022\003\uffc2" +
    "\017\uffc2\033\uffc2\035\uffc2\036\uffc2\040\uffc2\041\uffc2\044" +
    "\uffc2\001\002\000\042\003\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\033\uffeb\035\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\112\uffeb\001\002" +
    "\000\004\106\005\001\002\000\016\003\060\010\042\011" +
    "\040\012\054\013\046\014\053\001\002\000\020\017\252" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\022\003\063\017\062\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\001\002\000\020\003\242\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\001\002" +
    "\000\024\003\065\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\065\066\106\uffc9\001\002\000\012\003\065" +
    "\064\032\065\066\106\uffc9\001\002\000\046\003\103\015" +
    "\074\016\101\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\045\112\046\070\055\116\063\072\067\102\103" +
    "\075\106\uffc7\107\106\110\071\001\002\000\044\003\103" +
    "\015\074\016\101\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\045\112\046\070\055\116\063\072\067\102" +
    "\103\075\107\106\110\071\001\002\000\004\106\uffd5\001" +
    "\002\000\062\003\uff71\047\uff71\050\uff71\051\uff71\052\uff71" +
    "\053\uff71\054\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062" +
    "\uff71\064\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71" +
    "\073\uff71\100\uff71\102\uff71\104\uff71\105\uff71\106\uff71\001" +
    "\002\000\062\003\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\054\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062" +
    "\uff6f\064\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f" +
    "\073\uff6f\100\uff6f\102\uff6f\104\uff6f\105\uff6f\106\uff6f\001" +
    "\002\000\040\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\103\075\107\106\110\071\001\002\000\062\003\uff6a" +
    "\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\056" +
    "\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\064\uff6a\066\uff6a" +
    "\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\100\uff6a\102" +
    "\uff6a\104\uff6a\105\uff6a\106\uff6a\001\002\000\062\003\uff68" +
    "\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\056" +
    "\uff68\057\uff68\060\uff68\061\uff68\062\uff68\064\uff68\066\uff68" +
    "\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\100\uff68\102" +
    "\uff68\104\uff68\105\uff68\106\uff68\001\002\000\044\003\103" +
    "\015\074\016\101\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\045\112\046\070\055\116\063\072\067\102" +
    "\103\075\107\106\110\071\001\002\000\062\003\uff6e\047" +
    "\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\056\uff6e" +
    "\057\uff6e\060\uff6e\061\uff6e\062\uff6e\064\uff6e\066\uff6e\067" +
    "\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\100\uff6e\102\uff6e" +
    "\104\uff6e\105\uff6e\106\uff6e\001\002\000\066\003\uff6d\047" +
    "\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\056\uff6d" +
    "\057\uff6d\060\uff6d\061\uff6d\062\uff6d\064\uff6d\066\uff6d\067" +
    "\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d\100\uff6d\101\170" +
    "\102\uff6d\103\167\104\uff6d\105\uff6d\106\uff6d\001\002\000" +
    "\062\003\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c" +
    "\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\064" +
    "\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c" +
    "\100\uff6c\102\uff6c\104\uff6c\105\uff6c\106\uff6c\001\002\000" +
    "\062\003\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67" +
    "\054\uff67\056\uff67\057\uff67\060\uff67\061\uff67\062\uff67\064" +
    "\uff67\066\uff67\067\uff67\070\uff67\071\uff67\072\uff67\073\uff67" +
    "\100\uff67\102\uff67\104\uff67\105\uff67\106\uff67\001\002\000" +
    "\042\003\103\015\074\016\101\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\103\075\107\106\110\071\001\002\000\062\003\uff69" +
    "\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\062\uff69\064\uff69\066\uff69" +
    "\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\100\uff69\102" +
    "\uff69\104\uff69\105\uff69\106\uff69\001\002\000\062\003\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\056" +
    "\uff73\057\uff73\060\uff73\061\uff73\062\uff73\064\uff73\066\uff73" +
    "\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73\100\uff73\102" +
    "\uff73\104\uff73\105\uff73\106\uff73\001\002\000\062\003\uff75" +
    "\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\056" +
    "\uff75\057\uff75\060\uff75\061\uff75\062\uff75\064\uff75\066\uff75" +
    "\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\100\uff75\102" +
    "\uff75\104\uff75\105\uff75\106\uff75\001\002\000\062\003\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\056" +
    "\uff70\057\uff70\060\uff70\061\uff70\062\uff70\064\uff70\066\uff70" +
    "\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70\100\uff70\102" +
    "\uff70\104\uff70\105\uff70\106\uff70\001\002\000\062\003\uff77" +
    "\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\056" +
    "\uff77\057\uff77\060\uff77\061\uff77\062\uff77\064\uff77\066\uff77" +
    "\067\uff77\070\uff77\071\uff77\072\uff77\073\uff77\100\uff77\102" +
    "\uff77\104\uff77\105\uff77\106\uff77\001\002\000\062\003\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\056" +
    "\uff79\057\uff79\060\uff79\061\uff79\062\uff79\064\uff79\066\uff79" +
    "\067\uff79\070\uff79\071\uff79\072\uff79\073\162\100\uff79\102" +
    "\uff79\104\uff79\105\uff79\106\uff79\001\002\000\060\003\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\064\uff7b\066\uff7b" +
    "\067\uff7b\070\uff7b\071\uff7b\072\uff7b\100\uff7b\102\uff7b\104" +
    "\uff7b\105\uff7b\106\uff7b\001\002\000\062\003\uff72\047\uff72" +
    "\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057" +
    "\uff72\060\uff72\061\uff72\062\uff72\064\uff72\066\uff72\067\uff72" +
    "\070\uff72\071\uff72\072\uff72\073\uff72\100\uff72\102\uff72\104" +
    "\uff72\105\uff72\106\uff72\001\002\000\060\003\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\056\uff7f\057" +
    "\uff7f\060\uff7f\061\uff7f\062\uff7f\064\uff7f\066\uff7f\067\uff7f" +
    "\070\144\071\143\072\142\100\uff7f\102\uff7f\104\uff7f\105" +
    "\uff7f\106\uff7f\001\002\000\052\003\uff82\047\uff82\050\uff82" +
    "\051\uff82\052\uff82\053\uff82\054\uff82\056\uff82\057\uff82\060" +
    "\uff82\061\uff82\062\uff82\064\uff82\066\137\067\140\100\uff82" +
    "\102\uff82\104\uff82\105\uff82\106\uff82\001\002\000\046\003" +
    "\uff89\047\135\050\134\051\130\052\132\053\133\054\131" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\064\uff89\100" +
    "\uff89\102\uff89\104\uff89\105\uff89\106\uff89\001\002\000\036" +
    "\003\103\015\074\016\101\033\020\035\017\036\015\040" +
    "\016\041\022\044\014\045\112\046\070\103\075\107\106" +
    "\110\071\001\002\000\032\003\uff8c\056\126\057\125\060" +
    "\uff8c\061\uff8c\062\uff8c\064\uff8c\100\uff8c\102\uff8c\104\uff8c" +
    "\105\uff8c\106\uff8c\001\002\000\012\060\123\061\121\062" +
    "\122\106\uffca\001\002\000\044\003\103\015\074\016\101" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\045" +
    "\112\046\070\055\116\063\072\067\102\103\075\107\106" +
    "\110\071\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\044\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\103\075\107\106\110\071" +
    "\001\002\000\032\003\uff8f\056\126\057\125\060\uff8f\061" +
    "\uff8f\062\uff8f\064\uff8f\100\uff8f\102\uff8f\104\uff8f\105\uff8f" +
    "\106\uff8f\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\044\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\103\075\107\106\110\071" +
    "\001\002\000\046\003\uff8b\047\135\050\134\051\130\052" +
    "\132\053\133\054\131\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\064\uff8b\100\uff8b\102\uff8b\104\uff8b\105\uff8b\106" +
    "\uff8b\001\002\000\044\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\103\075\107\106\110\071" +
    "\001\002\000\044\003\103\015\074\016\101\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\045\112\046\070" +
    "\055\116\063\072\067\102\103\075\107\106\110\071\001" +
    "\002\000\044\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\063\072\067\102\103\075\107\106\110\071\001\002" +
    "\000\044\003\103\015\074\016\101\033\020\035\017\036" +
    "\015\040\016\041\022\044\014\045\112\046\070\055\116" +
    "\063\072\067\102\103\075\107\106\110\071\001\002\000" +
    "\044\003\103\015\074\016\101\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\067\102\103\075\107\106\110\071\001\002\000\044" +
    "\003\103\015\074\016\101\033\020\035\017\036\015\040" +
    "\016\041\022\044\014\045\112\046\070\055\116\063\072" +
    "\067\102\103\075\107\106\110\071\001\002\000\052\003" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\064\uff88\066" +
    "\137\067\140\100\uff88\102\uff88\104\uff88\105\uff88\106\uff88" +
    "\001\002\000\044\003\103\015\074\016\101\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\045\112\046\070" +
    "\055\116\063\072\067\102\103\075\107\106\110\071\001" +
    "\002\000\044\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\063\072\067\102\103\075\107\106\110\071\001\002" +
    "\000\060\003\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80" +
    "\064\uff80\066\uff80\067\uff80\070\144\071\143\072\142\100" +
    "\uff80\102\uff80\104\uff80\105\uff80\106\uff80\001\002\000\044" +
    "\003\103\015\074\016\101\033\020\035\017\036\015\040" +
    "\016\041\022\044\014\045\112\046\070\055\116\063\072" +
    "\067\102\103\075\107\106\110\071\001\002\000\044\003" +
    "\103\015\074\016\101\033\020\035\017\036\015\040\016" +
    "\041\022\044\014\045\112\046\070\055\116\063\072\067" +
    "\102\103\075\107\106\110\071\001\002\000\044\003\103" +
    "\015\074\016\101\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\045\112\046\070\055\116\063\072\067\102" +
    "\103\075\107\106\110\071\001\002\000\060\003\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\056\uff7e" +
    "\057\uff7e\060\uff7e\061\uff7e\062\uff7e\064\uff7e\066\uff7e\067" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\100\uff7e\102\uff7e\104\uff7e" +
    "\105\uff7e\106\uff7e\001\002\000\060\003\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\061\uff7d\062\uff7d\064\uff7d\066\uff7d\067\uff7d\070" +
    "\uff7d\071\uff7d\072\uff7d\100\uff7d\102\uff7d\104\uff7d\105\uff7d" +
    "\106\uff7d\001\002\000\060\003\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\064\uff7c\066\uff7c\067\uff7c\070\uff7c\071" +
    "\uff7c\072\uff7c\100\uff7c\102\uff7c\104\uff7c\105\uff7c\106\uff7c" +
    "\001\002\000\060\003\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\056\uff81\057\uff81\060\uff81\061\uff81" +
    "\062\uff81\064\uff81\066\uff81\067\uff81\070\144\071\143\072" +
    "\142\100\uff81\102\uff81\104\uff81\105\uff81\106\uff81\001\002" +
    "\000\052\003\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87" +
    "\064\uff87\066\137\067\140\100\uff87\102\uff87\104\uff87\105" +
    "\uff87\106\uff87\001\002\000\052\003\uff84\047\uff84\050\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\062\uff84\064\uff84\066\137\067\140\100\uff84" +
    "\102\uff84\104\uff84\105\uff84\106\uff84\001\002\000\052\003" +
    "\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85" +
    "\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\064\uff85\066" +
    "\137\067\140\100\uff85\102\uff85\104\uff85\105\uff85\106\uff85" +
    "\001\002\000\052\003\uff83\047\uff83\050\uff83\051\uff83\052" +
    "\uff83\053\uff83\054\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\064\uff83\066\137\067\140\100\uff83\102\uff83\104" +
    "\uff83\105\uff83\106\uff83\001\002\000\052\003\uff86\047\uff86" +
    "\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\056\uff86\057" +
    "\uff86\060\uff86\061\uff86\062\uff86\064\uff86\066\137\067\140" +
    "\100\uff86\102\uff86\104\uff86\105\uff86\106\uff86\001\002\000" +
    "\046\003\uff8a\047\135\050\134\051\130\052\132\053\133" +
    "\054\131\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\064" +
    "\uff8a\100\uff8a\102\uff8a\104\uff8a\105\uff8a\106\uff8a\001\002" +
    "\000\032\003\uff8d\056\126\057\125\060\uff8d\061\uff8d\062" +
    "\uff8d\064\uff8d\100\uff8d\102\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\001\002\000\032\003\uff8e\056\126\057\125\060\uff8e\061" +
    "\uff8e\062\uff8e\064\uff8e\100\uff8e\102\uff8e\104\uff8e\105\uff8e" +
    "\106\uff8e\001\002\000\062\003\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\056\uff74\057\uff74\060\uff74" +
    "\061\uff74\062\uff74\064\uff74\066\uff74\067\uff74\070\uff74\071" +
    "\uff74\072\uff74\073\uff74\100\uff74\102\uff74\104\uff74\105\uff74" +
    "\106\uff74\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\060\003\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\056\uff7a\057\uff7a\060\uff7a\061" +
    "\uff7a\062\uff7a\064\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\072\uff7a\100\uff7a\102\uff7a\104\uff7a\105\uff7a\106\uff7a\001" +
    "\002\000\062\003\uff78\047\uff78\050\uff78\051\uff78\052\uff78" +
    "\053\uff78\054\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062" +
    "\uff78\064\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78" +
    "\073\uff78\100\uff78\102\uff78\104\uff78\105\uff78\106\uff78\001" +
    "\002\000\074\003\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\100\uffaf\101" +
    "\170\102\uffaf\104\uffaf\105\uffaf\106\uffaf\001\002\000\074" +
    "\003\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\074\uff9b\075\uff9b\076\uff9b\100\uff9b\101\uff9b\102\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\001\002\000\052\003\103\015" +
    "\074\016\101\020\174\033\020\034\175\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\067\102\103\075\104\ufefa\107\106\110\071\001\002" +
    "\000\044\003\103\015\074\016\101\033\020\035\017\036" +
    "\015\040\016\041\022\044\014\045\112\046\070\055\116" +
    "\063\072\067\102\103\075\107\106\110\071\001\002\000" +
    "\012\060\123\061\121\062\122\102\172\001\002\000\074" +
    "\003\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\100\uff9a\101\uff9a\102\uff9a" +
    "\104\uff9a\105\uff9a\106\uff9a\001\002\000\004\064\206\001" +
    "\002\000\004\064\ufeff\001\002\000\004\064\uff00\001\002" +
    "\000\004\104\205\001\002\000\006\064\201\104\ufefb\001" +
    "\002\000\014\060\123\061\121\062\122\064\ufef8\104\ufef8" +
    "\001\002\000\046\003\103\015\074\016\101\033\020\035" +
    "\017\036\015\037\202\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\004\104\204\001\002\000\014\060\123" +
    "\061\121\062\122\064\ufef9\104\ufef9\001\002\000\062\003" +
    "\ufefd\047\ufefd\050\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd" +
    "\056\ufefd\057\ufefd\060\ufefd\061\ufefd\062\ufefd\064\ufefd\066" +
    "\ufefd\067\ufefd\070\ufefd\071\ufefd\072\ufefd\073\ufefd\100\ufefd" +
    "\102\ufefd\104\ufefd\105\ufefd\106\ufefd\001\002\000\062\003" +
    "\ufefe\047\ufefe\050\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe" +
    "\056\ufefe\057\ufefe\060\ufefe\061\ufefe\062\ufefe\064\ufefe\066" +
    "\ufefe\067\ufefe\070\ufefe\071\ufefe\072\ufefe\073\ufefe\100\ufefe" +
    "\102\ufefe\104\ufefe\105\ufefe\106\ufefe\001\002\000\044\003" +
    "\103\015\074\016\101\033\020\035\017\036\015\040\016" +
    "\041\022\044\014\045\112\046\070\055\116\063\072\067" +
    "\102\103\075\107\106\110\071\001\002\000\006\064\210" +
    "\104\211\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\062\003\ufefc\047\ufefc\050\ufefc\051\ufefc" +
    "\052\ufefc\053\ufefc\054\ufefc\056\ufefc\057\ufefc\060\ufefc\061" +
    "\ufefc\062\ufefc\064\ufefc\066\ufefc\067\ufefc\070\ufefc\071\ufefc" +
    "\072\ufefc\073\ufefc\100\ufefc\102\ufefc\104\ufefc\105\ufefc\106" +
    "\ufefc\001\002\000\074\003\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c\001\002" +
    "\000\012\060\123\061\121\062\122\104\214\001\002\000" +
    "\062\003\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b" +
    "\054\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\064" +
    "\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b" +
    "\100\uff6b\102\uff6b\104\uff6b\105\uff6b\106\uff6b\001\002\000" +
    "\062\003\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76" +
    "\054\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\064" +
    "\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76" +
    "\100\uff76\102\uff76\104\uff76\105\uff76\106\uff76\001\002\000" +
    "\012\060\123\061\121\062\122\106\uffc8\001\002\000\004" +
    "\106\uffce\001\002\000\006\064\032\101\170\001\002\000" +
    "\012\003\222\065\223\101\170\106\uff98\001\002\000\004" +
    "\106\uff97\001\002\000\004\077\225\001\002\000\004\106" +
    "\uffa4\001\002\000\046\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\077\225\103\075\107\106" +
    "\110\071\001\002\000\004\106\uff99\001\002\000\006\064" +
    "\237\100\240\001\002\000\006\064\234\100\235\001\002" +
    "\000\006\064\uff92\100\uff92\001\002\000\006\064\uff93\100" +
    "\uff93\001\002\000\014\060\123\061\121\062\122\064\uff90" +
    "\100\uff90\001\002\000\004\077\225\001\002\000\010\064" +
    "\uff95\100\uff95\106\uff95\001\002\000\006\064\uff94\100\uff94" +
    "\001\002\000\044\003\103\015\074\016\101\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\045\112\046\070" +
    "\055\116\063\072\067\102\103\075\107\106\110\071\001" +
    "\002\000\010\064\uff96\100\uff96\106\uff96\001\002\000\014" +
    "\060\123\061\121\062\122\064\uff91\100\uff91\001\002\000" +
    "\004\101\170\001\002\000\010\003\244\064\032\101\170" +
    "\001\002\000\010\003\222\065\223\106\uff98\001\002\000" +
    "\012\003\222\065\223\101\170\106\uff98\001\002\000\004" +
    "\106\uffad\001\002\000\004\106\uffa2\001\002\000\012\003" +
    "\222\065\223\101\170\106\uff98\001\002\000\004\106\uffa3" +
    "\001\002\000\016\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\001\002\000\012\003\065\064\032\065\066" +
    "\106\uffc9\001\002\000\004\106\uffcf\001\002\000\006\064" +
    "\032\101\170\001\002\000\012\003\222\065\223\101\170" +
    "\106\uff98\001\002\000\004\106\uffa5\001\002\000\044\003" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\033\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\043" +
    "\uffe8\044\uffe8\106\013\112\uffe8\001\002\000\020\017\u01ed" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\004\002\uffee\001\002\000\044\003\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\033" +
    "\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7" +
    "\106\013\112\uffe7\001\002\000\016\010\042\011\040\012" +
    "\054\013\046\014\053\104\uff04\001\002\000\004\103\u01dd" +
    "\001\002\000\004\103\277\001\002\000\014\010\042\011" +
    "\040\012\054\013\046\014\053\001\002\000\020\017\271" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\016\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\001\002\000\012\003\065\064\032\065\066\106" +
    "\uffc9\001\002\000\004\106\uffd4\001\002\000\006\064\032" +
    "\101\170\001\002\000\012\003\222\065\223\101\170\106" +
    "\uff98\001\002\000\004\106\uffac\001\002\000\004\104\300" +
    "\001\002\000\004\106\005\001\002\000\046\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\106\013\111\303\112\uffe5\001\002\000\042\003\uff0c" +
    "\006\uff0c\007\uff0c\010\uff0c\011\uff0c\012\uff0c\013\uff0c\014" +
    "\uff0c\033\uff0c\035\uff0c\036\uff0c\040\uff0c\041\uff0c\043\uff0c" +
    "\044\uff0c\112\uff0c\001\002\000\044\003\324\007\341\020" +
    "\317\022\331\024\316\026\311\027\333\030\314\031\306" +
    "\032\323\033\020\035\017\036\015\040\016\041\022\042" +
    "\312\044\014\001\002\000\004\106\005\001\002\000\046" +
    "\003\u01da\007\341\020\317\022\331\024\316\026\311\027" +
    "\333\030\314\031\306\032\323\033\020\035\017\036\015" +
    "\040\016\041\022\042\312\044\014\112\u01db\001\002\000" +
    "\004\106\uff2a\001\002\000\046\003\uff60\007\uff60\020\uff60" +
    "\022\uff60\024\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032" +
    "\uff60\033\uff60\035\uff60\036\uff60\040\uff60\041\uff60\042\uff60" +
    "\044\uff60\112\uff60\001\002\000\004\106\005\001\002\000" +
    "\006\003\u01b3\103\u01b4\001\002\000\006\003\u01ac\103\u01ad" +
    "\001\002\000\046\003\uff64\007\uff64\020\uff64\022\uff64\024" +
    "\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64" +
    "\035\uff64\036\uff64\040\uff64\041\uff64\042\uff64\044\uff64\112" +
    "\uff64\001\002\000\006\003\u0192\106\005\001\002\000\004" +
    "\106\005\001\002\000\004\106\uff2b\001\002\000\006\003" +
    "\u0182\103\u0183\001\002\000\046\003\uffe1\007\uffe1\020\uffe1" +
    "\022\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\044\uffe1\112\uffe1\001\002\000\046\003\uffdc\007\uffdc\020" +
    "\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\044\uffdc\112\uffdc\001\002\000\004\106\005\001\002" +
    "\000\044\003\103\015\074\016\101\033\020\035\017\036" +
    "\015\040\016\041\022\044\014\045\112\046\070\055\116" +
    "\063\072\067\102\103\075\107\106\110\071\001\002\000" +
    "\020\065\u0165\074\u0162\075\u0161\076\u0164\103\u0167\106\005" +
    "\112\u0163\001\002\000\050\003\uff5f\007\uff5f\020\uff5f\021" +
    "\u0142\022\uff5f\024\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f" +
    "\032\uff5f\033\uff5f\035\uff5f\036\uff5f\040\uff5f\041\uff5f\042" +
    "\uff5f\044\uff5f\112\uff5f\001\002\000\046\003\uff62\007\uff62" +
    "\020\uff62\022\uff62\024\uff62\026\uff62\027\uff62\030\uff62\031" +
    "\uff62\032\uff62\033\uff62\035\uff62\036\uff62\040\uff62\041\uff62" +
    "\042\uff62\044\uff62\112\uff62\001\002\000\004\106\005\001" +
    "\002\000\004\106\005\001\002\000\006\003\u011b\103\u011c" +
    "\001\002\000\020\003\u0115\065\u0113\074\u0117\075\u0116\076" +
    "\u0114\101\170\103\167\001\002\000\006\003\u0104\103\u0105" +
    "\001\002\000\046\003\uff61\007\uff61\020\uff61\022\uff61\024" +
    "\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61" +
    "\035\uff61\036\uff61\040\uff61\041\uff61\042\uff61\044\uff61\112" +
    "\uff61\001\002\000\046\003\uff63\007\uff63\020\uff63\022\uff63" +
    "\024\uff63\026\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033" +
    "\uff63\035\uff63\036\uff63\040\uff63\041\uff63\042\uff63\044\uff63" +
    "\112\uff63\001\002\000\004\106\005\001\002\000\014\003" +
    "\375\065\377\074\374\075\373\076\376\001\002\000\004" +
    "\106\005\001\002\000\016\003\342\010\042\011\040\012" +
    "\054\013\046\014\053\001\002\000\020\017\364\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\001\002\000" +
    "\022\003\345\017\344\033\020\035\017\036\015\040\016" +
    "\041\022\044\014\001\002\000\020\003\354\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\001\002\000\024" +
    "\003\065\033\020\035\017\036\015\040\016\041\022\044" +
    "\014\065\066\106\uffc9\001\002\000\012\003\065\064\032" +
    "\065\066\106\uffc9\001\002\000\004\106\uffcd\001\002\000" +
    "\004\106\uffcb\001\002\000\006\064\032\101\170\001\002" +
    "\000\012\003\222\065\223\101\170\106\uff98\001\002\000" +
    "\004\106\uff9f\001\002\000\004\101\170\001\002\000\010" +
    "\003\356\064\032\101\170\001\002\000\010\003\222\065" +
    "\223\106\uff98\001\002\000\012\003\222\065\223\101\170" +
    "\106\uff98\001\002\000\004\106\uffa1\001\002\000\004\106" +
    "\uff9d\001\002\000\012\003\222\065\223\101\170\106\uff98" +
    "\001\002\000\004\106\uff9e\001\002\000\016\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\001\002\000\012" +
    "\003\065\064\032\065\066\106\uffc9\001\002\000\004\106" +
    "\uffcc\001\002\000\006\064\032\101\170\001\002\000\012" +
    "\003\222\065\223\101\170\106\uff98\001\002\000\004\106" +
    "\uffa0\001\002\000\050\003\uffdb\007\uffdb\020\uffdb\022\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb" +
    "\106\013\112\uffdb\001\002\000\010\104\uffb9\105\uffb9\106" +
    "\uffb9\001\002\000\044\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\103\075\107\106\110\071" +
    "\001\002\000\052\003\103\015\074\016\101\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\045\112\046\070" +
    "\055\116\063\072\067\102\103\075\104\uffb0\105\uffb0\106" +
    "\uffb0\107\106\110\071\001\002\000\010\104\uffb8\105\uffb8" +
    "\106\uffb8\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\016\060\123\061\121\062\122\104\uffbb" +
    "\105\uffbb\106\uffbb\001\002\000\016\060\123\061\121\062" +
    "\122\104\uffb1\105\uffb1\106\uffb1\001\002\000\016\060\123" +
    "\061\121\062\122\104\uffba\105\uffba\106\uffba\001\002\000" +
    "\050\003\uffd9\007\uffd9\020\uffd9\022\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\106\013\112\uffd9" +
    "\001\002\000\044\003\103\015\074\016\101\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\045\112\046\070" +
    "\055\116\063\072\067\102\103\075\107\106\110\071\001" +
    "\002\000\044\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\063\072\067\102\103\075\107\106\110\071\001\002" +
    "\000\014\003\u0108\060\123\061\121\062\122\104\u0107\001" +
    "\002\000\006\003\u010b\106\005\001\002\000\004\106\005" +
    "\001\002\000\052\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106" +
    "\013\111\303\112\uffe5\001\002\000\046\003\uff42\007\uff42" +
    "\020\uff42\022\uff42\024\uff42\026\uff42\027\uff42\030\uff42\031" +
    "\uff42\032\uff42\033\uff42\035\uff42\036\uff42\040\uff42\041\uff42" +
    "\042\uff42\044\uff42\112\uff42\001\002\000\050\003\uffe5\007" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\044\uffe5\111\303\112\uffe5\001\002\000\052" +
    "\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013\111\303\112" +
    "\uffe5\001\002\000\046\003\uff44\007\uff44\020\uff44\022\uff44" +
    "\024\uff44\026\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033" +
    "\uff44\035\uff44\036\uff44\040\uff44\041\uff44\042\uff44\044\uff44" +
    "\112\uff44\001\002\000\046\003\uff41\007\uff41\020\uff41\022" +
    "\uff41\024\uff41\026\uff41\027\uff41\030\uff41\031\uff41\032\uff41" +
    "\033\uff41\035\uff41\036\uff41\040\uff41\041\uff41\042\uff41\044" +
    "\uff41\112\uff41\001\002\000\012\060\123\061\121\062\122" +
    "\104\u0110\001\002\000\004\106\005\001\002\000\052\003" +
    "\uffe5\007\uffe5\020\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013\111\303\112\uffe5" +
    "\001\002\000\046\003\uff43\007\uff43\020\uff43\022\uff43\024" +
    "\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032\uff43\033\uff43" +
    "\035\uff43\036\uff43\040\uff43\041\uff43\042\uff43\044\uff43\112" +
    "\uff43\001\002\000\044\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\103\075\107\106\110\071" +
    "\001\002\000\010\104\uffbc\105\uffbc\106\uffbc\001\002\000" +
    "\052\003\103\015\074\016\101\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\067\102\103\075\104\uffb2\105\uffb2\106\uffb2\107\106" +
    "\110\071\001\002\000\010\104\uffbd\105\uffbd\106\uffbd\001" +
    "\002\000\044\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\063\072\067\102\103\075\107\106\110\071\001\002" +
    "\000\016\060\123\061\121\062\122\104\uffbe\105\uffbe\106" +
    "\uffbe\001\002\000\016\060\123\061\121\062\122\104\uffb3" +
    "\105\uffb3\106\uffb3\001\002\000\016\060\123\061\121\062" +
    "\122\104\uffbf\105\uffbf\106\uffbf\001\002\000\044\003\103" +
    "\015\074\016\101\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\045\112\046\070\055\116\063\072\067\102" +
    "\103\075\107\106\110\071\001\002\000\044\003\103\015" +
    "\074\016\101\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\045\112\046\070\055\116\063\072\067\102\103" +
    "\075\107\106\110\071\001\002\000\014\003\u011f\060\123" +
    "\061\121\062\122\104\u011e\001\002\000\006\003\u0138\106" +
    "\005\001\002\000\004\106\005\001\002\000\052\003\uff35" +
    "\007\uff35\020\uff35\022\uff35\024\uff35\026\uff35\027\uff35\030" +
    "\uff35\031\uff35\032\uff35\033\uff35\035\uff35\036\uff35\040\uff35" +
    "\041\uff35\042\uff35\044\uff35\106\013\111\u0122\112\uff35\001" +
    "\002\000\046\003\uff38\007\uff38\020\uff38\022\uff38\024\uff38" +
    "\026\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38\035" +
    "\uff38\036\uff38\040\uff38\041\uff38\042\uff38\044\uff38\112\uff38" +
    "\001\002\000\012\003\uff33\023\uff33\025\uff33\112\uff33\001" +
    "\002\000\012\003\u0125\023\u0128\025\u0124\112\uff2e\001\002" +
    "\000\006\003\u0134\106\005\001\002\000\046\003\103\015" +
    "\074\016\101\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\045\112\046\070\055\116\063\072\067\102\103" +
    "\075\106\005\107\106\110\071\001\002\000\012\003\uff34" +
    "\023\uff34\025\uff34\112\uff34\001\002\000\004\112\u012e\001" +
    "\002\000\044\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\063\072\067\102\103\075\107\106\110\071\001\002" +
    "\000\014\003\u012a\060\123\061\121\062\122\106\005\001" +
    "\002\000\014\003\uffe5\023\uffe5\025\uffe5\111\303\112\uffe5" +
    "\001\002\000\016\003\uffe5\023\uffe5\025\uffe5\106\013\111" +
    "\303\112\uffe5\001\002\000\012\003\uff32\023\uff32\025\uff32" +
    "\112\uff32\001\002\000\012\003\uff30\023\uff30\025\uff30\112" +
    "\uff30\001\002\000\046\003\uff36\007\uff36\020\uff36\022\uff36" +
    "\024\uff36\026\uff36\027\uff36\030\uff36\031\uff36\032\uff36\033" +
    "\uff36\035\uff36\036\uff36\040\uff36\041\uff36\042\uff36\044\uff36" +
    "\112\uff36\001\002\000\010\106\013\111\303\112\uffe5\001" +
    "\002\000\012\060\123\061\121\062\122\106\005\001\002" +
    "\000\016\003\uffe5\023\uffe5\025\uffe5\106\013\111\303\112" +
    "\uffe5\001\002\000\012\003\uff31\023\uff31\025\uff31\112\uff31" +
    "\001\002\000\004\112\uff2d\001\002\000\006\111\303\112" +
    "\uffe5\001\002\000\010\106\013\111\303\112\uffe5\001\002" +
    "\000\004\112\uff2f\001\002\000\004\112\uff2c\001\002\000" +
    "\050\003\uff35\007\uff35\020\uff35\022\uff35\024\uff35\026\uff35" +
    "\027\uff35\030\uff35\031\uff35\032\uff35\033\uff35\035\uff35\036" +
    "\uff35\040\uff35\041\uff35\042\uff35\044\uff35\111\u0122\112\uff35" +
    "\001\002\000\052\003\uff35\007\uff35\020\uff35\022\uff35\024" +
    "\uff35\026\uff35\027\uff35\030\uff35\031\uff35\032\uff35\033\uff35" +
    "\035\uff35\036\uff35\040\uff35\041\uff35\042\uff35\044\uff35\106" +
    "\013\111\u0122\112\uff35\001\002\000\046\003\uff3a\007\uff3a" +
    "\020\uff3a\022\uff3a\024\uff3a\026\uff3a\027\uff3a\030\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\035\uff3a\036\uff3a\040\uff3a\041\uff3a" +
    "\042\uff3a\044\uff3a\112\uff3a\001\002\000\046\003\uff37\007" +
    "\uff37\020\uff37\022\uff37\024\uff37\026\uff37\027\uff37\030\uff37" +
    "\031\uff37\032\uff37\033\uff37\035\uff37\036\uff37\040\uff37\041" +
    "\uff37\042\uff37\044\uff37\112\uff37\001\002\000\012\060\123" +
    "\061\121\062\122\104\u013d\001\002\000\004\106\005\001" +
    "\002\000\052\003\uff35\007\uff35\020\uff35\022\uff35\024\uff35" +
    "\026\uff35\027\uff35\030\uff35\031\uff35\032\uff35\033\uff35\035" +
    "\uff35\036\uff35\040\uff35\041\uff35\042\uff35\044\uff35\106\013" +
    "\111\u0122\112\uff35\001\002\000\046\003\uff39\007\uff39\020" +
    "\uff39\022\uff39\024\uff39\026\uff39\027\uff39\030\uff39\031\uff39" +
    "\032\uff39\033\uff39\035\uff39\036\uff39\040\uff39\041\uff39\042" +
    "\uff39\044\uff39\112\uff39\001\002\000\050\003\uffda\007\uffda" +
    "\020\uffda\022\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\035\uffda\036\uffda\040\uffda\041\uffda" +
    "\042\uffda\044\uffda\106\013\112\uffda\001\002\000\050\003" +
    "\uffd8\007\uffd8\020\uffd8\022\uffd8\024\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\106\013\112\uffd8\001\002" +
    "\000\010\003\u0148\020\u014a\106\005\001\002\000\046\003" +
    "\uff5e\007\uff5e\020\uff5e\022\uff5e\024\uff5e\026\uff5e\027\uff5e" +
    "\030\uff5e\031\uff5e\032\uff5e\033\uff5e\035\uff5e\036\uff5e\040" +
    "\uff5e\041\uff5e\042\uff5e\044\uff5e\112\uff5e\001\002\000\050" +
    "\003\uff53\007\uff53\020\uff53\021\uff53\022\uff53\024\uff53\026" +
    "\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53\035\uff53" +
    "\036\uff53\040\uff53\041\uff53\042\uff53\044\uff53\112\uff53\001" +
    "\002\000\050\003\uff5d\007\uff5d\020\uff5d\021\u0142\022\uff5d" +
    "\024\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\033" +
    "\uff5d\035\uff5d\036\uff5d\040\uff5d\041\uff5d\042\uff5d\044\uff5d" +
    "\112\uff5d\001\002\000\046\003\uff5c\007\uff5c\020\uff5c\022" +
    "\uff5c\024\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\033\uff5c\035\uff5c\036\uff5c\040\uff5c\041\uff5c\042\uff5c\044" +
    "\uff5c\112\uff5c\001\002\000\050\003\uff54\007\uff54\020\uff54" +
    "\021\uff54\022\uff54\024\uff54\026\uff54\027\uff54\030\uff54\031" +
    "\uff54\032\uff54\033\uff54\035\uff54\036\uff54\040\uff54\041\uff54" +
    "\042\uff54\044\uff54\112\uff54\001\002\000\052\003\uffe5\007" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\044\uffe5\103\u015c\111\303\112\uffe5\001\002" +
    "\000\052\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013\111" +
    "\303\112\uffe5\001\002\000\006\003\u014b\103\u014c\001\002" +
    "\000\044\003\103\015\074\016\101\033\020\035\017\036" +
    "\015\040\016\041\022\044\014\045\112\046\070\055\116" +
    "\063\072\067\102\103\075\107\106\110\071\001\002\000" +
    "\044\003\103\015\074\016\101\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\067\102\103\075\107\106\110\071\001\002\000\014" +
    "\003\u014f\060\123\061\121\062\122\104\u014e\001\002\000" +
    "\006\003\u0152\106\005\001\002\000\004\106\005\001\002" +
    "\000\054\003\uffe5\007\uffe5\020\uffe5\021\uffe5\022\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106" +
    "\013\111\303\112\uffe5\001\002\000\050\003\uff4f\007\uff4f" +
    "\020\uff4f\021\uff4f\022\uff4f\024\uff4f\026\uff4f\027\uff4f\030" +
    "\uff4f\031\uff4f\032\uff4f\033\uff4f\035\uff4f\036\uff4f\040\uff4f" +
    "\041\uff4f\042\uff4f\044\uff4f\112\uff4f\001\002\000\052\003" +
    "\uffe5\007\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\111\303\112\uffe5" +
    "\001\002\000\054\003\uffe5\007\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044" +
    "\uffe5\106\013\111\303\112\uffe5\001\002\000\050\003\uff52" +
    "\007\uff52\020\uff52\021\uff52\022\uff52\024\uff52\026\uff52\027" +
    "\uff52\030\uff52\031\uff52\032\uff52\033\uff52\035\uff52\036\uff52" +
    "\040\uff52\041\uff52\042\uff52\044\uff52\112\uff52\001\002\000" +
    "\050\003\uff4e\007\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e" +
    "\026\uff4e\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\035" +
    "\uff4e\036\uff4e\040\uff4e\041\uff4e\042\uff4e\044\uff4e\112\uff4e" +
    "\001\002\000\012\060\123\061\121\062\122\104\u0157\001" +
    "\002\000\004\106\005\001\002\000\054\003\uffe5\007\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\044\uffe5\106\013\111\303\112\uffe5\001" +
    "\002\000\050\003\uff50\007\uff50\020\uff50\021\uff50\022\uff50" +
    "\024\uff50\026\uff50\027\uff50\030\uff50\031\uff50\032\uff50\033" +
    "\uff50\035\uff50\036\uff50\040\uff50\041\uff50\042\uff50\044\uff50" +
    "\112\uff50\001\002\000\046\003\uff56\007\uff56\020\uff56\022" +
    "\uff56\024\uff56\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\033\uff56\035\uff56\036\uff56\040\uff56\041\uff56\042\uff56\044" +
    "\uff56\112\uff56\001\002\000\046\003\uff55\007\uff55\020\uff55" +
    "\022\uff55\024\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\033\uff55\035\uff55\036\uff55\040\uff55\041\uff55\042\uff55" +
    "\044\uff55\112\uff55\001\002\000\044\003\103\015\074\016" +
    "\101\033\020\035\017\036\015\040\016\041\022\044\014" +
    "\045\112\046\070\055\116\063\072\067\102\103\075\107" +
    "\106\110\071\001\002\000\012\060\123\061\121\062\122" +
    "\104\u015e\001\002\000\004\106\005\001\002\000\054\003" +
    "\uffe5\007\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013\111\303" +
    "\112\uffe5\001\002\000\050\003\uff51\007\uff51\020\uff51\021" +
    "\uff51\022\uff51\024\uff51\026\uff51\027\uff51\030\uff51\031\uff51" +
    "\032\uff51\033\uff51\035\uff51\036\uff51\040\uff51\041\uff51\042" +
    "\uff51\044\uff51\112\uff51\001\002\000\010\104\uffb5\105\uffb5" +
    "\106\uffb5\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\072\003\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\112\uffe4\001\002\000\010" +
    "\104\uffb4\105\uffb4\106\uffb4\001\002\000\044\003\103\015" +
    "\074\016\101\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\045\112\046\070\055\116\063\072\067\102\103" +
    "\075\107\106\110\071\001\002\000\050\003\uffd7\007\uffd7" +
    "\020\uffd7\022\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\044\uffd7\106\013\112\uffd7\001\002\000\046\003" +
    "\u016d\010\u0168\015\074\016\101\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\067\102\103\075\107\106\110\071\001\002\000\016" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\064\003\u0115\047\uff6d\050\uff6d\051\uff6d\052\uff6d" +
    "\053\uff6d\054\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062" +
    "\uff6d\065\u0113\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d" +
    "\073\uff6d\074\u0117\075\u0116\076\u0114\101\170\103\167\104" +
    "\uff6d\001\002\000\004\105\u0172\001\002\000\004\105\uff45" +
    "\001\002\000\060\003\375\047\uff6c\050\uff6c\051\uff6c\052" +
    "\uff6c\053\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c" +
    "\062\uff6c\065\377\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072" +
    "\uff6c\073\uff6c\074\374\075\373\076\376\104\uff6c\001\002" +
    "\000\056\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054" +
    "\uff69\056\uff69\057\uff69\060\uff69\061\uff69\062\uff69\065\u0165" +
    "\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074" +
    "\u0162\075\u0161\076\u0164\104\uff69\001\002\000\012\060\123" +
    "\061\121\062\122\104\u016f\001\002\000\004\106\005\001" +
    "\002\000\054\003\uffe5\007\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5" +
    "\106\013\111\303\112\uffe5\001\002\000\050\003\uff5a\007" +
    "\uff5a\020\uff5a\021\uff5a\022\uff5a\024\uff5a\026\uff5a\027\uff5a" +
    "\030\uff5a\031\uff5a\032\uff5a\033\uff5a\035\uff5a\036\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\044\uff5a\112\uff5a\001\002\000\044" +
    "\003\103\015\074\016\101\033\020\035\017\036\015\040" +
    "\016\041\022\044\014\045\112\046\070\055\116\063\072" +
    "\067\102\103\075\107\106\110\071\001\002\000\012\060" +
    "\123\061\121\062\122\105\u0174\001\002\000\020\003\u0177" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\016\003\u0115\065\u0113\074\u0117\075\u0116\076\u0114" +
    "\101\170\001\002\000\004\104\u0178\001\002\000\012\065" +
    "\u0165\074\u0162\075\u0161\076\u0164\001\002\000\004\106\005" +
    "\001\002\000\052\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106" +
    "\013\111\303\112\uffe5\001\002\000\046\003\uff4c\007\uff4c" +
    "\020\uff4c\022\uff4c\024\uff4c\026\uff4c\027\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\033\uff4c\035\uff4c\036\uff4c\040\uff4c\041\uff4c" +
    "\042\uff4c\044\uff4c\112\uff4c\001\002\000\004\065\u017c\001" +
    "\002\000\044\003\103\015\074\016\101\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\045\112\046\070\055" +
    "\116\063\072\067\102\103\075\107\106\110\071\001\002" +
    "\000\012\060\123\061\121\062\122\105\uff46\001\002\000" +
    "\016\060\123\061\121\062\122\104\uffb7\105\uffb7\106\uffb7" +
    "\001\002\000\016\060\123\061\121\062\122\104\uffb6\105" +
    "\uffb6\106\uffb6\001\002\000\012\060\123\061\121\062\122" +
    "\106\uff29\001\002\000\050\003\uffde\007\uffde\020\uffde\022" +
    "\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\035\uffde\036\uffde\040\uffde\041\uffde\042\uffde\044" +
    "\uffde\106\013\112\uffde\001\002\000\044\003\103\015\074" +
    "\016\101\033\020\035\017\036\015\040\016\041\022\044" +
    "\014\045\112\046\070\055\116\063\072\067\102\103\075" +
    "\107\106\110\071\001\002\000\044\003\103\015\074\016" +
    "\101\033\020\035\017\036\015\040\016\041\022\044\014" +
    "\045\112\046\070\055\116\063\072\067\102\103\075\107" +
    "\106\110\071\001\002\000\014\003\u0186\060\123\061\121" +
    "\062\122\104\u0185\001\002\000\006\003\u0189\106\005\001" +
    "\002\000\004\106\005\001\002\000\054\003\uffe5\007\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\044\uffe5\106\013\111\303\112\uffe5\001" +
    "\002\000\050\003\uff58\007\uff58\020\uff58\021\uff58\022\uff58" +
    "\024\uff58\026\uff58\027\uff58\030\uff58\031\uff58\032\uff58\033" +
    "\uff58\035\uff58\036\uff58\040\uff58\041\uff58\042\uff58\044\uff58" +
    "\112\uff58\001\002\000\052\003\uffe5\007\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\044\uffe5\111\303\112\uffe5\001\002\000\054\003\uffe5" +
    "\007\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013\111\303\112" +
    "\uffe5\001\002\000\050\003\uff5b\007\uff5b\020\uff5b\021\uff5b" +
    "\022\uff5b\024\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032" +
    "\uff5b\033\uff5b\035\uff5b\036\uff5b\040\uff5b\041\uff5b\042\uff5b" +
    "\044\uff5b\112\uff5b\001\002\000\050\003\uff57\007\uff57\020" +
    "\uff57\021\uff57\022\uff57\024\uff57\026\uff57\027\uff57\030\uff57" +
    "\031\uff57\032\uff57\033\uff57\035\uff57\036\uff57\040\uff57\041" +
    "\uff57\042\uff57\044\uff57\112\uff57\001\002\000\012\060\123" +
    "\061\121\062\122\104\u018e\001\002\000\004\106\005\001" +
    "\002\000\054\003\uffe5\007\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5" +
    "\106\013\111\303\112\uffe5\001\002\000\050\003\uff59\007" +
    "\uff59\020\uff59\021\uff59\022\uff59\024\uff59\026\uff59\027\uff59" +
    "\030\uff59\031\uff59\032\uff59\033\uff59\035\uff59\036\uff59\040" +
    "\uff59\041\uff59\042\uff59\044\uff59\112\uff59\001\002\000\050" +
    "\003\uffdf\007\uffdf\020\uffdf\022\uffdf\024\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\044\uffdf\106\013\112\uffdf\001" +
    "\002\000\006\027\uffe5\111\303\001\002\000\012\003\uffe5" +
    "\027\uffe5\106\013\111\303\001\002\000\006\003\u0195\027" +
    "\u0196\001\002\000\004\103\u01a2\001\002\000\006\003\u0197" +
    "\103\u0198\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\044\003\103\015\074\016\101\033\020" +
    "\035\017\036\015\040\016\041\022\044\014\045\112\046" +
    "\070\055\116\063\072\067\102\103\075\107\106\110\071" +
    "\001\002\000\014\003\u019b\060\123\061\121\062\122\104" +
    "\u019a\001\002\000\006\003\u019d\106\005\001\002\000\004" +
    "\106\005\001\002\000\050\003\uff3c\007\uff3c\020\uff3c\022" +
    "\uff3c\024\uff3c\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c" +
    "\033\uff3c\035\uff3c\036\uff3c\040\uff3c\041\uff3c\042\uff3c\044" +
    "\uff3c\106\013\112\uff3c\001\002\000\046\003\uff3b\007\uff3b" +
    "\020\uff3b\022\uff3b\024\uff3b\026\uff3b\027\uff3b\030\uff3b\031" +
    "\uff3b\032\uff3b\033\uff3b\035\uff3b\036\uff3b\040\uff3b\041\uff3b" +
    "\042\uff3b\044\uff3b\112\uff3b\001\002\000\050\003\uff40\007" +
    "\uff40\020\uff40\022\uff40\024\uff40\026\uff40\027\uff40\030\uff40" +
    "\031\uff40\032\uff40\033\uff40\035\uff40\036\uff40\040\uff40\041" +
    "\uff40\042\uff40\044\uff40\106\013\112\uff40\001\002\000\012" +
    "\060\123\061\121\062\122\104\u01a0\001\002\000\004\106" +
    "\005\001\002\000\050\003\uff3d\007\uff3d\020\uff3d\022\uff3d" +
    "\024\uff3d\026\uff3d\027\uff3d\030\uff3d\031\uff3d\032\uff3d\033" +
    "\uff3d\035\uff3d\036\uff3d\040\uff3d\041\uff3d\042\uff3d\044\uff3d" +
    "\106\013\112\uff3d\001\002\000\044\003\103\015\074\016" +
    "\101\033\020\035\017\036\015\040\016\041\022\044\014" +
    "\045\112\046\070\055\116\063\072\067\102\103\075\107" +
    "\106\110\071\001\002\000\012\060\123\061\121\062\122" +
    "\104\u01a4\001\002\000\004\106\005\001\002\000\050\003" +
    "\uff3e\007\uff3e\020\uff3e\022\uff3e\024\uff3e\026\uff3e\027\uff3e" +
    "\030\uff3e\031\uff3e\032\uff3e\033\uff3e\035\uff3e\036\uff3e\040" +
    "\uff3e\041\uff3e\042\uff3e\044\uff3e\106\013\112\uff3e\001\002" +
    "\000\004\027\u01a7\001\002\000\004\103\u01a8\001\002\000" +
    "\044\003\103\015\074\016\101\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\045\112\046\070\055\116\063" +
    "\072\067\102\103\075\107\106\110\071\001\002\000\012" +
    "\060\123\061\121\062\122\104\u01aa\001\002\000\004\106" +
    "\005\001\002\000\050\003\uff3f\007\uff3f\020\uff3f\022\uff3f" +
    "\024\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033" +
    "\uff3f\035\uff3f\036\uff3f\040\uff3f\041\uff3f\042\uff3f\044\uff3f" +
    "\106\013\112\uff3f\001\002\000\044\003\103\015\074\016" +
    "\101\033\020\035\017\036\015\040\016\041\022\044\014" +
    "\045\112\046\070\055\116\063\072\067\102\103\075\107" +
    "\106\110\071\001\002\000\044\003\103\015\074\016\101" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\045" +
    "\112\046\070\055\116\063\072\067\102\103\075\107\106" +
    "\110\071\001\002\000\014\003\u01b0\060\123\061\121\062" +
    "\122\104\u01af\001\002\000\004\106\uff08\001\002\000\004" +
    "\106\uff06\001\002\000\012\060\123\061\121\062\122\104" +
    "\u01b2\001\002\000\004\106\uff07\001\002\000\022\003\u0177" +
    "\010\u0168\033\020\035\017\036\015\040\016\041\022\044" +
    "\014\001\002\000\022\003\u01b5\010\u0168\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\001\002\000\014\065" +
    "\u0165\074\u0162\075\u0161\076\u0164\105\u01c9\001\002\000\004" +
    "\105\u01b7\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\014\003\u01b9\060\123\061\121\062\122" +
    "\105\u01ba\001\002\000\020\003\u0177\033\020\035\017\036" +
    "\015\040\016\041\022\044\014\001\002\000\020\003\u01bc" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\004\104\u01c0\001\002\000\014\065\u0165\074\u0162" +
    "\075\u0161\076\u0164\104\u01bd\001\002\000\004\106\005\001" +
    "\002\000\052\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013" +
    "\111\303\112\uffe5\001\002\000\046\003\uff48\007\uff48\020" +
    "\uff48\022\uff48\024\uff48\026\uff48\027\uff48\030\uff48\031\uff48" +
    "\032\uff48\033\uff48\035\uff48\036\uff48\040\uff48\041\uff48\042" +
    "\uff48\044\uff48\112\uff48\001\002\000\006\003\u01c1\106\005" +
    "\001\002\000\050\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\111" +
    "\303\112\uffe5\001\002\000\052\003\uffe5\007\uffe5\020\uffe5" +
    "\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\044\uffe5\106\013\111\303\112\uffe5\001\002\000\046\003" +
    "\uff4d\007\uff4d\020\uff4d\022\uff4d\024\uff4d\026\uff4d\027\uff4d" +
    "\030\uff4d\031\uff4d\032\uff4d\033\uff4d\035\uff4d\036\uff4d\040" +
    "\uff4d\041\uff4d\042\uff4d\044\uff4d\112\uff4d\001\002\000\046" +
    "\003\uff47\007\uff47\020\uff47\022\uff47\024\uff47\026\uff47\027" +
    "\uff47\030\uff47\031\uff47\032\uff47\033\uff47\035\uff47\036\uff47" +
    "\040\uff47\041\uff47\042\uff47\044\uff47\112\uff47\001\002\000" +
    "\004\104\u01c6\001\002\000\004\106\005\001\002\000\052" +
    "\003\uffe5\007\uffe5\020\uffe5\022\uffe5\024\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\044\uffe5\106\013\111\303\112" +
    "\uffe5\001\002\000\046\003\uff49\007\uff49\020\uff49\022\uff49" +
    "\024\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49\033" +
    "\uff49\035\uff49\036\uff49\040\uff49\041\uff49\042\uff49\044\uff49" +
    "\112\uff49\001\002\000\044\003\103\015\074\016\101\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\045\112" +
    "\046\070\055\116\063\072\067\102\103\075\107\106\110" +
    "\071\001\002\000\012\060\123\061\121\062\122\105\u01cb" +
    "\001\002\000\020\003\u0177\033\020\035\017\036\015\040" +
    "\016\041\022\044\014\001\002\000\004\104\u01cd\001\002" +
    "\000\004\106\005\001\002\000\052\003\uffe5\007\uffe5\020" +
    "\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002\000\046" +
    "\003\uff4a\007\uff4a\020\uff4a\022\uff4a\024\uff4a\026\uff4a\027" +
    "\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\035\uff4a\036\uff4a" +
    "\040\uff4a\041\uff4a\042\uff4a\044\uff4a\112\uff4a\001\002\000" +
    "\004\105\u01d1\001\002\000\044\003\103\015\074\016\101" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\045" +
    "\112\046\070\055\116\063\072\067\102\103\075\107\106" +
    "\110\071\001\002\000\012\060\123\061\121\062\122\105" +
    "\u01d3\001\002\000\020\003\u0177\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\001\002\000\004\104\u01d5\001" +
    "\002\000\004\106\005\001\002\000\052\003\uffe5\007\uffe5" +
    "\020\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002\000" +
    "\046\003\uff4b\007\uff4b\020\uff4b\022\uff4b\024\uff4b\026\uff4b" +
    "\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\035\uff4b\036" +
    "\uff4b\040\uff4b\041\uff4b\042\uff4b\044\uff4b\112\uff4b\001\002" +
    "\000\050\003\uffdd\007\uffdd\020\uffdd\022\uffdd\024\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd" +
    "\036\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\106\013\112" +
    "\uffdd\001\002\000\046\003\uffe2\007\uffe2\020\uffe2\022\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\112\uffe2\001\002\000\106\003\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\065\u0165\074\u0162\075" +
    "\u0161\076\u0164\103\u0167\106\005\112\uffe3\001\002\000\072" +
    "\003\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\112\uffe6\001\002\000\050\003\uffe0\007\uffe0\020" +
    "\uffe0\022\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\035\uffe0\036\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\044\uffe0\106\013\112\uffe0\001\002\000\016\010\042" +
    "\011\040\012\054\013\046\014\053\104\uff04\001\002\000" +
    "\004\104\u01e5\001\002\000\006\064\uff02\104\uff02\001\002" +
    "\000\006\064\u01e3\104\uff05\001\002\000\016\033\020\035" +
    "\017\036\015\040\016\041\022\044\014\001\002\000\006" +
    "\064\uff01\104\uff01\001\002\000\014\010\042\011\040\012" +
    "\054\013\046\014\053\001\002\000\006\064\uff03\104\uff03" +
    "\001\002\000\004\106\005\001\002\000\046\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\106\013\111\303\112\uffe5\001\002\000\042\003\uff20" +
    "\006\uff20\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014" +
    "\uff20\033\uff20\035\uff20\036\uff20\040\uff20\041\uff20\043\uff20" +
    "\044\uff20\112\uff20\001\002\000\004\104\u01e9\001\002\000" +
    "\004\106\005\001\002\000\046\003\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013" +
    "\111\303\112\uffe5\001\002\000\042\003\uff24\006\uff24\007" +
    "\uff24\010\uff24\011\uff24\012\uff24\013\uff24\014\uff24\033\uff24" +
    "\035\uff24\036\uff24\040\uff24\041\uff24\043\uff24\044\uff24\112" +
    "\uff24\001\002\000\014\003\uffc5\064\uffc5\065\uffc5\103\u01f3" +
    "\106\uffc5\001\002\000\016\033\020\035\017\036\015\040" +
    "\016\041\022\044\014\001\002\000\012\003\065\064\032" +
    "\065\066\106\uffc9\001\002\000\004\106\uffd0\001\002\000" +
    "\006\064\032\101\170\001\002\000\012\003\222\065\223" +
    "\101\170\106\uff98\001\002\000\004\106\uffa6\001\002\000" +
    "\016\010\042\011\040\012\054\013\046\014\053\104\uff04" +
    "\001\002\000\004\104\u01f5\001\002\000\004\106\005\001" +
    "\002\000\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013\111\303\112\uffe5" +
    "\001\002\000\042\003\uff1b\006\uff1b\007\uff1b\010\uff1b\011" +
    "\uff1b\012\uff1b\013\uff1b\014\uff1b\033\uff1b\035\uff1b\036\uff1b" +
    "\040\uff1b\041\uff1b\043\uff1b\044\uff1b\112\uff1b\001\002\000" +
    "\016\010\042\011\040\012\054\013\046\014\053\104\uff04" +
    "\001\002\000\020\003\u01fb\010\042\011\040\012\054\013" +
    "\046\014\053\104\uff04\001\002\000\004\104\u01ff\001\002" +
    "\000\004\104\u01fc\001\002\000\004\106\005\001\002\000" +
    "\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002" +
    "\000\042\003\uff22\006\uff22\007\uff22\010\uff22\011\uff22\012" +
    "\uff22\013\uff22\014\uff22\033\uff22\035\uff22\036\uff22\040\uff22" +
    "\041\uff22\043\uff22\044\uff22\112\uff22\001\002\000\006\003" +
    "\u0200\106\005\001\002\000\044\003\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\111\303" +
    "\112\uffe5\001\002\000\046\003\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013\111" +
    "\303\112\uffe5\001\002\000\042\003\uff28\006\uff28\007\uff28" +
    "\010\uff28\011\uff28\012\uff28\013\uff28\014\uff28\033\uff28\035" +
    "\uff28\036\uff28\040\uff28\041\uff28\043\uff28\044\uff28\112\uff28" +
    "\001\002\000\042\003\uff21\006\uff21\007\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\014\uff21\033\uff21\035\uff21\036\uff21" +
    "\040\uff21\041\uff21\043\uff21\044\uff21\112\uff21\001\002\000" +
    "\004\104\u0205\001\002\000\004\106\005\001\002\000\046" +
    "\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002\000" +
    "\042\003\uff23\006\uff23\007\uff23\010\uff23\011\uff23\012\uff23" +
    "\013\uff23\014\uff23\033\uff23\035\uff23\036\uff23\040\uff23\041" +
    "\uff23\043\uff23\044\uff23\112\uff23\001\002\000\004\104\u0212" +
    "\001\002\000\006\003\u020b\104\u020a\001\002\000\006\003" +
    "\u020e\106\005\001\002\000\004\106\005\001\002\000\046" +
    "\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002\000" +
    "\042\003\uff0e\006\uff0e\007\uff0e\010\uff0e\011\uff0e\012\uff0e" +
    "\013\uff0e\014\uff0e\033\uff0e\035\uff0e\036\uff0e\040\uff0e\041" +
    "\uff0e\043\uff0e\044\uff0e\112\uff0e\001\002\000\044\003\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5" +
    "\044\uffe5\111\303\112\uffe5\001\002\000\046\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\106\013\111\303\112\uffe5\001\002\000\042\003\uff11" +
    "\006\uff11\007\uff11\010\uff11\011\uff11\012\uff11\013\uff11\014" +
    "\uff11\033\uff11\035\uff11\036\uff11\040\uff11\041\uff11\043\uff11" +
    "\044\uff11\112\uff11\001\002\000\042\003\uff0d\006\uff0d\007" +
    "\uff0d\010\uff0d\011\uff0d\012\uff0d\013\uff0d\014\uff0d\033\uff0d" +
    "\035\uff0d\036\uff0d\040\uff0d\041\uff0d\043\uff0d\044\uff0d\112" +
    "\uff0d\001\002\000\004\106\005\001\002\000\046\003\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5" +
    "\044\uffe5\106\013\111\303\112\uffe5\001\002\000\042\003" +
    "\uff0f\006\uff0f\007\uff0f\010\uff0f\011\uff0f\012\uff0f\013\uff0f" +
    "\014\uff0f\033\uff0f\035\uff0f\036\uff0f\040\uff0f\041\uff0f\043" +
    "\uff0f\044\uff0f\112\uff0f\001\002\000\004\002\ufff2\001\002" +
    "\000\042\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\033\uffed\035\uffed\036\uffed\040\uffed" +
    "\041\uffed\043\uffed\044\uffed\112\uffed\001\002\000\042\002" +
    "\ufff0\007\267\010\042\011\040\012\054\013\046\014\053" +
    "\033\020\035\017\036\015\040\016\041\022\043\266\044" +
    "\014\103\264\106\005\001\002\000\004\103\u022a\001\002" +
    "\000\006\003\u021a\103\u021b\001\002\000\016\010\042\011" +
    "\040\012\054\013\046\014\053\104\uff04\001\002\000\020" +
    "\003\u021d\010\042\011\040\012\054\013\046\014\053\104" +
    "\uff04\001\002\000\004\104\u0221\001\002\000\004\104\u021e" +
    "\001\002\000\004\106\005\001\002\000\046\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\106\013\111\303\112\uffe5\001\002\000\042\003\uff13" +
    "\006\uff13\007\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014" +
    "\uff13\033\uff13\035\uff13\036\uff13\040\uff13\041\uff13\043\uff13" +
    "\044\uff13\112\uff13\001\002\000\006\003\u0222\106\005\001" +
    "\002\000\044\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\041\uffe5\043\uffe5\044\uffe5\111\303\112\uffe5\001\002" +
    "\000\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5" +
    "\041\uffe5\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001" +
    "\002\000\042\003\uff25\006\uff25\007\uff25\010\uff25\011\uff25" +
    "\012\uff25\013\uff25\014\uff25\033\uff25\035\uff25\036\uff25\040" +
    "\uff25\041\uff25\043\uff25\044\uff25\112\uff25\001\002\000\042" +
    "\003\uff12\006\uff12\007\uff12\010\uff12\011\uff12\012\uff12\013" +
    "\uff12\014\uff12\033\uff12\035\uff12\036\uff12\040\uff12\041\uff12" +
    "\043\uff12\044\uff12\112\uff12\001\002\000\004\104\u0227\001" +
    "\002\000\004\106\005\001\002\000\046\003\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5" +
    "\106\013\111\303\112\uffe5\001\002\000\042\003\uff14\006" +
    "\uff14\007\uff14\010\uff14\011\uff14\012\uff14\013\uff14\014\uff14" +
    "\033\uff14\035\uff14\036\uff14\040\uff14\041\uff14\043\uff14\044" +
    "\uff14\112\uff14\001\002\000\016\010\042\011\040\012\054" +
    "\013\046\014\053\104\uff04\001\002\000\004\104\u022c\001" +
    "\002\000\004\106\005\001\002\000\046\003\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5" +
    "\106\013\111\303\112\uffe5\001\002\000\042\003\uff15\006" +
    "\uff15\007\uff15\010\uff15\011\uff15\012\uff15\013\uff15\014\uff15" +
    "\033\uff15\035\uff15\036\uff15\040\uff15\041\uff15\043\uff15\044" +
    "\uff15\112\uff15\001\002\000\006\003\u0282\103\u0283\001\002" +
    "\000\006\003\u0275\103\u0276\001\002\000\016\003\u025d\010" +
    "\042\011\040\012\054\013\046\014\053\001\002\000\020" +
    "\003\u0246\033\020\035\017\036\015\040\016\041\022\044" +
    "\014\001\002\000\032\010\042\011\040\012\054\013\046" +
    "\014\053\033\020\035\017\036\015\040\016\041\022\044" +
    "\014\103\u0236\001\002\000\004\103\u0241\001\002\000\020" +
    "\017\u023b\033\020\035\017\036\015\040\016\041\022\044" +
    "\014\001\002\000\016\010\042\011\040\012\054\013\046" +
    "\014\053\104\uff04\001\002\000\004\104\u0238\001\002\000" +
    "\004\106\005\001\002\000\046\003\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013" +
    "\111\303\112\uffe5\001\002\000\042\003\uff1f\006\uff1f\007" +
    "\uff1f\010\uff1f\011\uff1f\012\uff1f\013\uff1f\014\uff1f\033\uff1f" +
    "\035\uff1f\036\uff1f\040\uff1f\041\uff1f\043\uff1f\044\uff1f\112" +
    "\uff1f\001\002\000\016\033\020\035\017\036\015\040\016" +
    "\041\022\044\014\001\002\000\012\003\065\064\032\065" +
    "\066\106\uffc9\001\002\000\004\106\uffd3\001\002\000\006" +
    "\064\032\101\170\001\002\000\012\003\222\065\223\101" +
    "\170\106\uff98\001\002\000\004\106\uffab\001\002\000\016" +
    "\010\042\011\040\012\054\013\046\014\053\104\uff04\001" +
    "\002\000\004\104\u0243\001\002\000\004\106\005\001\002" +
    "\000\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5" +
    "\041\uffe5\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001" +
    "\002\000\042\003\uff1a\006\uff1a\007\uff1a\010\uff1a\011\uff1a" +
    "\012\uff1a\013\uff1a\014\uff1a\033\uff1a\035\uff1a\036\uff1a\040" +
    "\uff1a\041\uff1a\043\uff1a\044\uff1a\112\uff1a\001\002\000\004" +
    "\103\u0258\001\002\000\006\003\u0248\103\u0249\001\002\000" +
    "\016\010\042\011\040\012\054\013\046\014\053\104\uff04" +
    "\001\002\000\020\003\u024b\010\042\011\040\012\054\013" +
    "\046\014\053\104\uff04\001\002\000\004\104\u024f\001\002" +
    "\000\004\104\u024c\001\002\000\004\106\005\001\002\000" +
    "\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002" +
    "\000\042\003\uff17\006\uff17\007\uff17\010\uff17\011\uff17\012" +
    "\uff17\013\uff17\014\uff17\033\uff17\035\uff17\036\uff17\040\uff17" +
    "\041\uff17\043\uff17\044\uff17\112\uff17\001\002\000\006\003" +
    "\u0250\106\005\001\002\000\044\003\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\111\303" +
    "\112\uffe5\001\002\000\046\003\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013\111" +
    "\303\112\uffe5\001\002\000\042\003\uff26\006\uff26\007\uff26" +
    "\010\uff26\011\uff26\012\uff26\013\uff26\014\uff26\033\uff26\035" +
    "\uff26\036\uff26\040\uff26\041\uff26\043\uff26\044\uff26\112\uff26" +
    "\001\002\000\042\003\uff16\006\uff16\007\uff16\010\uff16\011" +
    "\uff16\012\uff16\013\uff16\014\uff16\033\uff16\035\uff16\036\uff16" +
    "\040\uff16\041\uff16\043\uff16\044\uff16\112\uff16\001\002\000" +
    "\004\104\u0255\001\002\000\004\106\005\001\002\000\046" +
    "\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002\000" +
    "\042\003\uff18\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18" +
    "\013\uff18\014\uff18\033\uff18\035\uff18\036\uff18\040\uff18\041" +
    "\uff18\043\uff18\044\uff18\112\uff18\001\002\000\016\010\042" +
    "\011\040\012\054\013\046\014\053\104\uff04\001\002\000" +
    "\004\104\u025a\001\002\000\004\106\005\001\002\000\046" +
    "\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\043\uffe5\044\uffe5\106\013\111\303\112\uffe5\001\002\000" +
    "\042\003\uff19\006\uff19\007\uff19\010\uff19\011\uff19\012\uff19" +
    "\013\uff19\014\uff19\033\uff19\035\uff19\036\uff19\040\uff19\041" +
    "\uff19\043\uff19\044\uff19\112\uff19\001\002\000\020\017\u026f" +
    "\033\020\035\017\036\015\040\016\041\022\044\014\001" +
    "\002\000\022\003\u0260\017\u025f\033\020\035\017\036\015" +
    "\040\016\041\022\044\014\001\002\000\020\003\u0267\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\001\002" +
    "\000\024\003\065\033\020\035\017\036\015\040\016\041" +
    "\022\044\014\065\066\106\uffc9\001\002\000\012\003\065" +
    "\064\032\065\066\106\uffc9\001\002\000\004\106\uffd6\001" +
    "\002\000\004\106\uffd1\001\002\000\006\064\032\101\170" +
    "\001\002\000\012\003\222\065\223\101\170\106\uff98\001" +
    "\002\000\004\106\uffa9\001\002\000\004\101\170\001\002" +
    "\000\010\003\u0269\064\032\101\170\001\002\000\010\003" +
    "\222\065\223\106\uff98\001\002\000\012\003\222\065\223" +
    "\101\170\106\uff98\001\002\000\004\106\uffae\001\002\000" +
    "\004\106\uffa7\001\002\000\012\003\222\065\223\101\170" +
    "\106\uff98\001\002\000\004\106\uffa8\001\002\000\016\033" +
    "\020\035\017\036\015\040\016\041\022\044\014\001\002" +
    "\000\012\003\065\064\032\065\066\106\uffc9\001\002\000" +
    "\004\106\uffd2\001\002\000\006\064\032\101\170\001\002" +
    "\000\012\003\222\065\223\101\170\106\uff98\001\002\000" +
    "\004\106\uffaa\001\002\000\004\104\u027f\001\002\000\006" +
    "\003\u0278\104\u0277\001\002\000\006\003\u027b\106\005\001" +
    "\002\000\004\106\005\001\002\000\046\003\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5" +
    "\106\013\111\303\112\uffe5\001\002\000\042\003\uff0a\006" +
    "\uff0a\007\uff0a\010\uff0a\011\uff0a\012\uff0a\013\uff0a\014\uff0a" +
    "\033\uff0a\035\uff0a\036\uff0a\040\uff0a\041\uff0a\043\uff0a\044" +
    "\uff0a\112\uff0a\001\002\000\044\003\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\111\303" +
    "\112\uffe5\001\002\000\046\003\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013\111" +
    "\303\112\uffe5\001\002\000\042\003\uff10\006\uff10\007\uff10" +
    "\010\uff10\011\uff10\012\uff10\013\uff10\014\uff10\033\uff10\035" +
    "\uff10\036\uff10\040\uff10\041\uff10\043\uff10\044\uff10\112\uff10" +
    "\001\002\000\042\003\uff09\006\uff09\007\uff09\010\uff09\011" +
    "\uff09\012\uff09\013\uff09\014\uff09\033\uff09\035\uff09\036\uff09" +
    "\040\uff09\041\uff09\043\uff09\044\uff09\112\uff09\001\002\000" +
    "\004\106\005\001\002\000\046\003\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013" +
    "\111\303\112\uffe5\001\002\000\042\003\uff0b\006\uff0b\007" +
    "\uff0b\010\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\033\uff0b" +
    "\035\uff0b\036\uff0b\040\uff0b\041\uff0b\043\uff0b\044\uff0b\112" +
    "\uff0b\001\002\000\016\010\042\011\040\012\054\013\046" +
    "\014\053\104\uff04\001\002\000\020\003\u0285\010\042\011" +
    "\040\012\054\013\046\014\053\104\uff04\001\002\000\004" +
    "\104\u0289\001\002\000\004\104\u0286\001\002\000\004\106" +
    "\005\001\002\000\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036" +
    "\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013\111\303" +
    "\112\uffe5\001\002\000\042\003\uff1d\006\uff1d\007\uff1d\010" +
    "\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\033\uff1d\035\uff1d" +
    "\036\uff1d\040\uff1d\041\uff1d\043\uff1d\044\uff1d\112\uff1d\001" +
    "\002\000\006\003\u028a\106\005\001\002\000\044\003\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5" +
    "\044\uffe5\111\303\112\uffe5\001\002\000\046\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\106\013\111\303\112\uffe5\001\002\000\042\003\uff27" +
    "\006\uff27\007\uff27\010\uff27\011\uff27\012\uff27\013\uff27\014" +
    "\uff27\033\uff27\035\uff27\036\uff27\040\uff27\041\uff27\043\uff27" +
    "\044\uff27\112\uff27\001\002\000\042\003\uff1c\006\uff1c\007" +
    "\uff1c\010\uff1c\011\uff1c\012\uff1c\013\uff1c\014\uff1c\033\uff1c" +
    "\035\uff1c\036\uff1c\040\uff1c\041\uff1c\043\uff1c\044\uff1c\112" +
    "\uff1c\001\002\000\004\104\u028f\001\002\000\004\106\005" +
    "\001\002\000\046\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\043\uffe5\044\uffe5\106\013\111\303\112" +
    "\uffe5\001\002\000\042\003\uff1e\006\uff1e\007\uff1e\010\uff1e" +
    "\011\uff1e\012\uff1e\013\uff1e\014\uff1e\033\uff1e\035\uff1e\036" +
    "\uff1e\040\uff1e\041\uff1e\043\uff1e\044\uff1e\112\uff1e\001\002" +
    "\000\044\003\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\033\uffe9\035\uffe9\036\uffe9\040\uffe9" +
    "\041\uffe9\043\uffe9\044\uffe9\106\013\112\uffe9\001\002\000" +
    "\042\003\u0294\006\041\007\057\010\042\011\040\012\054" +
    "\013\046\014\053\033\020\035\017\036\015\040\016\041" +
    "\022\043\047\044\014\112\u0295\001\002\000\040\007\267" +
    "\010\042\011\040\012\054\013\046\014\053\033\020\035" +
    "\017\036\015\040\016\041\022\043\266\044\014\103\264" +
    "\106\005\001\002\000\004\002\uffef\001\002\000\004\106" +
    "\ufff3\001\002\000\006\064\032\106\ufff6\001\002\000\012" +
    "\002\ufff1\003\u0299\106\013\111\036\001\002\000\042\002" +
    "\ufffb\003\u0294\006\041\007\057\010\042\011\040\012\054" +
    "\013\046\014\053\033\020\035\017\036\015\040\016\041" +
    "\022\043\047\044\014\001\002\000\004\002\000\001\002" +
    "\000\004\106\005\001\002\000\016\033\020\035\017\036" +
    "\015\040\016\041\022\044\014\001\002\000\012\002\ufff1" +
    "\003\034\106\013\111\036\001\002\000\004\002\ufffd\001" +
    "\002\000\016\033\020\035\017\036\015\040\016\041\022" +
    "\044\014\001\002\000\010\003\u029c\005\025\106\ufff5\001" +
    "\002\000\004\106\005\001\002\000\012\002\ufff1\003\034" +
    "\106\013\111\036\001\002\000\004\002\ufffa\001\002\000" +
    "\010\003\u029c\005\025\106\ufff5\001\002\000\004\106\005" +
    "\001\002\000\012\002\ufff1\003\034\106\013\111\036\001" +
    "\002\000\004\002\ufffe\001\002\000\010\003\u029c\005\025" +
    "\106\ufff5\001\002\000\010\003\u02ab\005\025\106\ufff5\001" +
    "\002\000\004\106\005\001\002\000\020\033\020\035\017" +
    "\036\015\040\016\041\022\044\014\106\005\001\002\000" +
    "\012\002\ufff1\003\034\106\013\111\036\001\002\000\004" +
    "\002\ufff8\001\002\000\012\002\ufff1\003\u02af\106\013\111" +
    "\036\001\002\000\042\002\ufff7\003\u0294\006\041\007\057" +
    "\010\042\011\040\012\054\013\046\014\053\033\020\035" +
    "\017\036\015\040\016\041\022\043\047\044\014\001\002" +
    "\000\004\002\uffff\001\002\000\004\106\005\001\002\000" +
    "\012\002\ufff1\003\034\106\013\111\036\001\002\000\004" +
    "\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02b1\000\006\014\007\101\006\001\001\000\004\003" +
    "\u02a8\001\001\000\002\001\001\000\004\003\u029f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u029a\001\001\000\002\001\001" +
    "\000\004\102\023\001\001\000\004\101\u0297\001\001\000" +
    "\006\003\026\005\u0296\001\001\000\010\003\026\005\030" +
    "\101\027\001\001\000\002\001\001\000\004\013\034\001" +
    "\001\000\002\001\001\000\004\003\032\001\001\000\002" +
    "\001\001\000\022\002\042\003\047\006\036\042\043\043" +
    "\054\047\055\060\u0292\061\050\001\001\000\002\001\001" +
    "\000\022\002\042\003\047\006\036\042\043\043\054\047" +
    "\055\060\044\061\050\001\001\000\004\101\u0291\001\001" +
    "\000\002\001\001\000\006\002\u0231\003\u022e\001\001\000" +
    "\002\001\001\000\004\003\u0218\001\001\000\002\001\001" +
    "\000\020\002\042\003\047\006\036\042\043\043\054\047" +
    "\055\061\u0215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\260\003" +
    "\264\101\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\257\001\001\000\004\002" +
    "\060\001\001\000\006\003\026\005\252\001\001\000\006" +
    "\003\026\005\063\001\001\000\006\003\026\005\242\001" +
    "\001\000\010\003\026\004\216\005\217\001\001\000\004" +
    "\004\066\001\001\000\036\003\076\023\075\024\215\025" +
    "\116\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\001\001\000\036\003" +
    "\076\023\075\024\117\025\116\026\114\027\113\030\112" +
    "\031\110\032\107\033\106\034\104\035\103\055\077\075" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\076\023\075\034\214\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\076\023\075\024\212\025\116\026\114\027" +
    "\113\030\112\031\110\032\107\033\106\034\104\035\103" +
    "\055\077\075\072\001\001\000\002\001\001\000\006\036" +
    "\165\037\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\076\023\075\033\163\034\104\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\076\023\075\035\160\055\077\075\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\076\023\075\025" +
    "\157\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\001\001\000\034\003" +
    "\076\023\075\025\156\026\114\027\113\030\112\031\110" +
    "\032\107\033\106\034\104\035\103\055\077\075\072\001" +
    "\001\000\034\003\076\023\075\025\123\026\114\027\113" +
    "\030\112\031\110\032\107\033\106\034\104\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\032\003\076" +
    "\023\075\026\155\027\113\030\112\031\110\032\107\033" +
    "\106\034\104\035\103\055\077\075\072\001\001\000\032" +
    "\003\076\023\075\026\126\027\113\030\112\031\110\032" +
    "\107\033\106\034\104\035\103\055\077\075\072\001\001" +
    "\000\002\001\001\000\030\003\076\023\075\027\154\030" +
    "\112\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\030\003\076\023\075\027\153\030" +
    "\112\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\030\003\076\023\075\027\152\030" +
    "\112\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\030\003\076\023\075\027\151\030" +
    "\112\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\030\003\076\023\075\027\150\030" +
    "\112\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\030\003\076\023\075\027\135\030" +
    "\112\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\002\001\001\000\026\003\076\023" +
    "\075\030\147\031\110\032\107\033\106\034\104\035\103" +
    "\055\077\075\072\001\001\000\026\003\076\023\075\030" +
    "\140\031\110\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\002\001\001\000\024\003\076\023" +
    "\075\031\146\032\107\033\106\034\104\035\103\055\077" +
    "\075\072\001\001\000\024\003\076\023\075\031\145\032" +
    "\107\033\106\034\104\035\103\055\077\075\072\001\001" +
    "\000\024\003\076\023\075\031\144\032\107\033\106\034" +
    "\104\035\103\055\077\075\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\076" +
    "\023\075\031\162\032\107\033\106\034\104\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\211\001\001\000\002\001\001\000\044\003" +
    "\076\023\075\024\177\025\116\026\114\027\113\030\112" +
    "\031\110\032\107\033\106\034\104\035\103\055\077\071" +
    "\172\075\072\076\176\077\175\001\001\000\036\003\076" +
    "\023\075\024\170\025\116\026\114\027\113\030\112\031" +
    "\110\032\107\033\106\034\104\035\103\055\077\075\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\076\023" +
    "\075\024\202\025\116\026\114\027\113\030\112\031\110" +
    "\032\107\033\106\034\104\035\103\055\077\075\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\076\023\075\024\177\025" +
    "\116\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\076\206\001\001\000" +
    "\002\001\001\000\036\003\076\023\075\024\202\025\116" +
    "\026\114\027\113\030\112\031\110\032\107\033\106\034" +
    "\104\035\103\055\077\075\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\165\037\220\001\001\000\006\036\211\053\223\001" +
    "\001\000\002\001\001\000\004\051\225\001\001\000\002" +
    "\001\001\000\046\003\076\023\075\024\232\025\116\026" +
    "\114\027\113\030\112\031\110\032\107\033\106\034\104" +
    "\035\103\040\226\051\230\052\231\054\227\055\077\075" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\230\052\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\076\023\075\024\240\025" +
    "\116\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\165\037\247\001\001" +
    "\000\006\036\165\037\244\001\001\000\004\053\246\001" +
    "\001\000\006\036\211\053\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\211\053\250\001\001\000" +
    "\002\001\001\000\006\003\026\005\254\001\001\000\004" +
    "\004\253\001\001\000\002\001\001\000\006\036\165\037" +
    "\255\001\001\000\006\036\211\053\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u01eb\005\u01ed\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\u01e0" +
    "\072\u01de\073\u01df\074\u01e7\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\267\001\001\000\006\003\026" +
    "\005\271\001\001\000\006\003\026\005\273\001\001\000" +
    "\004\004\272\001\001\000\002\001\001\000\006\036\165" +
    "\037\274\001\001\000\006\036\211\053\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\300\001\001" +
    "\000\004\016\301\001\001\000\002\001\001\000\050\003" +
    "\331\007\303\010\314\012\317\015\304\017\324\041\325" +
    "\044\307\045\334\046\333\050\321\055\336\056\312\057" +
    "\320\062\337\063\327\070\306\075\335\100\326\001\001" +
    "\000\004\101\u01db\001\001\000\046\003\331\007\303\010" +
    "\314\012\u01d8\017\324\041\325\044\307\045\334\046\333" +
    "\050\321\055\336\056\312\057\320\062\337\063\327\070" +
    "\306\075\335\100\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u01d7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u0192\001\001" +
    "\000\004\101\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0180" +
    "\001\001\000\036\003\076\023\075\024\u017f\025\116\026" +
    "\114\027\113\030\112\031\110\032\107\033\106\034\104" +
    "\035\103\055\077\075\072\001\001\000\004\101\u0165\001" +
    "\001\000\010\020\u0142\021\u0143\022\u0144\001\001\000\002" +
    "\001\001\000\004\101\u0140\001\001\000\004\101\u013f\001" +
    "\001\000\002\001\001\000\006\036\165\037\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0102\001\001\000\002\001\001\000\004\101\371" +
    "\001\001\000\004\002\342\001\001\000\006\003\026\005" +
    "\364\001\001\000\006\003\026\005\345\001\001\000\006" +
    "\003\026\005\354\001\001\000\010\003\026\004\347\005" +
    "\350\001\001\000\004\004\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\165\037\351\001\001\000" +
    "\006\036\211\053\352\001\001\000\002\001\001\000\006" +
    "\036\165\037\361\001\001\000\006\036\165\037\356\001" +
    "\001\000\004\053\360\001\001\000\006\036\211\053\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\211\053\362\001\001\000\002\001\001\000\006\003\026" +
    "\005\366\001\001\000\004\004\365\001\001\000\002\001" +
    "\001\000\006\036\165\037\367\001\001\000\006\036\211" +
    "\053\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\076\023\075\024\u0101\025\116" +
    "\026\114\027\113\030\112\031\110\032\107\033\106\034" +
    "\104\035\103\055\077\075\072\001\001\000\036\003\076" +
    "\023\075\024\u0100\025\116\026\114\027\113\030\112\031" +
    "\110\032\107\033\106\034\104\035\103\055\077\075\072" +
    "\001\001\000\002\001\001\000\036\003\076\023\075\024" +
    "\377\025\116\026\114\027\113\030\112\031\110\032\107" +
    "\033\106\034\104\035\103\055\077\075\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\076\023\075\024\u010e\025\116\026" +
    "\114\027\113\030\112\031\110\032\107\033\106\034\104" +
    "\035\103\055\077\075\072\001\001\000\036\003\076\023" +
    "\075\024\u0105\025\116\026\114\027\113\030\112\031\110" +
    "\032\107\033\106\034\104\035\103\055\077\075\072\001" +
    "\001\000\002\001\001\000\004\101\u010b\001\001\000\004" +
    "\101\u0108\001\001\000\004\016\u0109\001\001\000\002\001" +
    "\001\000\004\016\u010d\001\001\000\004\016\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0110\001\001\000\004\016\u0111\001\001\000\002" +
    "\001\001\000\036\003\076\023\075\024\u0119\025\116\026" +
    "\114\027\113\030\112\031\110\032\107\033\106\034\104" +
    "\035\103\055\077\075\072\001\001\000\002\001\001\000" +
    "\036\003\076\023\075\024\u0118\025\116\026\114\027\113" +
    "\030\112\031\110\032\107\033\106\034\104\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\036\003\076" +
    "\023\075\024\u0117\025\116\026\114\027\113\030\112\031" +
    "\110\032\107\033\106\034\104\035\103\055\077\075\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\076\023\075\024\u013b\025\116\026\114" +
    "\027\113\030\112\031\110\032\107\033\106\034\104\035" +
    "\103\055\077\075\072\001\001\000\036\003\076\023\075" +
    "\024\u011c\025\116\026\114\027\113\030\112\031\110\032" +
    "\107\033\106\034\104\035\103\055\077\075\072\001\001" +
    "\000\002\001\001\000\004\101\u0138\001\001\000\004\101" +
    "\u011f\001\001\000\004\067\u0120\001\001\000\002\001\001" +
    "\000\004\066\u0122\001\001\000\006\064\u0125\065\u0126\001" +
    "\001\000\004\101\u0134\001\001\000\040\003\076\023\075" +
    "\024\u012f\025\116\026\114\027\113\030\112\031\110\032" +
    "\107\033\106\034\104\035\103\055\077\075\072\101\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\076\023\075\024\u0128\025\116\026\114\027\113\030\112" +
    "\031\110\032\107\033\106\034\104\035\103\055\077\075" +
    "\072\001\001\000\004\101\u012a\001\001\000\004\016\u012c" +
    "\001\001\000\004\016\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0132\001\001" +
    "\000\004\101\u0130\001\001\000\004\016\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0136\001\001" +
    "\000\004\016\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\u013a\001\001\000\004\067\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u013d\001\001\000\004\067\u013e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u0148\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\u0145\021\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u015a\001\001\000\004\016\u0159\001\001" +
    "\000\002\001\001\000\036\003\076\023\075\024\u0155\025" +
    "\116\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\001\001\000\036\003" +
    "\076\023\075\024\u014c\025\116\026\114\027\113\030\112" +
    "\031\110\032\107\033\106\034\104\035\103\055\077\075" +
    "\072\001\001\000\002\001\001\000\004\101\u0152\001\001" +
    "\000\004\101\u014f\001\001\000\004\016\u0150\001\001\000" +
    "\002\001\001\000\004\016\u0154\001\001\000\004\016\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u0157\001\001\000\004\016\u0158\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\076\023\075\024\u015c\025\116\026\114\027\113" +
    "\030\112\031\110\032\107\033\106\034\104\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\004\101\u015e" +
    "\001\001\000\004\016\u015f\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\076\023\075\024\u017e\025\116" +
    "\026\114\027\113\030\112\031\110\032\107\033\106\034" +
    "\104\035\103\055\077\075\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\076\023\075\024\u017d\025" +
    "\116\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\001\001\000\002\001" +
    "\001\000\042\003\u0168\010\u016a\011\u0169\023\075\024\u016d" +
    "\025\116\026\114\027\113\030\112\031\110\032\107\033" +
    "\106\034\104\035\103\055\u016b\075\072\001\001\000\004" +
    "\003\u017a\001\001\000\006\036\165\037\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\u016f\001\001\000" +
    "\004\016\u0170\001\001\000\002\001\001\000\036\003\076" +
    "\023\075\024\u0172\025\116\026\114\027\113\030\112\031" +
    "\110\032\107\033\106\034\104\035\103\055\077\075\072" +
    "\001\001\000\002\001\001\000\010\003\u0174\010\u0175\055" +
    "\336\001\001\000\006\036\165\037\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\u0178\001\001\000" +
    "\004\016\u0179\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\076\023\075\024\u017c\025\116\026\114\027" +
    "\113\030\112\031\110\032\107\033\106\034\104\035\103" +
    "\055\077\075\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\076\023\075\024\u018c\025\116\026\114\027" +
    "\113\030\112\031\110\032\107\033\106\034\104\035\103" +
    "\055\077\075\072\001\001\000\036\003\076\023\075\024" +
    "\u0183\025\116\026\114\027\113\030\112\031\110\032\107" +
    "\033\106\034\104\035\103\055\077\075\072\001\001\000" +
    "\002\001\001\000\004\101\u0189\001\001\000\004\101\u0186" +
    "\001\001\000\004\016\u0187\001\001\000\002\001\001\000" +
    "\004\016\u018b\001\001\000\004\016\u018a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u018e\001\001\000\004\016\u018f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u01a5\001\001\000\004\016" +
    "\u0193\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\076\023\075\024\u019e\025\116\026" +
    "\114\027\113\030\112\031\110\032\107\033\106\034\104" +
    "\035\103\055\077\075\072\001\001\000\036\003\076\023" +
    "\075\024\u0198\025\116\026\114\027\113\030\112\031\110" +
    "\032\107\033\106\034\104\035\103\055\077\075\072\001" +
    "\001\000\002\001\001\000\004\101\u019d\001\001\000\004" +
    "\101\u019b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u01a0\001\001" +
    "\000\002\001\001\000\036\003\076\023\075\024\u01a2\025" +
    "\116\026\114\027\113\030\112\031\110\032\107\033\106" +
    "\034\104\035\103\055\077\075\072\001\001\000\002\001" +
    "\001\000\004\101\u01a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\076\023\075\024" +
    "\u01a8\025\116\026\114\027\113\030\112\031\110\032\107" +
    "\033\106\034\104\035\103\055\077\075\072\001\001\000" +
    "\002\001\001\000\004\101\u01aa\001\001\000\002\001\001" +
    "\000\036\003\076\023\075\024\u01b0\025\116\026\114\027" +
    "\113\030\112\031\110\032\107\033\106\034\104\035\103" +
    "\055\077\075\072\001\001\000\036\003\076\023\075\024" +
    "\u01ad\025\116\026\114\027\113\030\112\031\110\032\107" +
    "\033\106\034\104\035\103\055\077\075\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u0174\010\u016a\011" +
    "\u01cf\055\336\001\001\000\012\003\u0174\010\u016a\011\u01b5" +
    "\055\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\076\023\075\024\u01b7\025\116\026\114\027\113" +
    "\030\112\031\110\032\107\033\106\034\104\035\103\055" +
    "\077\075\072\001\001\000\002\001\001\000\010\003\u0174" +
    "\010\u01c4\055\336\001\001\000\010\003\u0174\010\u01ba\055" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u01bd\001\001\000\004\016\u01be\001\001\000\002\001" +
    "\001\000\004\101\u01c1\001\001\000\004\016\u01c3\001\001" +
    "\000\004\016\u01c2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u01c6\001\001\000\004" +
    "\016\u01c7\001\001\000\002\001\001\000\036\003\076\023" +
    "\075\024\u01c9\025\116\026\114\027\113\030\112\031\110" +
    "\032\107\033\106\034\104\035\103\055\077\075\072\001" +
    "\001\000\002\001\001\000\010\003\u0174\010\u01cb\055\336" +
    "\001\001\000\002\001\001\000\004\101\u01cd\001\001\000" +
    "\004\016\u01ce\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\076\023\075\024\u01d1\025\116\026\114\027" +
    "\113\030\112\031\110\032\107\033\106\034\104\035\103" +
    "\055\077\075\072\001\001\000\002\001\001\000\010\003" +
    "\u0174\010\u01d3\055\336\001\001\000\002\001\001\000\004" +
    "\101\u01d5\001\001\000\004\016\u01d6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0165" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\u01e0\072\u01de\073\u01df\074\u01dd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u01e1\001" +
    "\001\000\002\001\001\000\006\002\u01e0\072\u01e3\001\001" +
    "\000\002\001\001\000\004\101\u01e5\001\001\000\004\016" +
    "\u01e6\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u01e9\001\001\000\004\016\u01ea\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\026\005\u01ef\001\001" +
    "\000\004\004\u01ee\001\001\000\002\001\001\000\006\036" +
    "\165\037\u01f0\001\001\000\006\036\211\053\u01f1\001\001" +
    "\000\002\001\001\000\012\002\u01e0\072\u01de\073\u01df\074" +
    "\u01f3\001\001\000\002\001\001\000\004\101\u01f5\001\001" +
    "\000\004\016\u01f6\001\001\000\002\001\001\000\012\002" +
    "\u01e0\072\u01de\073\u01df\074\u0203\001\001\000\012\002\u01e0" +
    "\072\u01de\073\u01df\074\u01f9\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u01fc\001\001\000\004\016\u01fd" +
    "\001\001\000\002\001\001\000\004\101\u0200\001\001\000" +
    "\004\016\u0202\001\001\000\004\016\u0201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u0205\001\001\000\004\016\u0206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u020e\001" +
    "\001\000\004\101\u020b\001\001\000\004\016\u020c\001\001" +
    "\000\002\001\001\000\004\016\u0210\001\001\000\004\016" +
    "\u020f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u0212\001\001\000\004\016\u0213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\260" +
    "\003\264\101\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\u01e0\072\u01de\073\u01df\074\u0225\001\001" +
    "\000\012\002\u01e0\072\u01de\073\u01df\074\u021b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u021e\001\001" +
    "\000\004\016\u021f\001\001\000\002\001\001\000\004\101" +
    "\u0222\001\001\000\004\016\u0224\001\001\000\004\016\u0223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u0227\001\001\000\004\016\u0228\001\001" +
    "\000\002\001\001\000\012\002\u01e0\072\u01de\073\u01df\074" +
    "\u022a\001\001\000\002\001\001\000\004\101\u022c\001\001" +
    "\000\004\016\u022d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\u025d\001\001\000\004" +
    "\003\u0246\001\001\000\006\002\u0234\003\u0233\001\001\000" +
    "\002\001\001\000\006\003\026\005\u023b\001\001\000\012" +
    "\002\u01e0\072\u01de\073\u01df\074\u0236\001\001\000\002\001" +
    "\001\000\004\101\u0238\001\001\000\004\016\u0239\001\001" +
    "\000\002\001\001\000\006\003\026\005\u023d\001\001\000" +
    "\004\004\u023c\001\001\000\002\001\001\000\006\036\165" +
    "\037\u023e\001\001\000\006\036\211\053\u023f\001\001\000" +
    "\002\001\001\000\012\002\u01e0\072\u01de\073\u01df\074\u0241" +
    "\001\001\000\002\001\001\000\004\101\u0243\001\001\000" +
    "\004\016\u0244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\u01e0\072\u01de\073\u01df\074" +
    "\u0253\001\001\000\012\002\u01e0\072\u01de\073\u01df\074\u0249" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u024c\001\001\000\004\016\u024d\001\001\000\002\001\001" +
    "\000\004\101\u0250\001\001\000\004\016\u0252\001\001\000" +
    "\004\016\u0251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\u0255\001\001\000\004\016" +
    "\u0256\001\001\000\002\001\001\000\012\002\u01e0\072\u01de" +
    "\073\u01df\074\u0258\001\001\000\002\001\001\000\004\101" +
    "\u025a\001\001\000\004\016\u025b\001\001\000\002\001\001" +
    "\000\006\003\026\005\u026f\001\001\000\006\003\026\005" +
    "\u0260\001\001\000\006\003\026\005\u0267\001\001\000\010" +
    "\003\026\004\u0262\005\u0263\001\001\000\004\004\u0261\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\165" +
    "\037\u0264\001\001\000\006\036\211\053\u0265\001\001\000" +
    "\002\001\001\000\006\036\165\037\u026c\001\001\000\006" +
    "\036\165\037\u0269\001\001\000\004\053\u026b\001\001\000" +
    "\006\036\211\053\u026a\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\211\053\u026d\001\001\000\002\001" +
    "\001\000\006\003\026\005\u0271\001\001\000\004\004\u0270" +
    "\001\001\000\002\001\001\000\006\036\165\037\u0272\001" +
    "\001\000\006\036\211\053\u0273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u027b\001" +
    "\001\000\004\101\u0278\001\001\000\004\016\u0279\001\001" +
    "\000\002\001\001\000\004\016\u027d\001\001\000\004\016" +
    "\u027c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u027f\001\001\000\004\016\u0280\001\001\000\002\001" +
    "\001\000\012\002\u01e0\072\u01de\073\u01df\074\u028d\001\001" +
    "\000\012\002\u01e0\072\u01de\073\u01df\074\u0283\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u0286\001\001" +
    "\000\004\016\u0287\001\001\000\002\001\001\000\004\101" +
    "\u028a\001\001\000\004\016\u028c\001\001\000\004\016\u028b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u028f\001\001\000\004\016\u0290\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\042\003" +
    "\047\006\036\042\043\043\054\047\055\061\u0215\001\001" +
    "\000\010\002\260\003\264\101\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0299" +
    "\001\001\000\022\002\042\003\047\006\036\042\043\043" +
    "\054\047\055\060\u0292\061\050\001\001\000\002\001\001" +
    "\000\004\101\u029c\001\001\000\006\003\026\005\030\001" +
    "\001\000\004\013\u029d\001\001\000\002\001\001\000\004" +
    "\003\u02a3\001\001\000\004\102\u02a0\001\001\000\004\101" +
    "\u02a1\001\001\000\004\013\u02a2\001\001\000\002\001\001" +
    "\000\004\102\u02a4\001\001\000\004\101\u02a5\001\001\000" +
    "\004\013\u02a6\001\001\000\002\001\001\000\004\102\u02b0" +
    "\001\001\000\004\102\u02a9\001\001\000\004\101\u02ad\001" +
    "\001\000\010\003\026\005\030\101\u02ab\001\001\000\004" +
    "\013\u02ac\001\001\000\002\001\001\000\004\013\u02af\001" +
    "\001\000\022\002\042\003\047\006\036\042\043\043\054" +
    "\047\055\060\u0292\061\050\001\001\000\002\001\001\000" +
    "\004\101\u02b1\001\001\000\004\013\u02b2\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AudioParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AudioParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AudioParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private ErrorHandler errorHandler;

	private Token info;
	private List<Integer> ind;

	public AudioParser(AudioLex lex) {
		super(lex);
		this.errorHandler = new ErrorHandler();
        this.errorHandler.initMainGrammar();
		this.ind = new ArrayList<>();
	}

	public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

	public Token getInfo() {
		return this.info;
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setError((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AudioParser$actions {
  private final AudioParser parser;

  /** Constructor */
  CUP$AudioParser$actions(AudioParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action_part00000000(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AudioParser$result;

      /* select the action based on the action number */
      switch (CUP$AudioParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		RESULT = start_val;
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AudioParser$parser.done_parsing();
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio1 ::= eol TRACK id extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					info = id;
					RESULT = list_i;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio1 ::= TRACK id extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 info = id; RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio1 ::= error TRACK id extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 info = id; RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio1 ::= eol TRACK error extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio1 ::= eol TRACK id error eol bod 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 info = id; RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio1 ::= eol TRACK id extends_ eol error 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio1 ::= error id extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 info = id; RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio1 ::= TRACK error extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio1 ::= TRACK id error eol bod 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 info = id; RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio1 ::= TRACK id extends_ eol error 
            {
              List<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extends_ ::= EXTENDS id_list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extends_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extends_ ::= error id_list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // extends_ ::= EXTENDS error 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bod ::= INDENT m_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bod ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bod ::= INDENT m_body error 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bod ::= error m_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bod ::= INDENT error DEDENT 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // m_body ::= m_body main_body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // m_body ::= main_body 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // main_body ::= principal 
            {
              List<Instruction> RESULT =null;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Principal principal = (Principal)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					if(principal != null) {
						RESULT.add(principal);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // main_body ::= function 
            {
              List<Instruction> RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Instruction function = (Instruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					if(function != null) {
						RESULT.add(function);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // main_body ::= statement eol 
            {
              List<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> statement = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // main_body ::= array_statement eol 
            {
              List<Instruction> RESULT =null;
		int array_statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> array_statement = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(array_statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // main_body ::= error eol 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_body ::= INDENT f_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_body ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_body ::= INDENT error DEDENT 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_body ::= INDENT f_body error 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // f_body ::= f_body body 
            {
              List<Instruction> RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_ins; RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // f_body ::= body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // body ::= statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> list = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // body ::= assignment eol 
            {
              List<Instruction> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new ArrayList<>();
					if(assign != null) {
						RESULT.add(assign);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // body ::= array_statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> list = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		  RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body ::= message eol 
            {
              List<Instruction> RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Message message = (Message)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(message); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= control 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					if(instruction != null) {
						RESULT.add(instruction);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // body ::= continue_ eol 
            {
              List<Instruction> RESULT =null;
		int continue_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int continue_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Continue continue_ = (Continue)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(continue_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // body ::= exit_ eol 
            {
              List<Instruction> RESULT =null;
		int exit_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int exit_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Exit exit_ = (Exit)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(exit_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // body ::= function_call eol 
            {
              List<Instruction> RESULT =null;
		int f_callleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int f_callright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		FunctionCall f_call = (FunctionCall)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(f_call); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // body ::= return_ eol 
            {
              List<Instruction> RESULT =null;
		int return_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int return_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Return return_ = (Return)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(return_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // body ::= error eol 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= KEEP VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= error VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= KEEP error type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= KEEP VAR error id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= KEEP VAR type error value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= error type id_list value 
            {
              List<Assignment> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list) {
						RESULT.add(new Assignment(token, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= VAR error id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= VAR type error value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_function ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement_function",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_function ::= VAR error id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement_function",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement_function ::= VAR type error value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement_function",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= EQUAL a 
            {
              Operation RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = operation; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= error a 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= error 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // id_list ::= id_list COMMA id 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					list.add(token);
					RESULT = list;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // id_list ::= id 
            {
              List<Token> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Token>();
					RESULT.add(token);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= INT 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= DOB 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= BOOL 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= CAD 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= CAR 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment ::= id EQUAL a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(Assignment.TypeA.EQUAL, token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment ::= id PLUS_EQ a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), operation, op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_EQ, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= id PLUS_PLUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_PLUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= id MINUS_MINUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.MINUS_MINUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= l EQUAL a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAssignment(array_access, operation, Assignment.TypeA.EQUAL); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment ::= l PLUS_EQ a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), operation, op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_EQ);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment ::= l PLUS_PLUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_PLUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment ::= l MINUS_MINUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.MINUS_MINUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment ::= error EQUAL a 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment ::= error PLUS_EQ a 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment ::= error PLUS_PLUS 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment ::= error MINUS_MINUS 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment ::= id error a 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment ::= id error 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment ::= l error a 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment ::= l error 
            {
              Assignment RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // l ::= id dimensions 
            {
              ArrayAccess RESULT =null;
		int token_idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int token_idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token_id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAccess(token_id, list_array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("l",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_statement ::= KEEP VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // array_statement ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // array_statement ::= error VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // array_statement ::= KEEP error type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // array_statement ::= KEEP VAR error ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // array_statement ::= KEEP VAR type error id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // array_statement ::= KEEP VAR type ARRAY error dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // array_statement ::= KEEP VAR type ARRAY id_list error array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // array_statement ::= error type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(type, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array_statement ::= VAR error ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // array_statement ::= VAR type error id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // array_statement ::= VAR type ARRAY error dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array_statement ::= VAR type ARRAY id_list error array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>();  ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // array_statement_function ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // array_statement_function ::= VAR error ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // array_statement_function ::= VAR type error id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_statement_function ::= VAR type ARRAY error dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // array_statement_function ::= VAR type ARRAY id_list error array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); ind = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dimensions ::= dimensions dimension 
            {
              List<ArrayIndex> RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_op = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // dimensions ::= dimension 
            {
              List<ArrayIndex> RESULT =null;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // dimension ::= LBRACKET a RBRACKET 
            {
              ArrayIndex RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token left = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token right = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayIndex(left, operation, right); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimension",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // array_value ::= EQUAL list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // array_value ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // array_value ::= error 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // list ::= LBRACE value_list RBRACE 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list_op = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Operation.class, list_op.size());
					ind.add(list_op.size());
					// System.out.println(list_op.size());
					for(int i = 0; i < list_op.size(); i++) {
						Array.set(RESULT, i, list_op.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list ::= LBRACE list_fn RBRACE 
            {
              Object RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Object.class, list_fn.size());
					for(int i = 0; i < list_fn.size(); i++) {
						Array.set(RESULT, i, list_fn.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list_fn ::= list_fn COMMA fn 
            {
              List<Object> RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_fn; RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list_fn ::= fn 
            {
              List<Object> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // fn ::= list 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list_op = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("fn",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // value_list ::= value_list COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // value_list ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // a ::= a OR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.OR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // a ::= a NOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // a ::= a XOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.XOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // a ::= b 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // b ::= b AND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.AND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // b ::= b NAND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NAND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // b ::= c 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // c ::= c EQEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.EQEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // c ::= c NEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // c ::= c GREATER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // c ::= c SMALLER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SMALLER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // c ::= c GRTREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // c ::= c SMLLREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.LESS_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // c ::= d 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // d ::= d PLUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUM, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // d ::= d MINUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUBTRACTION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // d ::= e 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // e ::= e TIMES f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MULTIPLICATION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // e ::= e DIVIDE f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT =new Operation(OperationType.DIVISION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // e ::= e MOD f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MOD, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // e ::= f 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // f ::= g POW f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.POW, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // f ::= g 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // g ::= MINUS h 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.UMINUS, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // g ::= h 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // h ::= NOT i 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOT, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // h ::= i 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // i ::= NULL j 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NULL, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // i ::= j 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // j ::= INTEGER 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.INTEGER, new Variable(var, Var.INTEGER, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // j ::= DECIMAL 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.DOUBLE, new Variable(var, Var.DOUBLE, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // j ::= STR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.STRING, new Variable(var, Var.STRING, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // j ::= CHAR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.CHAR, new Variable(var, Var.CHAR, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // j ::= boolean_val 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.BOOLEAN, var); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // j ::= id 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ID, new Variable(token)); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // j ::= l 
            {
              Operation RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ARRAY_ACCESS, array_access); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // j ::= LPAREN a RPAREN 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation var = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = var; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // j ::= function_call 
            {
              Operation RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		FunctionCall call = (FunctionCall)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.FUNCTION_CALL, call); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // j ::= error 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",63, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // eol ::= EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",63, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // control ::= list_if 
            {
              Instruction RESULT =null;
		int ifInsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int ifInsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		IfInstruction ifIns = (IfInstruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = ifIns; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // control ::= for_ 
            {
              Instruction RESULT =null;
		int for_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int for_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		For for_ = (For)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = for_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // control ::= while_ 
            {
              Instruction RESULT =null;
		int while_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int while_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		While while_ = (While)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = while_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // control ::= do_while 
            {
              Instruction RESULT =null;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		DoWhile do_while = (DoWhile)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = do_while; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // control ::= switch_ 
            {
              Instruction RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Switch sw = (Switch)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = sw; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // list_if ::= if_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // list_if ::= if_ else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // list_if ::= if_ list_else_if 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // list_if ::= if_ list_else_if else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // if_ ::= IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // if_ ::= error LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // if_ ::= IF error a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // if_ ::= IF LPAREN a error eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // if_ ::= IF LPAREN a RPAREN error function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // else_ ::= ELSE eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // else_ ::= ELSE error function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // list_else_if ::= list_else_if else_if 
            {
              List<If> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // list_else_if ::= else_if 
            {
              List<If> RESULT =null;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // else_if ::= ELSE IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // else_if ::= ELSE error LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // else_if ::= ELSE IF error a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // else_if ::= ELSE IF LPAREN a error eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // else_if ::= ELSE IF LPAREN a RPAREN error function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // for_ ::= FOR LPAREN for_assign SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // for_ ::= error LPAREN for_assign SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // for_ ::= FOR error for_assign SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_ ::= FOR LPAREN error SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_ ::= FOR LPAREN for_assign SEMI a error assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // for_ ::= FOR LPAREN for_assign SEMI a SEMI error RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // for_ ::= FOR LPAREN for_assign SEMI a SEMI assignment RPAREN error function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // for_assign ::= INT id EQUAL a 
            {
              Assignment RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(type, id, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // for_assign ::= assignment 
            {
              Assignment RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = assign; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // while_ ::= WHILE LPAREN a RPAREN eol function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // while_ ::= WHILE error a RPAREN eol function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // while_ ::= WHILE LPAREN a error eol function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // while_ ::= WHILE LPAREN a RPAREN error function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // do_while ::= DO_WHILE eol function_body WHILE LPAREN a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		
					RESULT = new DoWhile(info, token, list_ins, condition);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // do_while ::= DO_WHILE error function_body WHILE LPAREN a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		 RESULT = new DoWhile(info, token, list_ins, condition); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // do_while ::= DO_WHILE eol function_body error LPAREN a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		 RESULT = new DoWhile(info, token, list_ins, condition); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // do_while ::= DO_WHILE eol function_body WHILE error a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		 RESULT = new DoWhile(info, token, list_ins, condition); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // do_while ::= DO_WHILE eol function_body WHILE LPAREN a error eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		 RESULT = new DoWhile(info, token, list_ins, condition); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // do_while ::= DO_WHILE eol function_body WHILE LPAREN a RPAREN error 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		 RESULT = new DoWhile(info, token, list_ins, condition); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // switch_ ::= SWITCH LPAREN a RPAREN eol switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // switch_ ::= SWITCH error a RPAREN eol switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // switch_ ::= SWITCH LPAREN a error eol switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // switch_ ::= SWITCH LPAREN a RPAREN error switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // switch_body ::= INDENT case_list default_ DEDENT 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int default_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int default_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Case default_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = list;
					if(default_ != null) {
						RESULT.add(default_);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // switch_body ::= 
            {
              List<Case> RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // case_list ::= case_list case_ 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int case_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int case_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Case case_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(case_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // case_list ::= 
            {
              List<Case> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // case_ ::= CASE a eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, operation, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // case_ ::= error a eol function_body 
            {
              Case RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(null, operation, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // case_ ::= CASE a error function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, operation, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // default_ ::= DEFAULT eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, null, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // default_ ::= 
            {
              Case RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // default_ ::= error eol function_body 
            {
              Case RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(null, null, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // default_ ::= DEFAULT error function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, null, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exit_ ::= EXIT 
            {
              Exit RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Exit(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("exit_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // continue_ ::= CONTINUE 
            {
              Continue RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Continue(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("continue_",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // return_ ::= RETURN a 
            {
              Return RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Return(info, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("return_",62, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // function ::= id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(id, false, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // function ::= KEEP id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(info, false, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // function ::= KEEP type id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(info, true, token_type, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // function ::= type id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(token_type, false, token_type, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // function ::= error LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // function ::= id error params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // function ::= id LPAREN error RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // function ::= id LPAREN params_f RPAREN error function_body 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // function ::= error id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // function ::= KEEP error LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // function ::= KEEP id error params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // function ::= KEEP id LPAREN error RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // function ::= KEEP id LPAREN params_f RPAREN error function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // function ::= error type id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // function ::= KEEP error id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // function ::= KEEP type error LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // function ::= KEEP type id error params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // function ::= KEEP type id LPAREN error RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // function ::= KEEP type id LPAREN params_f RPAREN error function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // function ::= type error LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // function ::= type id error params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // function ::= type id LPAREN error RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // function ::= type id LPAREN params_f RPAREN error function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // principal ::= MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Principal(list_ins); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // principal ::= KEEP MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Principal(list_ins); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // principal ::= MAIN error RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // principal ::= MAIN LPAREN error eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // principal ::= MAIN LPAREN RPAREN error function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // principal ::= error MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // principal ::= KEEP MAIN error RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // principal ::= KEEP MAIN LPAREN error eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // principal ::= KEEP MAIN LPAREN RPAREN error function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // message ::= MSG LPAREN a RPAREN 
            {
              Message RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new Message(token, operation);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // message ::= MSG error a RPAREN 
            {
              Message RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new Message(token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // message ::= MSG LPAREN a error 
            {
              Message RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new Message(token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // params_f ::= params 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",58, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // params_f ::= 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",58, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // params ::= params COMMA param 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Parameter param = (Parameter)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(param); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // params ::= param 
            {
              List<Parameter> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Parameter param = (Parameter)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(param); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // param ::= type id 
            {
              Parameter RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Parameter(type, id); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("param",56, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // note ::= NOTE 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("note",55, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // note ::= IF 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("note",55, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // function_call ::= id LPAREN args_ RPAREN 
            {
              FunctionCall RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new FunctionCall(token, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_call",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // function_call ::= id LPAREN args COMMA WAY RPAREN 
            {
              FunctionCall RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int wayleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int wayright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token way = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new Order(token, list, way); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_call",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // function_call ::= id LPAREN note COMMA args RPAREN 
            {
              FunctionCall RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int noteleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int noteright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token note = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new Play(token, note, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_call",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // args_ ::= args 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args_",61, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // args_ ::= 
            {
              List<Operation> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args_",61, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // args ::= args COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // args ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // id ::= ID 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // id ::= LENGTH 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // id ::= SUM 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // id ::= ORDER 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // id ::= PLAY 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // id ::= WAIT 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AudioParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
              return CUP$AudioParser$do_action_part00000000(
                               CUP$AudioParser$act_num,
                               CUP$AudioParser$parser,
                               CUP$AudioParser$stack,
                               CUP$AudioParser$top);
    }
}

}
