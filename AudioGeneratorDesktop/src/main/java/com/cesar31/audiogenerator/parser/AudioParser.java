
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.lang.reflect.Array;
import com.cesar31.audiogenerator.instruction.*;
import com.cesar31.audiogenerator.control.*;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AudioParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AudioParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AudioParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AudioParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AudioParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\013\010\000\002\073" +
    "\004\000\002\073\002\000\002\012\005\000\002\012\002" +
    "\000\002\056\004\000\002\056\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\004\000\002\057\004\000\002" +
    "\015\005\000\002\015\002\000\002\014\004\000\002\014" +
    "\003\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\004\000\002\005\007\000\002\005\006\000\002" +
    "\006\006\000\002\003\004\000\002\003\002\000\002\004" +
    "\005\000\002\004\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\004\000\002\053\004\000\002\046\011" +
    "\000\002\046\010\000\002\047\010\000\002\036\004\000" +
    "\002\036\003\000\002\035\005\000\002\071\004\000\002" +
    "\071\002\000\002\050\005\000\002\050\005\000\002\052" +
    "\005\000\002\052\003\000\002\051\003\000\002\037\005" +
    "\000\002\037\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\004\000\002\031\003" +
    "\000\002\032\004\000\002\032\003\000\002\033\004\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\005\000\002\022\003" +
    "\000\002\022\003\000\002\067\004\000\002\067\003\000" +
    "\002\070\004\000\002\070\002\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\054\003\000\002\054\004\000\002\054\004" +
    "\000\002\054\005\000\002\016\010\000\002\017\005\000" +
    "\002\021\004\000\002\021\003\000\002\020\011\000\002" +
    "\044\014\000\002\010\006\000\002\010\003\000\002\040" +
    "\010\000\002\045\012\000\002\066\010\000\002\065\006" +
    "\000\002\065\002\000\002\064\004\000\002\064\002\000" +
    "\002\062\006\000\002\063\005\000\002\063\002\000\002" +
    "\061\003\000\002\060\003\000\002\072\004\000\002\041" +
    "\010\000\002\041\012\000\002\041\011\000\002\041\011" +
    "\000\002\042\007\000\002\043\006\000\002\074\003\000" +
    "\002\074\002\000\002\075\005\000\002\075\003\000\002" +
    "\076\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\004\uff9c\125\uff9c\001\002\000\006\004" +
    "\007\125\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\062\011\001\002\000\006\004" +
    "\uff9d\125\uff9d\001\002\000\006\005\013\125\ufffe\001\002" +
    "\000\004\125\020\001\002\000\004\062\014\001\002\000" +
    "\012\103\uffe4\104\uffe4\120\uffe4\125\uffe4\001\002\000\006" +
    "\103\016\125\uffff\001\002\000\004\062\017\001\002\000" +
    "\012\103\uffe5\104\uffe5\120\uffe5\125\uffe5\001\002\000\062" +
    "\002\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\125\uff9e\130\uff9e\131\uff9e\001\002\000\010" +
    "\002\ufffc\125\022\130\024\001\002\000\062\002\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\125\uff9f\130\uff9f\131\uff9f\001\002\000\004\002\000\001" +
    "\002\000\024\006\043\007\034\010\026\011\033\012\027" +
    "\013\031\014\044\061\030\062\036\001\002\000\004\125" +
    "\020\001\002\000\006\017\uffe3\062\uffe3\001\002\000\006" +
    "\017\uffe1\062\uffe1\001\002\000\004\122\u011f\001\002\000" +
    "\006\017\uffdf\062\uffdf\001\002\000\026\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\061\ufff8\062" +
    "\ufff8\131\ufff8\001\002\000\006\017\uffe2\062\uffe2\001\002" +
    "\000\014\010\026\011\033\012\027\013\031\014\044\001" +
    "\002\000\026\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\061\ufffa\062\ufffa\131\ufffa\001\002\000" +
    "\004\122\u0113\001\002\000\004\062\u010d\001\002\000\026" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\061\ufff9\062\ufff9\131\ufff9\001\002\000\004\125\020" +
    "\001\002\000\026\006\043\007\034\010\026\011\033\012" +
    "\027\013\031\014\044\061\030\062\036\131\u010a\001\002" +
    "\000\020\007\045\010\026\011\033\012\027\013\031\014" +
    "\044\062\046\001\002\000\006\017\uffe0\062\uffe0\001\002" +
    "\000\014\010\026\011\033\012\027\013\031\014\044\001" +
    "\002\000\004\122\376\001\002\000\004\062\050\001\002" +
    "\000\004\122\051\001\002\000\016\010\026\011\033\012" +
    "\027\013\031\014\044\123\uff76\001\002\000\004\123\061" +
    "\001\002\000\006\103\uff74\123\uff74\001\002\000\006\103" +
    "\057\123\uff77\001\002\000\004\062\056\001\002\000\006" +
    "\103\uff73\123\uff73\001\002\000\014\010\026\011\033\012" +
    "\027\013\031\014\044\001\002\000\006\103\uff75\123\uff75" +
    "\001\002\000\004\125\020\001\002\000\032\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\061\ufff4" +
    "\062\ufff4\125\022\130\064\131\ufff4\001\002\000\026\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\061\uff7c\062\uff7c\131\uff7c\001\002\000\026\007\116\020" +
    "\073\022\071\024\065\026\115\027\067\030\106\031\066" +
    "\060\072\062\076\001\002\000\004\125\uff80\001\002\000" +
    "\004\125\uff7f\001\002\000\004\122\371\001\002\000\004" +
    "\125\020\001\002\000\004\122\347\001\002\000\004\122" +
    "\344\001\002\000\004\122\337\001\002\000\030\007\uff9a" +
    "\020\uff9a\022\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\060\uff9a\062\uff9a\131\uff9a\001\002\000\030\007\uff97" +
    "\020\uff97\022\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\060\uff97\062\uff97\131\uff97\001\002\000\014\104\334" +
    "\113\332\114\331\115\333\120\125\001\002\000\030\007" +
    "\uffed\020\uffed\022\uffed\024\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\060\uffed\062\uffed\131\uffed\001\002\000\004\125" +
    "\020\001\002\000\004\125\020\001\002\000\030\007\uff98" +
    "\020\uff98\022\uff98\024\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\060\uff98\062\uff98\131\uff98\001\002\000\030\007\ufff2" +
    "\020\ufff2\022\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\060\ufff2\062\ufff2\131\ufff2\001\002\000\030\007\uff99" +
    "\020\uff99\022\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\060\uff99\062\uff99\131\uff99\001\002\000\030\007\116" +
    "\020\073\022\071\024\065\026\115\027\067\030\106\031" +
    "\066\060\072\062\076\131\325\001\002\000\004\125\020" +
    "\001\002\000\004\125\020\001\002\000\012\104\312\113" +
    "\310\114\307\115\311\001\002\000\030\007\uff9b\020\uff9b" +
    "\022\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\060" +
    "\uff9b\062\uff9b\131\uff9b\001\002\000\004\125\020\001\002" +
    "\000\032\007\uff96\020\uff96\021\270\022\uff96\024\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\060\uff96\062\uff96\131\uff96" +
    "\001\002\000\004\125\020\001\002\000\004\122\251\001" +
    "\002\000\014\010\026\011\033\012\027\013\031\014\044" +
    "\001\002\000\006\017\121\062\014\001\002\000\010\103" +
    "\016\104\246\125\uffe6\001\002\000\004\062\014\001\002" +
    "\000\006\103\016\120\125\001\002\000\010\104\227\120" +
    "\125\125\uffce\001\002\000\072\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\075\uffd1\076\uffd1\077\uffd1\100" +
    "\uffd1\101\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1" +
    "\110\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115\uffd1\117" +
    "\uffd1\120\uffd1\121\uffd1\123\uffd1\124\uffd1\125\uffd1\001\002" +
    "\000\030\015\131\016\136\062\133\063\146\064\126\074" +
    "\152\102\130\106\137\122\132\126\141\127\127\001\002" +
    "\000\060\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\103\uffa8" +
    "\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\117" +
    "\uffa8\121\uffa8\123\uffa8\124\uffa8\125\uffa8\001\002\000\060" +
    "\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\103\uffa6\105\uffa6" +
    "\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\117\uffa6\121" +
    "\uffa6\123\uffa6\124\uffa6\125\uffa6\001\002\000\024\015\131" +
    "\016\136\062\133\063\146\064\126\074\152\122\132\126" +
    "\141\127\127\001\002\000\060\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\073\uffa1\075\uffa1\076\uffa1\077\uffa1\100" +
    "\uffa1\101\uffa1\103\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\111\uffa1\112\uffa1\117\uffa1\121\uffa1\123\uffa1\124\uffa1\125" +
    "\uffa1\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\062\066\uffa4\067\uffa4\070\uffa4\071\uffa4" +
    "\072\uffa4\073\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101" +
    "\uffa4\103\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4" +
    "\112\uffa4\117\uffa4\120\125\121\uffa4\123\uffa4\124\uffa4\125" +
    "\uffa4\001\002\000\060\066\uffa5\067\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\103\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5" +
    "\112\uffa5\117\uffa5\121\uffa5\123\uffa5\124\uffa5\125\uffa5\001" +
    "\002\000\060\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\103" +
    "\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3" +
    "\117\uffa3\121\uffa3\123\uffa3\124\uffa3\125\uffa3\001\002\000" +
    "\060\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\103\uffa0\105" +
    "\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\117\uffa0" +
    "\121\uffa0\123\uffa0\124\uffa0\125\uffa0\001\002\000\026\015" +
    "\131\016\136\062\133\063\146\064\126\074\152\102\130" +
    "\122\132\126\141\127\127\001\002\000\060\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\075\uffaa\076\uffaa" +
    "\077\uffaa\100\uffaa\101\uffaa\103\uffaa\105\uffaa\106\uffaa\107" +
    "\uffaa\110\uffaa\111\uffaa\112\uffaa\117\uffaa\121\uffaa\123\uffaa" +
    "\124\uffaa\125\uffaa\001\002\000\060\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\100\uffa7\101\uffa7\103\uffa7\105\uffa7\106\uffa7\107\uffa7\110" +
    "\uffa7\111\uffa7\112\uffa7\117\uffa7\121\uffa7\123\uffa7\124\uffa7" +
    "\125\uffa7\001\002\000\060\066\uffac\067\uffac\070\uffac\071" +
    "\uffac\072\uffac\073\uffac\075\uffac\076\uffac\077\uffac\100\uffac" +
    "\101\uffac\103\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111" +
    "\uffac\112\uffac\117\uffac\121\uffac\123\uffac\124\uffac\125\uffac" +
    "\001\002\000\060\066\uffae\067\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\103\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112" +
    "\uffae\117\uffae\121\uffae\123\uffae\124\uffae\125\uffae\001\002" +
    "\000\060\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0" +
    "\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\217\117" +
    "\uffb0\121\uffb0\123\uffb0\124\uffb0\125\uffb0\001\002\000\056" +
    "\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\103\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\117\uffb2\121\uffb2\123" +
    "\uffb2\124\uffb2\125\uffb2\001\002\000\060\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\100\uffa9\101\uffa9\103\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\117\uffa9\121\uffa9\123\uffa9\124" +
    "\uffa9\125\uffa9\001\002\000\056\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\103\uffb6\105\uffb6\106\uffb6\107\201\110\200" +
    "\111\177\117\uffb6\121\uffb6\123\uffb6\124\uffb6\125\uffb6\001" +
    "\002\000\050\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9" +
    "\073\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\103" +
    "\uffb9\105\174\106\175\117\uffb9\121\uffb9\123\uffb9\124\uffb9" +
    "\125\uffb9\001\002\000\044\066\172\067\171\070\165\071" +
    "\167\072\170\073\166\075\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\101\uffc0\103\uffc0\117\uffc0\121\uffc0\123\uffc0\124\uffc0\125" +
    "\uffc0\001\002\000\022\015\131\016\136\062\133\063\146" +
    "\064\126\122\132\126\141\127\127\001\002\000\030\075" +
    "\163\076\162\077\uffc3\100\uffc3\101\uffc3\103\uffc3\117\uffc3" +
    "\121\uffc3\123\uffc3\124\uffc3\125\uffc3\001\002\000\012\077" +
    "\160\100\156\101\157\121\155\001\002\000\072\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\114" +
    "\uffd0\115\uffd0\117\uffd0\120\uffd0\121\uffd0\123\uffd0\124\uffd0" +
    "\125\uffd0\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\030\075\163\076\162\077\uffc6\100" +
    "\uffc6\101\uffc6\103\uffc6\117\uffc6\121\uffc6\123\uffc6\124\uffc6" +
    "\125\uffc6\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\044\066\172\067\171\070\165\071" +
    "\167\072\170\073\166\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\103\uffc2\117\uffc2\121\uffc2\123\uffc2\124\uffc2\125" +
    "\uffc2\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\050\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\103\uffbf\105\174\106\175\117\uffbf\121\uffbf\123\uffbf" +
    "\124\uffbf\125\uffbf\001\002\000\030\015\131\016\136\062" +
    "\133\063\146\064\126\074\152\102\130\106\137\122\132" +
    "\126\141\127\127\001\002\000\030\015\131\016\136\062" +
    "\133\063\146\064\126\074\152\102\130\106\137\122\132" +
    "\126\141\127\127\001\002\000\056\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\103\uffb7\105\uffb7\106\uffb7\107\201\110" +
    "\200\111\177\117\uffb7\121\uffb7\123\uffb7\124\uffb7\125\uffb7" +
    "\001\002\000\030\015\131\016\136\062\133\063\146\064" +
    "\126\074\152\102\130\106\137\122\132\126\141\127\127" +
    "\001\002\000\030\015\131\016\136\062\133\063\146\064" +
    "\126\074\152\102\130\106\137\122\132\126\141\127\127" +
    "\001\002\000\030\015\131\016\136\062\133\063\146\064" +
    "\126\074\152\102\130\106\137\122\132\126\141\127\127" +
    "\001\002\000\056\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5" +
    "\103\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\117" +
    "\uffb5\121\uffb5\123\uffb5\124\uffb5\125\uffb5\001\002\000\056" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\103\uffb4\105\uffb4" +
    "\106\uffb4\107\uffb4\110\uffb4\111\uffb4\117\uffb4\121\uffb4\123" +
    "\uffb4\124\uffb4\125\uffb4\001\002\000\056\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\103\uffb3\105\uffb3\106\uffb3\107\uffb3" +
    "\110\uffb3\111\uffb3\117\uffb3\121\uffb3\123\uffb3\124\uffb3\125" +
    "\uffb3\001\002\000\056\066\uffb8\067\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\073\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101" +
    "\uffb8\103\uffb8\105\uffb8\106\uffb8\107\201\110\200\111\177" +
    "\117\uffb8\121\uffb8\123\uffb8\124\uffb8\125\uffb8\001\002\000" +
    "\050\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\103\uffbe\105" +
    "\174\106\175\117\uffbe\121\uffbe\123\uffbe\124\uffbe\125\uffbe" +
    "\001\002\000\050\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\103\uffbb\105\174\106\175\117\uffbb\121\uffbb\123\uffbb\124" +
    "\uffbb\125\uffbb\001\002\000\050\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\103\uffbc\105\174\106\175\117\uffbc\121\uffbc" +
    "\123\uffbc\124\uffbc\125\uffbc\001\002\000\050\066\uffba\067" +
    "\uffba\070\uffba\071\uffba\072\uffba\073\uffba\075\uffba\076\uffba" +
    "\077\uffba\100\uffba\101\uffba\103\uffba\105\174\106\175\117" +
    "\uffba\121\uffba\123\uffba\124\uffba\125\uffba\001\002\000\050" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\103\uffbd\105\174" +
    "\106\175\117\uffbd\121\uffbd\123\uffbd\124\uffbd\125\uffbd\001" +
    "\002\000\044\066\172\067\171\070\165\071\167\072\170" +
    "\073\166\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\103" +
    "\uffc1\117\uffc1\121\uffc1\123\uffc1\124\uffc1\125\uffc1\001\002" +
    "\000\030\075\163\076\162\077\uffc4\100\uffc4\101\uffc4\103" +
    "\uffc4\117\uffc4\121\uffc4\123\uffc4\124\uffc4\125\uffc4\001\002" +
    "\000\030\075\163\076\162\077\uffc5\100\uffc5\101\uffc5\103" +
    "\uffc5\117\uffc5\121\uffc5\123\uffc5\124\uffc5\125\uffc5\001\002" +
    "\000\060\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\103\uffab" +
    "\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab\117" +
    "\uffab\121\uffab\123\uffab\124\uffab\125\uffab\001\002\000\030" +
    "\015\131\016\136\062\133\063\146\064\126\074\152\102" +
    "\130\106\137\122\132\126\141\127\127\001\002\000\056" +
    "\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\103\uffb1\105\uffb1" +
    "\106\uffb1\107\uffb1\110\uffb1\111\uffb1\117\uffb1\121\uffb1\123" +
    "\uffb1\124\uffb1\125\uffb1\001\002\000\060\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\103\uffaf\105\uffaf\106\uffaf\107\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\117\uffaf\121\uffaf\123\uffaf\124" +
    "\uffaf\125\uffaf\001\002\000\072\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\075\uffd6\076\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6" +
    "\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\115\uffd6\117" +
    "\uffd6\120\125\121\uffd6\123\uffd6\124\uffd6\125\uffd6\001\002" +
    "\000\072\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\103\uffd2" +
    "\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112" +
    "\uffd2\113\uffd2\114\uffd2\115\uffd2\117\uffd2\120\uffd2\121\uffd2" +
    "\123\uffd2\124\uffd2\125\uffd2\001\002\000\012\077\160\100" +
    "\156\101\157\123\225\001\002\000\060\066\uffa2\067\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\073\uffa2\075\uffa2\076\uffa2\077" +
    "\uffa2\100\uffa2\101\uffa2\103\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\110\uffa2\111\uffa2\112\uffa2\117\uffa2\121\uffa2\123\uffa2\124" +
    "\uffa2\125\uffa2\001\002\000\060\066\uffad\067\uffad\070\uffad" +
    "\071\uffad\072\uffad\073\uffad\075\uffad\076\uffad\077\uffad\100" +
    "\uffad\101\uffad\103\uffad\105\uffad\106\uffad\107\uffad\110\uffad" +
    "\111\uffad\112\uffad\117\uffad\121\uffad\123\uffad\124\uffad\125" +
    "\uffad\001\002\000\004\116\231\001\002\000\004\125\uffd3" +
    "\001\002\000\032\015\131\016\136\062\133\063\146\064" +
    "\126\074\152\102\130\106\137\116\231\122\132\126\141" +
    "\127\127\001\002\000\004\125\uffcf\001\002\000\006\103" +
    "\243\117\244\001\002\000\006\103\uffca\117\uffca\001\002" +
    "\000\006\103\240\117\241\001\002\000\006\103\uffc9\117" +
    "\uffc9\001\002\000\014\077\160\100\156\101\157\103\uffc7" +
    "\117\uffc7\001\002\000\004\116\231\001\002\000\010\103" +
    "\uffcc\117\uffcc\125\uffcc\001\002\000\006\103\uffcb\117\uffcb" +
    "\001\002\000\030\015\131\016\136\062\133\063\146\064" +
    "\126\074\152\102\130\106\137\122\132\126\141\127\127" +
    "\001\002\000\010\103\uffcd\117\uffcd\125\uffcd\001\002\000" +
    "\014\077\160\100\156\101\157\103\uffc8\117\uffc8\001\002" +
    "\000\030\015\131\016\136\062\133\063\146\064\126\074" +
    "\152\102\130\106\137\122\132\126\141\127\127\001\002" +
    "\000\004\125\uffe8\001\002\000\012\077\160\100\156\101" +
    "\157\125\uffe7\001\002\000\006\010\254\062\076\001\002" +
    "\000\004\124\260\001\002\000\004\124\uff8b\001\002\000" +
    "\004\062\255\001\002\000\004\104\256\001\002\000\030" +
    "\015\131\016\136\062\133\063\146\064\126\074\152\102" +
    "\130\106\137\122\132\126\141\127\127\001\002\000\012" +
    "\077\160\100\156\101\157\124\uff8c\001\002\000\030\015" +
    "\131\016\136\062\133\063\146\064\126\074\152\102\130" +
    "\106\137\122\132\126\141\127\127\001\002\000\012\077" +
    "\160\100\156\101\157\124\262\001\002\000\004\062\076" +
    "\001\002\000\004\123\264\001\002\000\004\125\020\001" +
    "\002\000\034\007\ufff4\020\ufff4\022\ufff4\024\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\060\ufff4\062\ufff4\125\022\130" +
    "\064\131\ufff4\001\002\000\030\007\uff8d\020\uff8d\022\uff8d" +
    "\024\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\060\uff8d\062" +
    "\uff8d\131\uff8d\001\002\000\032\007\ufff1\020\ufff1\022\ufff1" +
    "\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\060\ufff1\062" +
    "\ufff1\125\022\131\ufff1\001\002\000\006\020\277\125\020" +
    "\001\002\000\030\007\uff95\020\uff95\022\uff95\024\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\060\uff95\062\uff95\131\uff95" +
    "\001\002\000\032\007\uff8f\020\uff8f\021\uff8f\022\uff8f\024" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\060\uff8f\062\uff8f" +
    "\131\uff8f\001\002\000\032\007\uff94\020\uff94\021\270\022" +
    "\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031\uff94\060\uff94" +
    "\062\uff94\131\uff94\001\002\000\030\007\uff93\020\uff93\022" +
    "\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\060\uff93" +
    "\062\uff93\131\uff93\001\002\000\032\007\uff90\020\uff90\021" +
    "\uff90\022\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\060\uff90\062\uff90\131\uff90\001\002\000\034\007\ufff4\020" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\060\ufff4\062\ufff4\125\022\130\064\131\ufff4\001\002\000" +
    "\004\122\300\001\002\000\030\015\131\016\136\062\133" +
    "\063\146\064\126\074\152\102\130\106\137\122\132\126" +
    "\141\127\127\001\002\000\012\077\160\100\156\101\157" +
    "\123\302\001\002\000\004\125\020\001\002\000\036\007" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\060\ufff4\062\ufff4\125\022\130\064\131" +
    "\ufff4\001\002\000\032\007\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\024\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\060\uff8e\062" +
    "\uff8e\131\uff8e\001\002\000\030\007\uff91\020\uff91\022\uff91" +
    "\024\uff91\026\uff91\027\uff91\030\uff91\031\uff91\060\uff91\062" +
    "\uff91\131\uff91\001\002\000\032\007\uffeb\020\uffeb\022\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\060\uffeb\062" +
    "\uffeb\125\022\131\uffeb\001\002\000\010\123\uffd8\124\uffd8" +
    "\125\uffd8\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\010\123\uffd7\124\uffd7\125\uffd7\001" +
    "\002\000\030\015\131\016\136\062\133\063\146\064\126" +
    "\074\152\102\130\106\137\122\132\126\141\127\127\001" +
    "\002\000\016\077\160\100\156\101\157\123\uffda\124\uffda" +
    "\125\uffda\001\002\000\016\077\160\100\156\101\157\123" +
    "\uffd9\124\uffd9\125\uffd9\001\002\000\032\007\ufff0\020\ufff0" +
    "\022\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\060" +
    "\ufff0\062\ufff0\125\022\131\ufff0\001\002\000\010\027\ufff4" +
    "\125\022\130\064\001\002\000\004\027\320\001\002\000" +
    "\004\122\321\001\002\000\030\015\131\016\136\062\133" +
    "\063\146\064\126\074\152\102\130\106\137\122\132\126" +
    "\141\127\127\001\002\000\012\077\160\100\156\101\157" +
    "\123\323\001\002\000\004\125\020\001\002\000\032\007" +
    "\uff89\020\uff89\022\uff89\024\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\060\uff89\062\uff89\125\022\131\uff89\001\002\000" +
    "\054\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\131\ufff5\001\002\000\030\007\ufff3\020\ufff3\022" +
    "\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\060\ufff3" +
    "\062\ufff3\131\ufff3\001\002\000\032\007\uffee\020\uffee\022" +
    "\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\060\uffee" +
    "\062\uffee\125\022\131\uffee\001\002\000\032\007\uffec\020" +
    "\uffec\022\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\060\uffec\062\uffec\125\022\131\uffec\001\002\000\010\123" +
    "\uffdc\124\uffdc\125\uffdc\001\002\000\030\015\131\016\136" +
    "\062\133\063\146\064\126\074\152\102\130\106\137\122" +
    "\132\126\141\127\127\001\002\000\010\123\uffdb\124\uffdb" +
    "\125\uffdb\001\002\000\030\015\131\016\136\062\133\063" +
    "\146\064\126\074\152\102\130\106\137\122\132\126\141" +
    "\127\127\001\002\000\016\077\160\100\156\101\157\123" +
    "\uffde\124\uffde\125\uffde\001\002\000\016\077\160\100\156" +
    "\101\157\123\uffdd\124\uffdd\125\uffdd\001\002\000\030\015" +
    "\131\016\136\062\133\063\146\064\126\074\152\102\130" +
    "\106\137\122\132\126\141\127\127\001\002\000\012\077" +
    "\160\100\156\101\157\123\341\001\002\000\004\125\020" +
    "\001\002\000\036\007\ufff4\020\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\060\ufff4\062\ufff4" +
    "\125\022\130\064\131\ufff4\001\002\000\032\007\uff92\020" +
    "\uff92\021\uff92\022\uff92\024\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\060\uff92\062\uff92\131\uff92\001\002\000\030\015" +
    "\131\016\136\062\133\063\146\064\126\074\152\102\130" +
    "\106\137\122\132\126\141\127\127\001\002\000\012\077" +
    "\160\100\156\101\157\123\346\001\002\000\004\125\uff78" +
    "\001\002\000\030\015\131\016\136\062\133\063\146\064" +
    "\126\074\152\102\130\106\137\122\132\126\141\127\127" +
    "\001\002\000\012\077\160\100\156\101\157\123\351\001" +
    "\002\000\004\125\020\001\002\000\034\007\uff86\020\uff86" +
    "\022\uff86\024\uff86\026\uff86\027\uff86\030\uff86\031\uff86\060" +
    "\uff86\062\uff86\125\022\130\354\131\uff86\001\002\000\030" +
    "\007\uff88\020\uff88\022\uff88\024\uff88\026\uff88\027\uff88\030" +
    "\uff88\031\uff88\060\uff88\062\uff88\131\uff88\001\002\000\010" +
    "\023\uff84\025\uff84\131\uff84\001\002\000\010\023\361\025" +
    "\356\131\uff81\001\002\000\004\125\020\001\002\000\010" +
    "\023\uff85\025\uff85\131\uff85\001\002\000\004\131\365\001" +
    "\002\000\030\015\131\016\136\062\133\063\146\064\126" +
    "\074\152\102\130\106\137\122\132\126\141\127\127\001" +
    "\002\000\012\077\160\100\156\101\157\125\020\001\002" +
    "\000\014\023\ufff4\025\ufff4\125\022\130\064\131\ufff4\001" +
    "\002\000\010\023\uff83\025\uff83\131\uff83\001\002\000\030" +
    "\007\uff87\020\uff87\022\uff87\024\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\060\uff87\062\uff87\131\uff87\001\002\000\010" +
    "\125\022\130\064\131\ufff4\001\002\000\004\131\uff82\001" +
    "\002\000\032\007\uffef\020\uffef\022\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\060\uffef\062\uffef\125\022\131" +
    "\uffef\001\002\000\030\015\131\016\136\062\133\063\146" +
    "\064\126\074\152\102\130\106\137\122\132\126\141\127" +
    "\127\001\002\000\012\077\160\100\156\101\157\123\373" +
    "\001\002\000\004\125\020\001\002\000\034\007\ufff4\020" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\060\ufff4\062\ufff4\125\022\130\064\131\ufff4\001\002\000" +
    "\030\007\uff8a\020\uff8a\022\uff8a\024\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\060\uff8a\062\uff8a\131\uff8a\001\002\000" +
    "\016\010\026\011\033\012\027\013\031\014\044\123\uff76" +
    "\001\002\000\004\123\u0100\001\002\000\004\125\020\001" +
    "\002\000\032\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\061\ufff4\062\ufff4\125\022\130\064\131" +
    "\ufff4\001\002\000\026\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\061\uff7b\062\uff7b\131\uff7b\001" +
    "\002\000\006\017\u0105\062\014\001\002\000\010\103\016" +
    "\104\246\125\uffe6\001\002\000\004\062\014\001\002\000" +
    "\006\103\016\120\125\001\002\000\010\104\227\120\125" +
    "\125\uffce\001\002\000\004\125\uffd5\001\002\000\004\125" +
    "\uffea\001\002\000\004\002\ufffd\001\002\000\026\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\061" +
    "\ufffb\062\ufffb\131\ufffb\001\002\000\030\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\061\ufff7\062" +
    "\ufff7\125\022\131\ufff7\001\002\000\004\122\u010e\001\002" +
    "\000\016\010\026\011\033\012\027\013\031\014\044\123" +
    "\uff76\001\002\000\004\123\u0110\001\002\000\004\125\020" +
    "\001\002\000\032\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\061\ufff4\062\ufff4\125\022\130\064" +
    "\131\ufff4\001\002\000\026\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\061\uff7a\062\uff7a\131\uff7a" +
    "\001\002\000\016\010\026\011\033\012\027\013\031\014" +
    "\044\123\uff76\001\002\000\004\123\u0115\001\002\000\004" +
    "\125\020\001\002\000\032\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\061\ufff4\062\ufff4\125\022" +
    "\130\064\131\ufff4\001\002\000\026\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\061\uff7d\062\uff7d" +
    "\131\uff7d\001\002\000\006\017\u011a\062\014\001\002\000" +
    "\010\103\016\104\246\125\uffe6\001\002\000\004\062\014" +
    "\001\002\000\006\103\016\120\125\001\002\000\010\104" +
    "\227\120\125\125\uffce\001\002\000\004\125\uffd4\001\002" +
    "\000\004\125\uffe9\001\002\000\004\123\u0120\001\002\000" +
    "\004\125\020\001\002\000\032\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\061\ufff4\062\ufff4\125" +
    "\022\130\064\131\ufff4\001\002\000\026\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\061\uff79\062" +
    "\uff79\131\uff79\001\002\000\030\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\061\ufff6\062\ufff6\125" +
    "\022\131\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\013\004\070\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\011\001\001\000\004\067" +
    "\020\001\001\000\004\004\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\036\005\040\041\031\042" +
    "\037\046\024\056\041\057\034\001\001\000\004\067\u0122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\u0117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u010b" +
    "\001\001\000\016\002\036\005\040\041\031\042\037\046" +
    "\024\057\u010a\001\001\000\004\002\046\001\001\000\002" +
    "\001\001\000\004\002\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\054\074\051" +
    "\075\053\076\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\054\076\057\001\001\000\002\001\001\000" +
    "\004\067\061\001\001\000\004\015\062\001\001\000\002" +
    "\001\001\000\042\006\113\007\106\011\102\014\104\016" +
    "\112\040\103\043\100\044\073\045\101\047\067\053\107" +
    "\054\110\055\076\060\077\061\111\066\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\123\036\221\001\001\000\002\001\001\000\004\067" +
    "\327\001\001\000\004\067\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\113\007" +
    "\106\011\325\016\112\040\103\043\100\044\073\045\101" +
    "\047\067\053\107\054\110\055\076\060\077\061\111\066" +
    "\074\001\001\000\004\067\315\001\001\000\004\067\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\305\001\001\000\010\017\270\020\271\021\272\001\001" +
    "\000\004\067\266\001\001\000\002\001\001\000\004\002" +
    "\116\001\001\000\004\004\117\001\001\000\004\003\246" +
    "\001\001\000\004\004\121\001\001\000\006\035\123\036" +
    "\122\001\001\000\006\035\222\071\227\001\001\000\002" +
    "\001\001\000\032\022\133\023\153\024\152\025\150\026" +
    "\147\027\146\030\144\031\143\032\142\033\141\034\137" +
    "\053\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\133\033\225\034\137\053\134\001\001\000\002" +
    "\001\001\000\032\022\133\023\223\024\152\025\150\026" +
    "\147\027\146\030\144\031\143\032\142\033\141\034\137" +
    "\053\134\001\001\000\006\035\123\036\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\133\032\220\033\141\034\137\053\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\133\034\215\053\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\022\133" +
    "\024\214\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\030\022\133" +
    "\024\213\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\030\022\133" +
    "\024\160\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\026\022\133\025\212\026\147\027\146\030\144\031" +
    "\143\032\142\033\141\034\137\053\134\001\001\000\026" +
    "\022\133\025\163\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\024\022\133\026\211\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\024\022\133" +
    "\026\210\027\146\030\144\031\143\032\142\033\141\034" +
    "\137\053\134\001\001\000\024\022\133\026\207\027\146" +
    "\030\144\031\143\032\142\033\141\034\137\053\134\001" +
    "\001\000\024\022\133\026\206\027\146\030\144\031\143" +
    "\032\142\033\141\034\137\053\134\001\001\000\024\022" +
    "\133\026\205\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\024\022\133\026\172\027" +
    "\146\030\144\031\143\032\142\033\141\034\137\053\134" +
    "\001\001\000\002\001\001\000\022\022\133\027\204\030" +
    "\144\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\022\022\133\027\175\030\144\031\143\032\142\033" +
    "\141\034\137\053\134\001\001\000\002\001\001\000\020" +
    "\022\133\030\203\031\143\032\142\033\141\034\137\053" +
    "\134\001\001\000\020\022\133\030\202\031\143\032\142" +
    "\033\141\034\137\053\134\001\001\000\020\022\133\030" +
    "\201\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\133\030\217\031\143\032\142\033\141\034" +
    "\137\053\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\231" +
    "\001\001\000\002\001\001\000\042\022\133\023\236\024" +
    "\152\025\150\026\147\027\146\030\144\031\143\032\142" +
    "\033\141\034\137\037\232\050\235\051\233\052\234\053" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\235\051\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\133\023\244\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\022\133\023\247\024\152\025\150\026\147" +
    "\027\146\030\144\031\143\032\142\033\141\034\137\053" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\252\010\251\053\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\022\133\023\256\024\152\025\150\026\147\027\146\030" +
    "\144\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\002\001\001\000\032\022\133\023\260\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\006\007" +
    "\262\053\107\001\001\000\002\001\001\000\004\067\264" +
    "\001\001\000\004\015\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\273\020\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\304\001\001" +
    "\000\002\001\001\000\032\022\133\023\300\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\004\067" +
    "\302\001\001\000\004\015\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\022\133\023\313\024\152\025\150\026\147\027\146" +
    "\030\144\031\143\032\142\033\141\034\137\053\134\001" +
    "\001\000\002\001\001\000\032\022\133\023\312\024\152" +
    "\025\150\026\147\027\146\030\144\031\143\032\142\033" +
    "\141\034\137\053\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\022\133\023\321" +
    "\024\152\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\004\067\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\133\023\335\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\032\022" +
    "\133\023\334\024\152\025\150\026\147\027\146\030\144" +
    "\031\143\032\142\033\141\034\137\053\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\022\133\023\337" +
    "\024\152\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\004\067\341\001\001\000\004\015\342\001\001\000" +
    "\002\001\001\000\032\022\133\023\344\024\152\025\150" +
    "\026\147\027\146\030\144\031\143\032\142\033\141\034" +
    "\137\053\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\022\133\023\347\024\152\025\150\026\147\027" +
    "\146\030\144\031\143\032\142\033\141\034\137\053\134" +
    "\001\001\000\002\001\001\000\004\067\351\001\001\000" +
    "\004\065\352\001\001\000\002\001\001\000\004\064\354" +
    "\001\001\000\006\062\356\063\357\001\001\000\004\067" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\022\133\023\361\024\152\025\150\026\147\027\146\030" +
    "\144\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\004\067\362\001\001\000\004\015\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\022\133\023" +
    "\371\024\152\025\150\026\147\027\146\030\144\031\143" +
    "\032\142\033\141\034\137\053\134\001\001\000\002\001" +
    "\001\000\004\067\373\001\001\000\004\015\374\001\001" +
    "\000\002\001\001\000\012\002\054\074\376\075\053\076" +
    "\052\001\001\000\002\001\001\000\004\067\u0100\001\001" +
    "\000\004\015\u0101\001\001\000\002\001\001\000\004\004" +
    "\u0103\001\001\000\004\003\u0108\001\001\000\004\004\u0105" +
    "\001\001\000\006\035\123\036\u0106\001\001\000\006\035" +
    "\222\071\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\054\074\u010e\075\053\076\052" +
    "\001\001\000\002\001\001\000\004\067\u0110\001\001\000" +
    "\004\015\u0111\001\001\000\002\001\001\000\012\002\054" +
    "\074\u0113\075\053\076\052\001\001\000\002\001\001\000" +
    "\004\067\u0115\001\001\000\004\015\u0116\001\001\000\002" +
    "\001\001\000\004\004\u0118\001\001\000\004\003\u011d\001" +
    "\001\000\004\004\u011a\001\001\000\006\035\123\036\u011b" +
    "\001\001\000\006\035\222\071\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u0120" +
    "\001\001\000\004\015\u0121\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AudioParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AudioParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AudioParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private ErrorHandler errorHandler;

	private List<Integer> ind;

	public AudioParser(AudioLex lex) {
		super(lex);
		this.errorHandler = new ErrorHandler();
		this.ind = new ArrayList<>();
	}

	public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setError((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AudioParser$actions {
  private final AudioParser parser;

  /** Constructor */
  CUP$AudioParser$actions(AudioParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action_part00000000(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AudioParser$result;

      /* select the action based on the action number */
      switch (CUP$AudioParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		RESULT = start_val;
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AudioParser$parser.done_parsing();
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio1 ::= eol_ TRACK ID extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = list_i;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // extends_ ::= EXTENDS id_list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extends_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bod ::= INDENT m_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bod ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // m_body ::= m_body main_body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // m_body ::= main_body 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_body ::= principal 
            {
              List<Instruction> RESULT =null;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Principal principal = (Principal)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(principal); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_body ::= function 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= statement eol 
            {
              List<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> statement = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_body ::= array_statement eol 
            {
              List<Instruction> RESULT =null;
		int array_statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> array_statement = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(array_statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_body ::= INDENT f_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_body ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // f_body ::= f_body body 
            {
              List<Instruction> RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_ins; RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // f_body ::= body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> list = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= assignment eol 
            {
              List<Instruction> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(assign); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= array_statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> list = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		  RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body ::= message eol 
            {
              List<Instruction> RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Message message = (Message)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(message); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= control 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body ::= continue_ eol 
            {
              List<Instruction> RESULT =null;
		int continue_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int continue_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Continue continue_ = (Continue)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(continue_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body ::= exit_ eol 
            {
              List<Instruction> RESULT =null;
		int exit_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int exit_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Exit exit_ = (Exit)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(exit_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= KEEP VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_function ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement_function",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= EQUAL a 
            {
              Operation RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = operation; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_list ::= id_list COMMA ID 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					list.add(token);
					RESULT = list;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id_list ::= ID 
            {
              List<Token> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Token>();
					RESULT.add(token);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= DOB 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= BOOL 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= CAD 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= CAR 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment ::= ID EQUAL a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(Assignment.TypeA.EQUAL, token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= ID PLUS_EQ a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), operation, op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_EQ, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= ID PLUS_PLUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_PLUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment ::= ID MINUS_MINUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.MINUS_MINUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= l EQUAL a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAssignment(array_access, operation, Assignment.TypeA.EQUAL); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment ::= l PLUS_EQ a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), operation, op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_EQ);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment ::= l PLUS_PLUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_PLUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= l MINUS_MINUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.MINUS_MINUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l ::= ID dimensions 
            {
              ArrayAccess RESULT =null;
		int token_idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int token_idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token_id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAccess(token_id, list_array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_statement ::= KEEP VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_statement ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_statement_function ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dimensions ::= dimensions dimension 
            {
              List<ArrayIndex> RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_op = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dimensions ::= dimension 
            {
              List<ArrayIndex> RESULT =null;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dimension ::= LBRACKET a RBRACKET 
            {
              ArrayIndex RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token left = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token right = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayIndex(left, operation, right); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimension",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_value ::= EQUAL list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",55, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_value ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",55, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= LBRACE value_list RBRACE 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list_op = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Operation.class, list_op.size());
					ind.add(list_op.size());
					// System.out.println(list_op.size());
					for(int i = 0; i < list_op.size(); i++) {
						Array.set(RESULT, i, list_op.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= LBRACE list_fn RBRACE 
            {
              Object RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Object.class, list_fn.size());
					for(int i = 0; i < list_fn.size(); i++) {
						Array.set(RESULT, i, list_fn.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_fn ::= list_fn COMMA fn 
            {
              List<Object> RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_fn; RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_fn ::= fn 
            {
              List<Object> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fn ::= list 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list_op = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("fn",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value_list ::= value_list COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value_list ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // a ::= a OR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.OR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a ::= a NOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a ::= a XOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.XOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // a ::= b 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b ::= b AND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.AND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // b ::= b NAND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NAND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // b ::= c 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c ::= c EQEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.EQEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c ::= c NEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c ::= c GREATER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // c ::= c SMALLER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SMALLER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c ::= c GRTREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c ::= c SMLLREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.LESS_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // c ::= d 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // d ::= d PLUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUM, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // d ::= d MINUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUBTRACTION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // d ::= e 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // e ::= e TIMES f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MULTIPLICATION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // e ::= e DIVIDE f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT =new Operation(OperationType.DIVISION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // e ::= e MOD f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MOD, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // e ::= f 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // f ::= g POW f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.POW, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // f ::= g 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // g ::= MINUS h 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.UMINUS, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // g ::= h 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // h ::= NOT i 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOT, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // h ::= i 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // i ::= NULL j 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NULL, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // i ::= j 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // j ::= INTEGER 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.INTEGER, new Variable(var, Var.INTEGER, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // j ::= DECIMAL 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.DOUBLE, new Variable(var, Var.DOUBLE, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // j ::= STR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.STRING, new Variable(var, Var.STRING, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // j ::= CHAR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.CHAR, new Variable(var, Var.CHAR, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // j ::= boolean_val 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.BOOLEAN, var); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // j ::= ID 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ID, new Variable(token)); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // j ::= l 
            {
              Operation RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ARRAY_ACCESS, array_access); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // j ::= LPAREN a RPAREN 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation var = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = var; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // eol ::= EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // eol_ ::= eol_ EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eol_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // control ::= list_if 
            {
              Instruction RESULT =null;
		int ifInsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int ifInsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		IfInstruction ifIns = (IfInstruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = ifIns; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // control ::= for_ 
            {
              Instruction RESULT =null;
		int for_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int for_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		For for_ = (For)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = for_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // control ::= while_ 
            {
              Instruction RESULT =null;
		int while_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int while_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		While while_ = (While)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = while_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // control ::= do_while 
            {
              Instruction RESULT =null;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		DoWhile do_while = (DoWhile)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = do_while; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // control ::= switch_ 
            {
              Instruction RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Switch sw = (Switch)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = sw; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // list_if ::= if_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list_if ::= if_ else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list_if ::= if_ list_else_if 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list_if ::= if_ list_else_if else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_ ::= IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // else_ ::= ELSE eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_else_if ::= list_else_if else_if 
            {
              List<If> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_else_if ::= else_if 
            {
              List<If> RESULT =null;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_if ::= ELSE IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_ ::= FOR LPAREN for_assign SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_assign ::= INT ID EQUAL a 
            {
              Assignment RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(type, id, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_assign ::= assignment 
            {
              Assignment RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = assign; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_ ::= WHILE LPAREN a RPAREN eol function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // do_while ::= DO_WHILE eol function_body WHILE LPAREN a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		
					RESULT = new DoWhile(info, token, list_ins, condition);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_ ::= SWITCH LPAREN a RPAREN eol switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // switch_body ::= INDENT case_list default_ DEDENT 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int default_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int default_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Case default_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = list;
					if(default_ != null) {
						RESULT.add(default_);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // switch_body ::= 
            {
              List<Case> RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // case_list ::= case_list case_ 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int case_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int case_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Case case_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(case_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_list ::= 
            {
              List<Case> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_ ::= CASE a eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, operation, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // default_ ::= DEFAULT eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, null, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // default_ ::= 
            {
              Case RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exit_ ::= EXIT 
            {
              Exit RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Exit(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("exit_",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // continue_ ::= CONTINUE 
            {
              Continue RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Continue(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("continue_",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // return_ ::= RETURN a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("return_",56, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function ::= ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function ::= KEEP type ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function ::= KEEP ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function ::= type ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // principal ::= MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new Principal(list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // message ::= MSG LPAREN a RPAREN 
            {
              Message RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new Message(token, operation);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // params_f ::= params 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",58, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // params_f ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",58, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // params ::= params COMMA param 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // params ::= param 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // param ::= type ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("param",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AudioParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
              return CUP$AudioParser$do_action_part00000000(
                               CUP$AudioParser$act_num,
                               CUP$AudioParser$parser,
                               CUP$AudioParser$stack,
                               CUP$AudioParser$top);
    }
}

}
