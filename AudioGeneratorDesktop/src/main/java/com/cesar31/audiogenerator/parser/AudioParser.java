
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AudioParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AudioParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AudioParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AudioParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AudioParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\056\007\000\002\057" +
    "\004\000\002\057\002\000\002\060\005\000\002\060\003" +
    "\000\002\062\003\000\002\062\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\002\000\002\010\011" +
    "\000\002\024\004\000\002\024\002\000\002\022\005\000" +
    "\002\022\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\026" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\005\000" +
    "\002\025\004\000\002\025\004\000\002\042\004\000\002" +
    "\011\013\000\002\013\004\000\002\013\003\000\002\012" +
    "\005\000\002\014\004\000\002\014\002\000\002\016\005" +
    "\000\002\016\005\000\002\020\005\000\002\020\003\000" +
    "\002\017\003\000\002\015\005\000\002\015\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\003\000\002\034\005\000\002\034\003\000" +
    "\002\035\004\000\002\035\003\000\002\036\004\000\002" +
    "\036\003\000\002\037\004\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\005\000\002\041\003\000\002\041\003\000\002" +
    "\023\003\000\002\023\002\000\002\005\004\000\002\005" +
    "\003\000\002\007\004\000\002\007\003\000\002\006\004" +
    "\000\002\006\002\000\002\045\010\000\002\046\005\000" +
    "\002\047\011\000\002\051\014\000\002\052\007\000\002" +
    "\052\003\000\002\053\010\000\002\055\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\004\uffa0\125\uffa0\001\002\000\006\004" +
    "\007\125\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\062\011\001\002\000\006\004" +
    "\uffa1\125\uffa1\001\002\000\010\002\ufffe\005\013\125\ufffe" +
    "\001\002\000\006\002\ufff0\125\ufff0\001\002\000\004\062" +
    "\014\001\002\000\010\002\ufffc\103\ufffc\125\ufffc\001\002" +
    "\000\010\002\uffff\103\016\125\uffff\001\002\000\004\062" +
    "\017\001\002\000\010\002\ufffd\103\ufffd\125\ufffd\001\002" +
    "\000\006\002\ufffb\125\025\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufff7\125\ufff7\001\002\000\010\002\ufffa" +
    "\065\035\125\036\001\002\000\006\002\ufff5\125\ufff5\001" +
    "\002\000\010\002\uffa2\065\uffa2\125\uffa2\001\002\000\006" +
    "\002\ufff2\125\ufff2\001\002\000\006\002\ufff3\125\ufff3\001" +
    "\002\000\006\002\ufff9\125\ufff9\001\002\000\006\002\ufff6" +
    "\125\ufff6\001\002\000\006\002\ufff4\125\ufff4\001\002\000" +
    "\006\002\ufff1\125\ufff1\001\002\000\006\002\ufff8\125\ufff8" +
    "\001\002\000\024\006\uffa4\007\uffa4\020\uffa4\021\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\062\uffa4\065\uffa4\001\002\000\010" +
    "\002\uffa3\065\uffa3\125\uffa3\001\002\000\024\006\051\007" +
    "\uffa6\020\045\021\046\026\042\027\041\030\052\062\047" +
    "\065\050\001\002\000\004\007\221\001\002\000\004\122" +
    "\216\001\002\000\004\122\201\001\002\000\006\002\uffe5" +
    "\125\uffe5\001\002\000\012\104\176\113\174\114\173\115" +
    "\175\001\002\000\004\122\170\001\002\000\010\002\uff9e" +
    "\020\164\125\uff9e\001\002\000\014\104\056\113\054\114" +
    "\053\115\055\120\061\001\002\000\024\006\uffa5\007\uffa5" +
    "\020\uffa5\021\uffa5\026\uffa5\027\uffa5\030\uffa5\062\uffa5\065" +
    "\uffa5\001\002\000\004\007\uffa7\001\002\000\006\002\uff98" +
    "\125\uff98\001\002\000\012\002\uffe2\123\uffe2\124\uffe2\125" +
    "\uffe2\001\002\000\030\015\065\016\071\062\067\063\102" +
    "\064\062\074\106\102\064\106\073\122\066\126\076\127" +
    "\063\001\002\000\012\002\uffe1\123\uffe1\124\uffe1\125\uffe1" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\074\002\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\073\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110" +
    "\uffdc\111\uffdc\112\uffdc\113\uffdc\114\uffdc\115\uffdc\117\uffdc" +
    "\120\061\121\uffdc\123\uffdc\124\uffdc\125\uffdc\001\002\000" +
    "\074\002\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\103" +
    "\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9" +
    "\112\uffd9\113\uffd9\114\uffd9\115\uffd9\117\uffd9\120\uffd9\121" +
    "\uffd9\123\uffd9\124\uffd9\125\uffd9\001\002\000\030\015\065" +
    "\016\071\062\067\063\102\064\062\074\106\102\064\106" +
    "\073\122\066\126\076\127\063\001\002\000\062\002\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0\105\uffb0" +
    "\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\117\uffb0\121" +
    "\uffb0\123\uffb0\124\uffb0\125\uffb0\001\002\000\062\002\uffae" +
    "\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\101\uffae\103\uffae\105\uffae" +
    "\106\uffae\107\uffae\110\uffae\111\uffae\112\uffae\117\uffae\121" +
    "\uffae\123\uffae\124\uffae\125\uffae\001\002\000\024\015\065" +
    "\016\071\062\067\063\102\064\062\074\106\122\066\126" +
    "\076\127\063\001\002\000\062\002\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\100\uffa9\101\uffa9\103\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\117\uffa9\121\uffa9\123\uffa9\124" +
    "\uffa9\125\uffa9\001\002\000\030\015\065\016\071\062\067" +
    "\063\102\064\062\074\106\102\064\106\073\122\066\126" +
    "\076\127\063\001\002\000\064\002\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\075\uffac\076\uffac\077" +
    "\uffac\100\uffac\101\uffac\103\uffac\105\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\117\uffac\120\061\121\uffac\123" +
    "\uffac\124\uffac\125\uffac\001\002\000\062\002\uffad\066\uffad" +
    "\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\075\uffad\076" +
    "\uffad\077\uffad\100\uffad\101\uffad\103\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\111\uffad\112\uffad\117\uffad\121\uffad\123" +
    "\uffad\124\uffad\125\uffad\001\002\000\062\002\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\075\uffa8\076" +
    "\uffa8\077\uffa8\100\uffa8\101\uffa8\103\uffa8\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\117\uffa8\121\uffa8\123" +
    "\uffa8\124\uffa8\125\uffa8\001\002\000\062\002\uffab\066\uffab" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\075\uffab\076" +
    "\uffab\077\uffab\100\uffab\101\uffab\103\uffab\105\uffab\106\uffab" +
    "\107\uffab\110\uffab\111\uffab\112\uffab\117\uffab\121\uffab\123" +
    "\uffab\124\uffab\125\uffab\001\002\000\026\015\065\016\071" +
    "\062\067\063\102\064\062\074\106\102\064\122\066\126" +
    "\076\127\063\001\002\000\062\002\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\103\uffb2\105\uffb2\106\uffb2\107\uffb2" +
    "\110\uffb2\111\uffb2\112\uffb2\117\uffb2\121\uffb2\123\uffb2\124" +
    "\uffb2\125\uffb2\001\002\000\062\002\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\103\uffb4\105\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\117\uffb4\121\uffb4\123\uffb4\124" +
    "\uffb4\125\uffb4\001\002\000\062\002\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\103\uffaf\105\uffaf\106\uffaf\107\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\117\uffaf\121\uffaf\123\uffaf\124" +
    "\uffaf\125\uffaf\001\002\000\062\002\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\103\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\111\uffb6\112\uffb6\117\uffb6\121\uffb6\123\uffb6\124" +
    "\uffb6\125\uffb6\001\002\000\062\002\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\103\uffb8\105\uffb8\106\uffb8\107\uffb8" +
    "\110\uffb8\111\uffb8\112\153\117\uffb8\121\uffb8\123\uffb8\124" +
    "\uffb8\125\uffb8\001\002\000\060\002\uffba\066\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\075\uffba\076\uffba\077" +
    "\uffba\100\uffba\101\uffba\103\uffba\105\uffba\106\uffba\107\uffba" +
    "\110\uffba\111\uffba\117\uffba\121\uffba\123\uffba\124\uffba\125" +
    "\uffba\001\002\000\062\002\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\073\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\103\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\111\uffb1\112\uffb1\117\uffb1\121\uffb1\123\uffb1\124\uffb1\125" +
    "\uffb1\001\002\000\060\002\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\103\uffbe\105\uffbe\106\uffbe\107\135\110\134" +
    "\111\133\117\uffbe\121\uffbe\123\uffbe\124\uffbe\125\uffbe\001" +
    "\002\000\052\002\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101" +
    "\uffc1\103\uffc1\105\130\106\131\117\uffc1\121\uffc1\123\uffc1" +
    "\124\uffc1\125\uffc1\001\002\000\046\002\uffc8\066\126\067" +
    "\125\070\121\071\123\072\124\073\122\075\uffc8\076\uffc8" +
    "\077\uffc8\100\uffc8\101\uffc8\103\uffc8\117\uffc8\121\uffc8\123" +
    "\uffc8\124\uffc8\125\uffc8\001\002\000\022\015\065\016\071" +
    "\062\067\063\102\064\062\122\066\126\076\127\063\001" +
    "\002\000\032\002\uffcb\075\117\076\116\077\uffcb\100\uffcb" +
    "\101\uffcb\103\uffcb\117\uffcb\121\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\001\002\000\012\077\114\100\111\101\113\121\112" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\074\002\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8" +
    "\101\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110" +
    "\uffd8\111\uffd8\112\uffd8\113\uffd8\114\uffd8\115\uffd8\117\uffd8" +
    "\120\uffd8\121\uffd8\123\uffd8\124\uffd8\125\uffd8\001\002\000" +
    "\030\015\065\016\071\062\067\063\102\064\062\074\106" +
    "\102\064\106\073\122\066\126\076\127\063\001\002\000" +
    "\030\015\065\016\071\062\067\063\102\064\062\074\106" +
    "\102\064\106\073\122\066\126\076\127\063\001\002\000" +
    "\032\002\uffce\075\117\076\116\077\uffce\100\uffce\101\uffce" +
    "\103\uffce\117\uffce\121\uffce\123\uffce\124\uffce\125\uffce\001" +
    "\002\000\030\015\065\016\071\062\067\063\102\064\062" +
    "\074\106\102\064\106\073\122\066\126\076\127\063\001" +
    "\002\000\030\015\065\016\071\062\067\063\102\064\062" +
    "\074\106\102\064\106\073\122\066\126\076\127\063\001" +
    "\002\000\046\002\uffca\066\126\067\125\070\121\071\123" +
    "\072\124\073\122\075\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\103\uffca\117\uffca\121\uffca\123\uffca\124\uffca\125\uffca" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\030\015\065\016\071\062\067\063\102\064" +
    "\062\074\106\102\064\106\073\122\066\126\076\127\063" +
    "\001\002\000\052\002\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\103\uffc7\105\130\106\131\117\uffc7\121\uffc7\123" +
    "\uffc7\124\uffc7\125\uffc7\001\002\000\030\015\065\016\071" +
    "\062\067\063\102\064\062\074\106\102\064\106\073\122" +
    "\066\126\076\127\063\001\002\000\030\015\065\016\071" +
    "\062\067\063\102\064\062\074\106\102\064\106\073\122" +
    "\066\126\076\127\063\001\002\000\060\002\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\075\uffbf\076" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\103\uffbf\105\uffbf\106\uffbf" +
    "\107\135\110\134\111\133\117\uffbf\121\uffbf\123\uffbf\124" +
    "\uffbf\125\uffbf\001\002\000\030\015\065\016\071\062\067" +
    "\063\102\064\062\074\106\102\064\106\073\122\066\126" +
    "\076\127\063\001\002\000\030\015\065\016\071\062\067" +
    "\063\102\064\062\074\106\102\064\106\073\122\066\126" +
    "\076\127\063\001\002\000\030\015\065\016\071\062\067" +
    "\063\102\064\062\074\106\102\064\106\073\122\066\126" +
    "\076\127\063\001\002\000\060\002\uffbd\066\uffbd\067\uffbd" +
    "\070\uffbd\071\uffbd\072\uffbd\073\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\103\uffbd\105\uffbd\106\uffbd\107\uffbd" +
    "\110\uffbd\111\uffbd\117\uffbd\121\uffbd\123\uffbd\124\uffbd\125" +
    "\uffbd\001\002\000\060\002\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\103\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc" +
    "\111\uffbc\117\uffbc\121\uffbc\123\uffbc\124\uffbc\125\uffbc\001" +
    "\002\000\060\002\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101" +
    "\uffbb\103\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb" +
    "\117\uffbb\121\uffbb\123\uffbb\124\uffbb\125\uffbb\001\002\000" +
    "\060\002\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\103" +
    "\uffc0\105\uffc0\106\uffc0\107\135\110\134\111\133\117\uffc0" +
    "\121\uffc0\123\uffc0\124\uffc0\125\uffc0\001\002\000\052\002" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\103\uffc6\105" +
    "\130\106\131\117\uffc6\121\uffc6\123\uffc6\124\uffc6\125\uffc6" +
    "\001\002\000\052\002\uffc3\066\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3" +
    "\101\uffc3\103\uffc3\105\130\106\131\117\uffc3\121\uffc3\123" +
    "\uffc3\124\uffc3\125\uffc3\001\002\000\052\002\uffc4\066\uffc4" +
    "\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\075\uffc4\076" +
    "\uffc4\077\uffc4\100\uffc4\101\uffc4\103\uffc4\105\130\106\131" +
    "\117\uffc4\121\uffc4\123\uffc4\124\uffc4\125\uffc4\001\002\000" +
    "\052\002\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\103" +
    "\uffc2\105\130\106\131\117\uffc2\121\uffc2\123\uffc2\124\uffc2" +
    "\125\uffc2\001\002\000\052\002\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\103\uffc5\105\130\106\131\117\uffc5\121" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\001\002\000\046\002\uffc9" +
    "\066\126\067\125\070\121\071\123\072\124\073\122\075" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\103\uffc9\117\uffc9" +
    "\121\uffc9\123\uffc9\124\uffc9\125\uffc9\001\002\000\032\002" +
    "\uffcc\075\117\076\116\077\uffcc\100\uffcc\101\uffcc\103\uffcc" +
    "\117\uffcc\121\uffcc\123\uffcc\124\uffcc\125\uffcc\001\002\000" +
    "\032\002\uffcd\075\117\076\116\077\uffcd\100\uffcd\101\uffcd" +
    "\103\uffcd\117\uffcd\121\uffcd\123\uffcd\124\uffcd\125\uffcd\001" +
    "\002\000\062\002\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\103\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3" +
    "\112\uffb3\117\uffb3\121\uffb3\123\uffb3\124\uffb3\125\uffb3\001" +
    "\002\000\030\015\065\016\071\062\067\063\102\064\062" +
    "\074\106\102\064\106\073\122\066\126\076\127\063\001" +
    "\002\000\060\002\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\073\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101" +
    "\uffb9\103\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9" +
    "\117\uffb9\121\uffb9\123\uffb9\124\uffb9\125\uffb9\001\002\000" +
    "\062\002\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7" +
    "\117\uffb7\121\uffb7\123\uffb7\124\uffb7\125\uffb7\001\002\000" +
    "\012\077\114\100\111\101\113\123\157\001\002\000\062" +
    "\002\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\103\uffaa" +
    "\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\117" +
    "\uffaa\121\uffaa\123\uffaa\124\uffaa\125\uffaa\001\002\000\062" +
    "\002\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\103\uffb5" +
    "\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\117" +
    "\uffb5\121\uffb5\123\uffb5\124\uffb5\125\uffb5\001\002\000\074" +
    "\002\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\103\uffda" +
    "\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112" +
    "\uffda\113\uffda\114\uffda\115\uffda\117\uffda\120\uffda\121\uffda" +
    "\123\uffda\124\uffda\125\uffda\001\002\000\020\002\uffe4\077" +
    "\114\100\111\101\113\123\uffe4\124\uffe4\125\uffe4\001\002" +
    "\000\020\002\uffe3\077\114\100\111\101\113\123\uffe3\124" +
    "\uffe3\125\uffe3\001\002\000\004\122\165\001\002\000\030" +
    "\015\065\016\071\062\067\063\102\064\062\074\106\102" +
    "\064\106\073\122\066\126\076\127\063\001\002\000\012" +
    "\077\114\100\111\101\113\123\167\001\002\000\006\002" +
    "\uff9d\125\uff9d\001\002\000\030\015\065\016\071\062\067" +
    "\063\102\064\062\074\106\102\064\106\073\122\066\126" +
    "\076\127\063\001\002\000\012\077\114\100\111\101\113" +
    "\123\172\001\002\000\006\002\uff9f\125\uff9f\001\002\000" +
    "\012\002\uffde\123\uffde\124\uffde\125\uffde\001\002\000\030" +
    "\015\065\016\071\062\067\063\102\064\062\074\106\102" +
    "\064\106\073\122\066\126\076\127\063\001\002\000\012" +
    "\002\uffdd\123\uffdd\124\uffdd\125\uffdd\001\002\000\030\015" +
    "\065\016\071\062\067\063\102\064\062\074\106\102\064" +
    "\106\073\122\066\126\076\127\063\001\002\000\020\002" +
    "\uffe0\077\114\100\111\101\113\123\uffe0\124\uffe0\125\uffe0" +
    "\001\002\000\020\002\uffdf\077\114\100\111\101\113\123" +
    "\uffdf\124\uffdf\125\uffdf\001\002\000\006\007\203\062\047" +
    "\001\002\000\004\124\211\001\002\000\004\010\205\001" +
    "\002\000\004\124\uff9a\001\002\000\004\062\206\001\002" +
    "\000\004\104\207\001\002\000\030\015\065\016\071\062" +
    "\067\063\102\064\062\074\106\102\064\106\073\122\066" +
    "\126\076\127\063\001\002\000\012\077\114\100\111\101" +
    "\113\124\uff9b\001\002\000\030\015\065\016\071\062\067" +
    "\063\102\064\062\074\106\102\064\106\073\122\066\126" +
    "\076\127\063\001\002\000\012\077\114\100\111\101\113" +
    "\124\213\001\002\000\004\062\047\001\002\000\004\123" +
    "\215\001\002\000\006\002\uff9c\125\uff9c\001\002\000\030" +
    "\015\065\016\071\062\067\063\102\064\062\074\106\102" +
    "\064\106\073\122\066\126\076\127\063\001\002\000\012" +
    "\077\114\100\111\101\113\123\220\001\002\000\006\002" +
    "\uff99\125\uff99\001\002\000\014\010\226\011\224\012\225" +
    "\013\227\014\222\001\002\000\006\017\uffe7\062\uffe7\001" +
    "\002\000\006\017\232\062\230\001\002\000\006\017\uffe9" +
    "\062\uffe9\001\002\000\006\017\uffe8\062\uffe8\001\002\000" +
    "\006\017\uffea\062\uffea\001\002\000\006\017\uffe6\062\uffe6" +
    "\001\002\000\014\002\uffeb\103\uffeb\104\uffeb\120\uffeb\125" +
    "\uffeb\001\002\000\012\002\uffed\103\234\104\256\125\uffed" +
    "\001\002\000\004\062\230\001\002\000\006\103\234\120" +
    "\061\001\002\000\004\062\255\001\002\000\012\002\uffd6" +
    "\104\236\120\061\125\uffd6\001\002\000\004\116\240\001" +
    "\002\000\006\002\uffdb\125\uffdb\001\002\000\032\015\065" +
    "\016\071\062\067\063\102\064\062\074\106\102\064\106" +
    "\073\116\240\122\066\126\076\127\063\001\002\000\006" +
    "\002\uffd7\125\uffd7\001\002\000\006\103\252\117\253\001" +
    "\002\000\006\103\uffd2\117\uffd2\001\002\000\006\103\247" +
    "\117\250\001\002\000\006\103\uffd1\117\uffd1\001\002\000" +
    "\014\077\114\100\111\101\113\103\uffcf\117\uffcf\001\002" +
    "\000\004\116\240\001\002\000\012\002\uffd4\103\uffd4\117" +
    "\uffd4\125\uffd4\001\002\000\006\103\uffd3\117\uffd3\001\002" +
    "\000\030\015\065\016\071\062\067\063\102\064\062\074" +
    "\106\102\064\106\073\122\066\126\076\127\063\001\002" +
    "\000\012\002\uffd5\103\uffd5\117\uffd5\125\uffd5\001\002\000" +
    "\014\077\114\100\111\101\113\103\uffd0\117\uffd0\001\002" +
    "\000\014\002\uffec\103\uffec\104\uffec\120\uffec\125\uffec\001" +
    "\002\000\030\015\065\016\071\062\067\063\102\064\062" +
    "\074\106\102\064\106\073\122\066\126\076\127\063\001" +
    "\002\000\006\002\uffef\125\uffef\001\002\000\014\002\uffee" +
    "\077\114\100\111\101\113\125\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\006\003\056\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\011\001\001\000\006\061" +
    "\017\062\020\001\001\000\004\060\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\022\010\027\011\021\026\033\045\023" +
    "\046\031\047\026\051\030\053\025\055\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\037\025\042\042\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\057\013\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\027\162\030\106\031\104\032\103\033" +
    "\102\034\100\035\077\036\076\037\074\040\073\041\067" +
    "\042\071\001\001\000\002\001\001\000\032\027\161\030" +
    "\106\031\104\032\103\033\102\034\100\035\077\036\076" +
    "\037\074\040\073\041\067\042\071\001\001\000\004\012" +
    "\160\001\001\000\002\001\001\000\032\027\107\030\106" +
    "\031\104\032\103\033\102\034\100\035\077\036\076\037" +
    "\074\040\073\041\067\042\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\037\157\040\073\041\067\042" +
    "\071\001\001\000\002\001\001\000\032\027\155\030\106" +
    "\031\104\032\103\033\102\034\100\035\077\036\076\037" +
    "\074\040\073\041\067\042\071\001\001\000\006\012\057" +
    "\013\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\036\154\037\074\040\073\041\067" +
    "\042\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\040\151\041\067\042\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\030" +
    "\150\031\104\032\103\033\102\034\100\035\077\036\076" +
    "\037\074\040\073\041\067\042\071\001\001\000\002\001" +
    "\001\000\030\030\147\031\104\032\103\033\102\034\100" +
    "\035\077\036\076\037\074\040\073\041\067\042\071\001" +
    "\001\000\030\030\114\031\104\032\103\033\102\034\100" +
    "\035\077\036\076\037\074\040\073\041\067\042\071\001" +
    "\001\000\002\001\001\000\026\031\146\032\103\033\102" +
    "\034\100\035\077\036\076\037\074\040\073\041\067\042" +
    "\071\001\001\000\026\031\117\032\103\033\102\034\100" +
    "\035\077\036\076\037\074\040\073\041\067\042\071\001" +
    "\001\000\002\001\001\000\024\032\145\033\102\034\100" +
    "\035\077\036\076\037\074\040\073\041\067\042\071\001" +
    "\001\000\024\032\144\033\102\034\100\035\077\036\076" +
    "\037\074\040\073\041\067\042\071\001\001\000\024\032" +
    "\143\033\102\034\100\035\077\036\076\037\074\040\073" +
    "\041\067\042\071\001\001\000\024\032\142\033\102\034" +
    "\100\035\077\036\076\037\074\040\073\041\067\042\071" +
    "\001\001\000\024\032\141\033\102\034\100\035\077\036" +
    "\076\037\074\040\073\041\067\042\071\001\001\000\024" +
    "\032\126\033\102\034\100\035\077\036\076\037\074\040" +
    "\073\041\067\042\071\001\001\000\002\001\001\000\022" +
    "\033\140\034\100\035\077\036\076\037\074\040\073\041" +
    "\067\042\071\001\001\000\022\033\131\034\100\035\077" +
    "\036\076\037\074\040\073\041\067\042\071\001\001\000" +
    "\002\001\001\000\020\034\137\035\077\036\076\037\074" +
    "\040\073\041\067\042\071\001\001\000\020\034\136\035" +
    "\077\036\076\037\074\040\073\041\067\042\071\001\001" +
    "\000\020\034\135\035\077\036\076\037\074\040\073\041" +
    "\067\042\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\034\153\035\077\036\076" +
    "\037\074\040\073\041\067\042\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\027\165\030\106" +
    "\031\104\032\103\033\102\034\100\035\077\036\076\037" +
    "\074\040\073\041\067\042\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\027\170\030\106\031\104\032" +
    "\103\033\102\034\100\035\077\036\076\037\074\040\073" +
    "\041\067\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\177\030\106\031\104" +
    "\032\103\033\102\034\100\035\077\036\076\037\074\040" +
    "\073\041\067\042\071\001\001\000\002\001\001\000\032" +
    "\027\176\030\106\031\104\032\103\033\102\034\100\035" +
    "\077\036\076\037\074\040\073\041\067\042\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\203\042" +
    "\043\052\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\027\207\030\106\031\104\032\103\033\102\034\100" +
    "\035\077\036\076\037\074\040\073\041\067\042\071\001" +
    "\001\000\002\001\001\000\032\027\211\030\106\031\104" +
    "\032\103\033\102\034\100\035\077\036\076\037\074\040" +
    "\073\041\067\042\071\001\001\000\002\001\001\000\006" +
    "\025\213\042\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\027\216\030\106\031\104\032\103\033\102" +
    "\034\100\035\077\036\076\037\074\040\073\041\067\042" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\222\001\001\000\002\001\001\000\004\022\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\256\001" +
    "\001\000\004\022\232\001\001\000\006\012\057\013\234" +
    "\001\001\000\002\001\001\000\006\012\160\014\236\001" +
    "\001\000\004\016\240\001\001\000\002\001\001\000\042" +
    "\015\241\016\244\017\242\020\243\027\245\030\106\031" +
    "\104\032\103\033\102\034\100\035\077\036\076\037\074" +
    "\040\073\041\067\042\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\244\017\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\027\253" +
    "\030\106\031\104\032\103\033\102\034\100\035\077\036" +
    "\076\037\074\040\073\041\067\042\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\027" +
    "\257\030\106\031\104\032\103\033\102\034\100\035\077" +
    "\036\076\037\074\040\073\041\067\042\071\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AudioParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AudioParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AudioParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public AudioParser(AudioLex lex) {
		super(lex);
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			// expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AudioParser$actions {
  private final AudioParser parser;

  /** Constructor */
  CUP$AudioParser$actions(AudioParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action_part00000000(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AudioParser$result;

      /* select the action based on the action number */
      switch (CUP$AudioParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		RESULT = start_val;
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AudioParser$parser.done_parsing();
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio1 ::= eol TRACK ID extends_ bod 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // extends_ ::= EXTENDS list_id 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extends_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_id ::= list_id COMMA ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_id",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_id ::= ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_id",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bod ::= body 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bod ::= body eol_ 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= body statement 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= body assign 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= body array_statement 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= body for_ 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= body if_ 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= body else_ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= body else_if 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= body while_ 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= body do_while 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= eol_ tab keep VAR type id_list value 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= EQUAL a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // id_list ::= id_list COMMA ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // id_list ::= ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= INT 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= DOB 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= CAD 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= CAR 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assign ::= eol_ tab assignment 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assign",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment ::= ID EQUAL a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= ID PLUS_EQ a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment ::= ID PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment ::= ID MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignment ::= l EQUAL a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment ::= l PLUS_EQ a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment ::= l PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= l MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // l ::= ID dimensions 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("l",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // array_statement ::= eol_ tab keep VAR type ARRAY id_list dimensions array_value 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dimensions ::= dimensions dimension 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dimensions ::= dimension 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dimension ::= LBRACKET a RBRACKET 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimension",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array_value ::= EQUAL list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_value ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list ::= LBRACE value_list RBRACE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list ::= LBRACE list_fn RBRACE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_fn ::= list_fn COMMA fn 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_fn ::= fn 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fn ::= list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("fn",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value_list ::= value_list COMMA a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value_list ::= a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // a ::= a OR b 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // a ::= a NOR b 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // a ::= a XOR b 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // a ::= b 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // b ::= b AND c 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // b ::= b NAND c 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // b ::= c 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c ::= c EQEQ d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // c ::= c NEQ d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // c ::= c GREATER d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c ::= c SMALLER d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c ::= c GRTREQ d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c ::= c SMLLREQ d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c ::= d 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // d ::= d PLUS e 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // d ::= d MINUS e 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // d ::= e 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // e ::= e TIMES f 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // e ::= e DIVIDE f 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // e ::= e MOD f 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // e ::= f 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // f ::= g POW f 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // f ::= g 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // g ::= MINUS h 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // g ::= h 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // h ::= NOT i 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // h ::= i 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // i ::= NULL j 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // i ::= j 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // j ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // j ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // j ::= STR 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // j ::= CHAR 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // j ::= boolean_val 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // j ::= ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // j ::= l 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // j ::= LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolean_val ::= TRUE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolean_val ::= FALSE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // keep ::= KEEP 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("keep",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // keep ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("keep",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tab ::= tab TAB 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("tab",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tab ::= TAB 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("tab",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // eol_ ::= eol_ EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // eol_ ::= EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // eol ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_ ::= eol_ tab IF LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // else_ ::= eol_ tab ELSE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_if ::= eol_ tab ELSE IF LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_ ::= eol_ tab FOR LPAREN for_assig SEMI a SEMI assignment RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_assig ::= VAR INT ID EQUAL a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assig",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_assig ::= assignment 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assig",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while_ ::= eol_ tab WHILE LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // do_while ::= eol_ tab DO_WHILE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AudioParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
              return CUP$AudioParser$do_action_part00000000(
                               CUP$AudioParser$act_num,
                               CUP$AudioParser$parser,
                               CUP$AudioParser$stack,
                               CUP$AudioParser$top);
    }
}

}
