
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.lang.reflect.Array;
import com.cesar31.audiogenerator.instruction.*;
import com.cesar31.audiogenerator.control.*;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AudioParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AudioParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AudioParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AudioParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AudioParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\014\010\000\002\106" +
    "\004\000\002\106\002\000\002\013\005\000\002\013\002" +
    "\000\002\057\004\000\002\057\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\004\000\002\060\004\000\002" +
    "\016\005\000\002\016\002\000\002\015\004\000\002\015" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\006\007\000\002\006\006\000\002\007\006\000\002\004" +
    "\004\000\002\004\002\000\002\005\005\000\002\005\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\004" +
    "\000\002\054\004\000\002\047\011\000\002\047\010\000" +
    "\002\050\010\000\002\037\004\000\002\037\003\000\002" +
    "\036\005\000\002\105\004\000\002\105\002\000\002\051" +
    "\005\000\002\051\005\000\002\053\005\000\002\053\003" +
    "\000\002\052\003\000\002\040\005\000\002\040\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\032\004\000\002\032\003\000\002\033\004\000" +
    "\002\033\003\000\002\034\004\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\035\003\000\002\023\003\000" +
    "\002\023\003\000\002\103\004\000\002\103\003\000\002" +
    "\104\004\000\002\104\002\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\055\003\000\002\055\004\000\002\055\004\000" +
    "\002\055\005\000\002\017\010\000\002\020\005\000\002" +
    "\022\004\000\002\022\003\000\002\021\011\000\002\045" +
    "\014\000\002\011\006\000\002\011\003\000\002\041\010" +
    "\000\002\046\012\000\002\067\010\000\002\066\006\000" +
    "\002\066\002\000\002\065\004\000\002\065\002\000\002" +
    "\063\006\000\002\064\005\000\002\064\002\000\002\062" +
    "\003\000\002\061\003\000\002\077\004\000\002\042\010" +
    "\000\002\042\011\000\002\042\012\000\002\042\011\000" +
    "\002\043\007\000\002\043\010\000\002\044\006\000\002" +
    "\073\003\000\002\073\002\000\002\072\005\000\002\072" +
    "\003\000\002\071\004\000\002\070\003\000\002\070\003" +
    "\000\002\100\014\000\002\101\010\000\002\102\010\000" +
    "\002\074\006\000\002\076\003\000\002\076\002\000\002" +
    "\075\005\000\002\075\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\006\004\uff99\106\uff99\001\002\000\006\004" +
    "\007\106\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\040\012\041\013\044\011\001" +
    "\002\000\006\004\uff9a\106\uff9a\001\002\000\076\005\uff64" +
    "\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64\056" +
    "\uff64\057\uff64\060\uff64\061\uff64\062\uff64\064\uff64\065\uff64" +
    "\066\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074" +
    "\uff64\075\uff64\076\uff64\100\uff64\101\uff64\102\uff64\103\uff64" +
    "\104\uff64\105\uff64\106\uff64\001\002\000\076\005\uff62\047" +
    "\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\056\uff62" +
    "\057\uff62\060\uff62\061\uff62\062\uff62\064\uff62\065\uff62\066" +
    "\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62" +
    "\075\uff62\076\uff62\100\uff62\101\uff62\102\uff62\103\uff62\104" +
    "\uff62\105\uff62\106\uff62\001\002\000\076\005\uff63\047\uff63" +
    "\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\056\uff63\057" +
    "\uff63\060\uff63\061\uff63\062\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075" +
    "\uff63\076\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63" +
    "\105\uff63\106\uff63\001\002\000\006\005\016\106\ufffe\001" +
    "\002\000\004\106\023\001\002\000\010\040\012\041\013" +
    "\044\011\001\002\000\006\064\021\106\uffff\001\002\000" +
    "\012\064\uffe2\065\uffe2\101\uffe2\106\uffe2\001\002\000\010" +
    "\040\012\041\013\044\011\001\002\000\012\064\uffe3\065" +
    "\uffe3\101\uffe3\106\uffe3\001\002\000\070\002\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\106\uff9b\111\uff9b\112\uff9b\001\002" +
    "\000\010\002\ufffc\106\025\111\027\001\002\000\070\002" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\106\uff9c\111\uff9c\112" +
    "\uff9c\001\002\000\004\002\000\001\002\000\030\006\032" +
    "\007\047\010\033\011\031\012\044\013\037\014\043\040" +
    "\012\041\013\043\040\044\011\001\002\000\004\106\023" +
    "\001\002\000\012\017\uffe0\040\uffe0\041\uffe0\044\uffe0\001" +
    "\002\000\026\007\u0122\010\033\011\031\012\044\013\037" +
    "\014\043\040\012\041\013\043\u0121\044\011\001\002\000" +
    "\012\017\uffe1\040\uffe1\041\uffe1\044\uffe1\001\002\000\010" +
    "\040\012\041\013\044\011\001\002\000\032\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\040\ufff8" +
    "\041\ufff8\043\ufff8\044\ufff8\112\ufff8\001\002\000\032\006" +
    "\032\007\047\010\033\011\031\012\044\013\037\014\043" +
    "\040\012\041\013\043\040\044\011\112\u0118\001\002\000" +
    "\012\017\uffdd\040\uffdd\041\uffdd\044\uffdd\001\002\000\004" +
    "\103\u0114\001\002\000\004\103\213\001\002\000\032\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\040\ufffa\041\ufffa\043\ufffa\044\ufffa\112\ufffa\001\002\000" +
    "\012\017\uffde\040\uffde\041\uffde\044\uffde\001\002\000\012" +
    "\017\uffdf\040\uffdf\041\uffdf\044\uffdf\001\002\000\032\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\040\ufff9\041\ufff9\043\ufff9\044\ufff9\112\ufff9\001\002\000" +
    "\004\106\023\001\002\000\014\010\033\011\031\012\044" +
    "\013\037\014\043\001\002\000\012\017\052\040\012\041" +
    "\013\044\011\001\002\000\010\064\021\065\207\106\uffe4" +
    "\001\002\000\010\040\012\041\013\044\011\001\002\000" +
    "\006\064\021\101\056\001\002\000\010\065\170\101\056" +
    "\106\uffcc\001\002\000\072\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\104\uffcf\105\uffcf\106\uffcf\001\002\000" +
    "\034\015\063\016\067\040\012\041\013\044\011\045\100" +
    "\046\060\055\104\063\061\067\071\103\064\107\074\110" +
    "\057\001\002\000\060\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\064\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\100\uffa4\102\uffa4\104\uffa4\105\uffa4\106\uffa4\001" +
    "\002\000\060\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\064" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\100\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\001\002\000" +
    "\030\015\063\016\067\040\012\041\013\044\011\045\100" +
    "\046\060\055\104\103\064\107\074\110\057\001\002\000" +
    "\060\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\100\uff9f" +
    "\102\uff9f\104\uff9f\105\uff9f\106\uff9f\001\002\000\060\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\100\uff9e\102\uff9e" +
    "\104\uff9e\105\uff9e\106\uff9e\001\002\000\034\015\063\016" +
    "\067\040\012\041\013\044\011\045\100\046\060\055\104" +
    "\063\061\067\071\103\064\107\074\110\057\001\002\000" +
    "\060\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\066" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\100\uffa3" +
    "\102\uffa3\104\uffa3\105\uffa3\106\uffa3\001\002\000\064\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\100\uffa2\101\056" +
    "\102\uffa2\103\155\104\uffa2\105\uffa2\106\uffa2\001\002\000" +
    "\060\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d\066" +
    "\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\100\uff9d" +
    "\102\uff9d\104\uff9d\105\uff9d\106\uff9d\001\002\000\060\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\064\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\100\uffa1\102\uffa1" +
    "\104\uffa1\105\uffa1\106\uffa1\001\002\000\032\015\063\016" +
    "\067\040\012\041\013\044\011\045\100\046\060\055\104" +
    "\063\061\103\064\107\074\110\057\001\002\000\060\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\100\uffa8\102\uffa8" +
    "\104\uffa8\105\uffa8\106\uffa8\001\002\000\060\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\064\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\100\uffaa\102\uffaa\104\uffaa" +
    "\105\uffaa\106\uffaa\001\002\000\060\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\064\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\100\uffa5\102\uffa5\104\uffa5\105\uffa5" +
    "\106\uffa5\001\002\000\060\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\064\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\100\uffac\102\uffac\104\uffac\105\uffac\106\uffac" +
    "\001\002\000\060\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\064\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073" +
    "\151\100\uffae\102\uffae\104\uffae\105\uffae\106\uffae\001\002" +
    "\000\056\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\100\uffb0\102" +
    "\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002\000\060\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\100\uffa7\102\uffa7\104" +
    "\uffa7\105\uffa7\106\uffa7\001\002\000\056\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\064\uffb4\066\uffb4\067\uffb4\070\133" +
    "\071\132\072\131\100\uffb4\102\uffb4\104\uffb4\105\uffb4\106" +
    "\uffb4\001\002\000\050\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\064\uffb7\066\126\067\127\100\uffb7\102\uffb7\104\uffb7" +
    "\105\uffb7\106\uffb7\001\002\000\044\047\124\050\123\051" +
    "\117\052\121\053\122\054\120\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\064\uffbe\100\uffbe\102\uffbe\104\uffbe\105" +
    "\uffbe\106\uffbe\001\002\000\026\015\063\016\067\040\012" +
    "\041\013\044\011\045\100\046\060\103\064\107\074\110" +
    "\057\001\002\000\030\056\115\057\114\060\uffc1\061\uffc1" +
    "\062\uffc1\064\uffc1\100\uffc1\102\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\001\002\000\012\060\112\061\107\062\111\102\110" +
    "\001\002\000\034\015\063\016\067\040\012\041\013\044" +
    "\011\045\100\046\060\055\104\063\061\067\071\103\064" +
    "\107\074\110\057\001\002\000\072\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070" +
    "\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce" +
    "\100\uffce\101\uffce\102\uffce\104\uffce\105\uffce\106\uffce\001" +
    "\002\000\034\015\063\016\067\040\012\041\013\044\011" +
    "\045\100\046\060\055\104\063\061\067\071\103\064\107" +
    "\074\110\057\001\002\000\034\015\063\016\067\040\012" +
    "\041\013\044\011\045\100\046\060\055\104\063\061\067" +
    "\071\103\064\107\074\110\057\001\002\000\030\056\115" +
    "\057\114\060\uffc4\061\uffc4\062\uffc4\064\uffc4\100\uffc4\102" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\001\002\000\034\015\063" +
    "\016\067\040\012\041\013\044\011\045\100\046\060\055" +
    "\104\063\061\067\071\103\064\107\074\110\057\001\002" +
    "\000\034\015\063\016\067\040\012\041\013\044\011\045" +
    "\100\046\060\055\104\063\061\067\071\103\064\107\074" +
    "\110\057\001\002\000\044\047\124\050\123\051\117\052" +
    "\121\053\122\054\120\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\064\uffc0\100\uffc0\102\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\001\002\000\034\015\063\016\067\040\012\041\013" +
    "\044\011\045\100\046\060\055\104\063\061\067\071\103" +
    "\064\107\074\110\057\001\002\000\034\015\063\016\067" +
    "\040\012\041\013\044\011\045\100\046\060\055\104\063" +
    "\061\067\071\103\064\107\074\110\057\001\002\000\034" +
    "\015\063\016\067\040\012\041\013\044\011\045\100\046" +
    "\060\055\104\063\061\067\071\103\064\107\074\110\057" +
    "\001\002\000\034\015\063\016\067\040\012\041\013\044" +
    "\011\045\100\046\060\055\104\063\061\067\071\103\064" +
    "\107\074\110\057\001\002\000\034\015\063\016\067\040" +
    "\012\041\013\044\011\045\100\046\060\055\104\063\061" +
    "\067\071\103\064\107\074\110\057\001\002\000\034\015" +
    "\063\016\067\040\012\041\013\044\011\045\100\046\060" +
    "\055\104\063\061\067\071\103\064\107\074\110\057\001" +
    "\002\000\050\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\066\126\067\127\100\uffbd\102\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\001\002\000\034\015\063\016\067\040\012\041" +
    "\013\044\011\045\100\046\060\055\104\063\061\067\071" +
    "\103\064\107\074\110\057\001\002\000\034\015\063\016" +
    "\067\040\012\041\013\044\011\045\100\046\060\055\104" +
    "\063\061\067\071\103\064\107\074\110\057\001\002\000" +
    "\056\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\066" +
    "\uffb5\067\uffb5\070\133\071\132\072\131\100\uffb5\102\uffb5" +
    "\104\uffb5\105\uffb5\106\uffb5\001\002\000\034\015\063\016" +
    "\067\040\012\041\013\044\011\045\100\046\060\055\104" +
    "\063\061\067\071\103\064\107\074\110\057\001\002\000" +
    "\034\015\063\016\067\040\012\041\013\044\011\045\100" +
    "\046\060\055\104\063\061\067\071\103\064\107\074\110" +
    "\057\001\002\000\034\015\063\016\067\040\012\041\013" +
    "\044\011\045\100\046\060\055\104\063\061\067\071\103" +
    "\064\107\074\110\057\001\002\000\056\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\064\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\100\uffb3\102\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\001\002\000\056\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\064\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2" +
    "\100\uffb2\102\uffb2\104\uffb2\105\uffb2\106\uffb2\001\002\000" +
    "\056\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\100\uffb1\102\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\001\002\000\056\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\064\uffb6\066\uffb6\067\uffb6\070" +
    "\133\071\132\072\131\100\uffb6\102\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\001\002\000\050\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\064\uffbc\066\126\067\127\100\uffbc\102\uffbc\104" +
    "\uffbc\105\uffbc\106\uffbc\001\002\000\050\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\064\uffb9\066\126\067\127\100\uffb9" +
    "\102\uffb9\104\uffb9\105\uffb9\106\uffb9\001\002\000\050\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\064\uffba\066\126\067" +
    "\127\100\uffba\102\uffba\104\uffba\105\uffba\106\uffba\001\002" +
    "\000\050\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8" +
    "\066\126\067\127\100\uffb8\102\uffb8\104\uffb8\105\uffb8\106" +
    "\uffb8\001\002\000\050\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\064\uffbb\066\126\067\127\100\uffbb\102\uffbb\104\uffbb" +
    "\105\uffbb\106\uffbb\001\002\000\044\047\124\050\123\051" +
    "\117\052\121\053\122\054\120\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\064\uffbf\100\uffbf\102\uffbf\104\uffbf\105" +
    "\uffbf\106\uffbf\001\002\000\030\056\115\057\114\060\uffc2" +
    "\061\uffc2\062\uffc2\064\uffc2\100\uffc2\102\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\001\002\000\030\056\115\057\114\060\uffc3" +
    "\061\uffc3\062\uffc3\064\uffc3\100\uffc3\102\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\001\002\000\060\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9" +
    "\072\uffa9\073\uffa9\100\uffa9\102\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\001\002\000\034\015\063\016\067\040\012\041\013" +
    "\044\011\045\100\046\060\055\104\063\061\067\071\103" +
    "\064\107\074\110\057\001\002\000\056\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\100\uffaf\102\uffaf\104\uffaf\105\uffaf\106" +
    "\uffaf\001\002\000\060\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\064\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\100\uffad\102\uffad\104\uffad\105\uffad\106\uffad\001" +
    "\002\000\072\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\100\uffd4\101\056\102" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\001\002\000\036\015\063" +
    "\016\067\040\012\041\013\044\011\045\100\046\060\055" +
    "\104\063\061\067\071\103\064\104\uff67\107\074\110\057" +
    "\001\002\000\006\064\162\104\uff68\001\002\000\004\104" +
    "\161\001\002\000\014\060\112\061\107\062\111\064\uff65" +
    "\104\uff65\001\002\000\060\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\056\uff69\057\uff69\060\uff69\061\uff69" +
    "\062\uff69\064\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072" +
    "\uff69\073\uff69\100\uff69\102\uff69\104\uff69\105\uff69\106\uff69" +
    "\001\002\000\034\015\063\016\067\040\012\041\013\044" +
    "\011\045\100\046\060\055\104\063\061\067\071\103\064" +
    "\107\074\110\057\001\002\000\014\060\112\061\107\062" +
    "\111\064\uff66\104\uff66\001\002\000\072\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\100\uffd0\101\uffd0\102\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\001\002\000\012\060\112\061\107\062\111\104\166\001" +
    "\002\000\060\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\064" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\100\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0\001\002\000" +
    "\060\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\064\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\100\uffab" +
    "\102\uffab\104\uffab\105\uffab\106\uffab\001\002\000\004\077" +
    "\172\001\002\000\004\106\uffd2\001\002\000\036\015\063" +
    "\016\067\040\012\041\013\044\011\045\100\046\060\055" +
    "\104\063\061\067\071\077\172\103\064\107\074\110\057" +
    "\001\002\000\004\106\uffcd\001\002\000\006\064\204\100" +
    "\205\001\002\000\006\064\uffc8\100\uffc8\001\002\000\006" +
    "\064\201\100\202\001\002\000\006\064\uffc7\100\uffc7\001" +
    "\002\000\014\060\112\061\107\062\111\064\uffc5\100\uffc5" +
    "\001\002\000\004\077\172\001\002\000\010\064\uffca\100" +
    "\uffca\106\uffca\001\002\000\006\064\uffc9\100\uffc9\001\002" +
    "\000\034\015\063\016\067\040\012\041\013\044\011\045" +
    "\100\046\060\055\104\063\061\067\071\103\064\107\074" +
    "\110\057\001\002\000\010\064\uffcb\100\uffcb\106\uffcb\001" +
    "\002\000\014\060\112\061\107\062\111\064\uffc6\100\uffc6" +
    "\001\002\000\034\015\063\016\067\040\012\041\013\044" +
    "\011\045\100\046\060\055\104\063\061\067\071\103\064" +
    "\107\074\110\057\001\002\000\004\106\uffe7\001\002\000" +
    "\012\060\112\061\107\062\111\106\uffe5\001\002\000\034" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\106\025\112\ufff6" +
    "\001\002\000\016\010\033\011\031\012\044\013\037\014" +
    "\043\104\uff72\001\002\000\004\104\223\001\002\000\006" +
    "\064\uff70\104\uff70\001\002\000\006\064\221\104\uff73\001" +
    "\002\000\010\040\012\041\013\044\011\001\002\000\006" +
    "\064\uff6f\104\uff6f\001\002\000\014\010\033\011\031\012" +
    "\044\013\037\014\043\001\002\000\006\064\uff71\104\uff71" +
    "\001\002\000\004\106\023\001\002\000\036\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\044\ufff4\106\025\111\226\112\ufff4\001" +
    "\002\000\032\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\014\uff7a\040\uff7a\041\uff7a\043\uff7a\044\uff7a\112" +
    "\uff7a\001\002\000\034\007\262\020\237\022\235\024\227" +
    "\026\261\027\231\030\251\031\230\032\232\040\012\041" +
    "\013\042\236\044\011\001\002\000\004\106\uff7d\001\002" +
    "\000\004\106\uff7c\001\002\000\004\103\u010f\001\002\000" +
    "\034\015\063\016\067\040\012\041\013\044\011\045\100" +
    "\046\060\055\104\063\061\067\071\103\064\107\074\110" +
    "\057\001\002\000\004\106\023\001\002\000\004\106\023" +
    "\001\002\000\004\103\373\001\002\000\004\103\370\001" +
    "\002\000\004\103\363\001\002\000\036\007\uff97\020\uff97" +
    "\022\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\040\uff97\041\uff97\042\uff97\044\uff97\112\uff97\001\002" +
    "\000\036\007\uff94\020\uff94\022\uff94\024\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\040\uff94\041\uff94\042\uff94" +
    "\044\uff94\112\uff94\001\002\000\036\007\uffed\020\uffed\022" +
    "\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\040\uffed\041\uffed\042\uffed\044\uffed\112\uffed\001\002\000" +
    "\036\007\uff95\020\uff95\022\uff95\024\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\040\uff95\041\uff95\042\uff95\044" +
    "\uff95\112\uff95\001\002\000\004\106\023\001\002\000\004" +
    "\106\023\001\002\000\036\007\ufff2\020\ufff2\022\ufff2\024" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\044\ufff2\112\ufff2\001\002\000\036\007" +
    "\uff96\020\uff96\022\uff96\024\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\040\uff96\041\uff96\042\uff96\044\uff96\112" +
    "\uff96\001\002\000\036\007\262\020\237\022\235\024\227" +
    "\026\261\027\231\030\251\031\230\032\232\040\012\041" +
    "\013\042\236\044\011\112\357\001\002\000\004\106\023" +
    "\001\002\000\016\065\304\074\302\075\301\076\303\101" +
    "\056\103\155\001\002\000\004\106\023\001\002\000\012" +
    "\065\344\074\342\075\341\076\343\001\002\000\036\007" +
    "\uff98\020\uff98\022\uff98\024\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\040\uff98\041\uff98\042\uff98\044\uff98\112" +
    "\uff98\001\002\000\004\106\023\001\002\000\040\007\uff93" +
    "\020\uff93\021\322\022\uff93\024\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\040\uff93\041\uff93\042\uff93\044\uff93" +
    "\112\uff93\001\002\000\004\106\023\001\002\000\004\103" +
    "\274\001\002\000\014\010\033\011\031\012\044\013\037" +
    "\014\043\001\002\000\004\106\023\001\002\000\040\007" +
    "\uffe9\020\uffe9\022\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\106" +
    "\025\112\uffe9\001\002\000\012\017\267\040\012\041\013" +
    "\044\011\001\002\000\010\064\021\065\207\106\uffe4\001" +
    "\002\000\010\040\012\041\013\044\011\001\002\000\006" +
    "\064\021\101\056\001\002\000\010\065\170\101\056\106" +
    "\uffcc\001\002\000\004\106\uffd1\001\002\000\004\106\uffe6" +
    "\001\002\000\012\010\277\040\012\041\013\044\011\001" +
    "\002\000\004\105\312\001\002\000\004\105\uff88\001\002" +
    "\000\010\040\012\041\013\044\011\001\002\000\014\065" +
    "\304\074\302\075\301\076\303\101\056\001\002\000\010" +
    "\104\uffda\105\uffda\106\uffda\001\002\000\034\015\063\016" +
    "\067\040\012\041\013\044\011\045\100\046\060\055\104" +
    "\063\061\067\071\103\064\107\074\110\057\001\002\000" +
    "\010\104\uffd9\105\uffd9\106\uffd9\001\002\000\034\015\063" +
    "\016\067\040\012\041\013\044\011\045\100\046\060\055" +
    "\104\063\061\067\071\103\064\107\074\110\057\001\002" +
    "\000\016\060\112\061\107\062\111\104\uffdc\105\uffdc\106" +
    "\uffdc\001\002\000\016\060\112\061\107\062\111\104\uffdb" +
    "\105\uffdb\106\uffdb\001\002\000\004\065\310\001\002\000" +
    "\034\015\063\016\067\040\012\041\013\044\011\045\100" +
    "\046\060\055\104\063\061\067\071\103\064\107\074\110" +
    "\057\001\002\000\012\060\112\061\107\062\111\105\uff89" +
    "\001\002\000\034\015\063\016\067\040\012\041\013\044" +
    "\011\045\100\046\060\055\104\063\061\067\071\103\064" +
    "\107\074\110\057\001\002\000\012\060\112\061\107\062" +
    "\111\105\314\001\002\000\010\040\012\041\013\044\011" +
    "\001\002\000\004\104\316\001\002\000\004\106\023\001" +
    "\002\000\042\007\ufff4\020\ufff4\022\ufff4\024\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\044\ufff4\106\025\111\226\112\ufff4\001\002\000\036" +
    "\007\uff8a\020\uff8a\022\uff8a\024\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\032\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a" +
    "\112\uff8a\001\002\000\040\007\ufff1\020\ufff1\022\ufff1\024" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\044\ufff1\106\025\112\ufff1\001\002\000" +
    "\006\020\331\106\023\001\002\000\036\007\uff92\020\uff92" +
    "\022\uff92\024\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\040\uff92\041\uff92\042\uff92\044\uff92\112\uff92\001\002" +
    "\000\040\007\uff8c\020\uff8c\021\uff8c\022\uff8c\024\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\044\uff8c\112\uff8c\001\002\000\040\007\uff91\020" +
    "\uff91\021\322\022\uff91\024\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\040\uff91\041\uff91\042\uff91\044\uff91\112" +
    "\uff91\001\002\000\036\007\uff90\020\uff90\022\uff90\024\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\040\uff90\041" +
    "\uff90\042\uff90\044\uff90\112\uff90\001\002\000\040\007\uff8d" +
    "\020\uff8d\021\uff8d\022\uff8d\024\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\040\uff8d\041\uff8d\042\uff8d\044\uff8d" +
    "\112\uff8d\001\002\000\042\007\ufff4\020\ufff4\022\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\044\ufff4\106\025\111\226\112\ufff4\001" +
    "\002\000\004\103\332\001\002\000\034\015\063\016\067" +
    "\040\012\041\013\044\011\045\100\046\060\055\104\063" +
    "\061\067\071\103\064\107\074\110\057\001\002\000\012" +
    "\060\112\061\107\062\111\104\334\001\002\000\004\106" +
    "\023\001\002\000\044\007\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\044\ufff4\106\025\111\226\112\ufff4" +
    "\001\002\000\040\007\uff8b\020\uff8b\021\uff8b\022\uff8b\024" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\044\uff8b\112\uff8b\001\002\000\036\007" +
    "\uff8e\020\uff8e\022\uff8e\024\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\040\uff8e\041\uff8e\042\uff8e\044\uff8e\112" +
    "\uff8e\001\002\000\040\007\uffeb\020\uffeb\022\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\044\uffeb\106\025\112\uffeb\001\002\000\010" +
    "\104\uffd6\105\uffd6\106\uffd6\001\002\000\034\015\063\016" +
    "\067\040\012\041\013\044\011\045\100\046\060\055\104" +
    "\063\061\067\071\103\064\107\074\110\057\001\002\000" +
    "\010\104\uffd5\105\uffd5\106\uffd5\001\002\000\034\015\063" +
    "\016\067\040\012\041\013\044\011\045\100\046\060\055" +
    "\104\063\061\067\071\103\064\107\074\110\057\001\002" +
    "\000\016\060\112\061\107\062\111\104\uffd8\105\uffd8\106" +
    "\uffd8\001\002\000\016\060\112\061\107\062\111\104\uffd7" +
    "\105\uffd7\106\uffd7\001\002\000\040\007\ufff0\020\ufff0\022" +
    "\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\044\ufff0\106\025\112\ufff0\001" +
    "\002\000\010\027\ufff4\106\025\111\226\001\002\000\004" +
    "\027\352\001\002\000\004\103\353\001\002\000\034\015" +
    "\063\016\067\040\012\041\013\044\011\045\100\046\060" +
    "\055\104\063\061\067\071\103\064\107\074\110\057\001" +
    "\002\000\012\060\112\061\107\062\111\104\355\001\002" +
    "\000\004\106\023\001\002\000\040\007\uff86\020\uff86\022" +
    "\uff86\024\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\040\uff86\041\uff86\042\uff86\044\uff86\106\025\112\uff86\001" +
    "\002\000\062\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\112\ufff5\001" +
    "\002\000\036\007\ufff3\020\ufff3\022\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\044\ufff3\112\ufff3\001\002\000\040\007\uffee\020\uffee" +
    "\022\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\040\uffee\041\uffee\042\uffee\044\uffee\106\025\112\uffee" +
    "\001\002\000\040\007\uffec\020\uffec\022\uffec\024\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\040\uffec\041\uffec" +
    "\042\uffec\044\uffec\106\025\112\uffec\001\002\000\034\015" +
    "\063\016\067\040\012\041\013\044\011\045\100\046\060" +
    "\055\104\063\061\067\071\103\064\107\074\110\057\001" +
    "\002\000\012\060\112\061\107\062\111\104\365\001\002" +
    "\000\004\106\023\001\002\000\044\007\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\040\ufff4\041\ufff4\042\ufff4\044\ufff4\106\025\111" +
    "\226\112\ufff4\001\002\000\040\007\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\044\uff8f\112\uff8f\001\002" +
    "\000\034\015\063\016\067\040\012\041\013\044\011\045" +
    "\100\046\060\055\104\063\061\067\071\103\064\107\074" +
    "\110\057\001\002\000\012\060\112\061\107\062\111\104" +
    "\372\001\002\000\004\106\uff74\001\002\000\034\015\063" +
    "\016\067\040\012\041\013\044\011\045\100\046\060\055" +
    "\104\063\061\067\071\103\064\107\074\110\057\001\002" +
    "\000\012\060\112\061\107\062\111\104\375\001\002\000" +
    "\004\106\023\001\002\000\042\007\uff83\020\uff83\022\uff83" +
    "\024\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\040" +
    "\uff83\041\uff83\042\uff83\044\uff83\106\025\111\u0100\112\uff83" +
    "\001\002\000\036\007\uff85\020\uff85\022\uff85\024\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\032\uff85\040\uff85\041\uff85" +
    "\042\uff85\044\uff85\112\uff85\001\002\000\010\023\uff81\025" +
    "\uff81\112\uff81\001\002\000\010\023\u0105\025\u0102\112\uff7e" +
    "\001\002\000\004\106\023\001\002\000\010\023\uff82\025" +
    "\uff82\112\uff82\001\002\000\004\112\u0109\001\002\000\034" +
    "\015\063\016\067\040\012\041\013\044\011\045\100\046" +
    "\060\055\104\063\061\067\071\103\064\107\074\110\057" +
    "\001\002\000\012\060\112\061\107\062\111\106\023\001" +
    "\002\000\014\023\ufff4\025\ufff4\106\025\111\226\112\ufff4" +
    "\001\002\000\010\023\uff80\025\uff80\112\uff80\001\002\000" +
    "\036\007\uff84\020\uff84\022\uff84\024\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\040\uff84\041\uff84\042\uff84\044" +
    "\uff84\112\uff84\001\002\000\010\106\025\111\226\112\ufff4" +
    "\001\002\000\004\112\uff7f\001\002\000\040\007\uffef\020" +
    "\uffef\022\uffef\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\040\uffef\041\uffef\042\uffef\044\uffef\106\025\112" +
    "\uffef\001\002\000\040\007\uffea\020\uffea\022\uffea\024\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\040\uffea\041" +
    "\uffea\042\uffea\044\uffea\106\025\112\uffea\001\002\000\012" +
    "\060\112\061\107\062\111\106\uff7b\001\002\000\034\015" +
    "\063\016\067\040\012\041\013\044\011\045\100\046\060" +
    "\055\104\063\061\067\071\103\064\107\074\110\057\001" +
    "\002\000\012\060\112\061\107\062\111\104\u0111\001\002" +
    "\000\004\106\023\001\002\000\042\007\ufff4\020\ufff4\022" +
    "\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\044\ufff4\106\025\111\226\112" +
    "\ufff4\001\002\000\036\007\uff87\020\uff87\022\uff87\024\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\040\uff87\041" +
    "\uff87\042\uff87\044\uff87\112\uff87\001\002\000\004\104\u0115" +
    "\001\002\000\004\106\023\001\002\000\036\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\044\ufff4\106\025\111\226\112\ufff4\001" +
    "\002\000\032\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\040\uff76\041\uff76\043\uff76\044\uff76\112" +
    "\uff76\001\002\000\004\002\ufffd\001\002\000\032\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\040" +
    "\ufffb\041\ufffb\043\ufffb\044\ufffb\112\ufffb\001\002\000\004" +
    "\103\u011b\001\002\000\016\010\033\011\031\012\044\013" +
    "\037\014\043\104\uff72\001\002\000\004\104\u011d\001\002" +
    "\000\004\106\023\001\002\000\036\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040\ufff4\041\ufff4" +
    "\043\ufff4\044\ufff4\106\025\111\226\112\ufff4\001\002\000" +
    "\032\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77" +
    "\014\uff77\040\uff77\041\uff77\043\uff77\044\uff77\112\uff77\001" +
    "\002\000\004\103\u0135\001\002\000\004\103\u0131\001\002" +
    "\000\014\010\033\011\031\012\044\013\037\014\043\001" +
    "\002\000\010\040\012\041\013\044\011\001\002\000\004" +
    "\103\u0125\001\002\000\016\010\033\011\031\012\044\013" +
    "\037\014\043\104\uff72\001\002\000\004\104\u0127\001\002" +
    "\000\004\106\023\001\002\000\036\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040\ufff4\041\ufff4" +
    "\043\ufff4\044\ufff4\106\025\111\226\112\ufff4\001\002\000" +
    "\032\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78" +
    "\014\uff78\040\uff78\041\uff78\043\uff78\044\uff78\112\uff78\001" +
    "\002\000\012\017\u012c\040\012\041\013\044\011\001\002" +
    "\000\010\064\021\065\207\106\uffe4\001\002\000\010\040" +
    "\012\041\013\044\011\001\002\000\006\064\021\101\056" +
    "\001\002\000\010\065\170\101\056\106\uffcc\001\002\000" +
    "\004\106\uffd3\001\002\000\004\106\uffe8\001\002\000\004" +
    "\104\u0132\001\002\000\004\106\023\001\002\000\036\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\040\ufff4\041\ufff4\043\ufff4\044\ufff4\106\025\111\226\112" +
    "\ufff4\001\002\000\032\006\uff75\007\uff75\010\uff75\011\uff75" +
    "\012\uff75\013\uff75\014\uff75\040\uff75\041\uff75\043\uff75\044" +
    "\uff75\112\uff75\001\002\000\016\010\033\011\031\012\044" +
    "\013\037\014\043\104\uff72\001\002\000\004\104\u0137\001" +
    "\002\000\004\106\023\001\002\000\036\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040\ufff4\041" +
    "\ufff4\043\ufff4\044\ufff4\106\025\111\226\112\ufff4\001\002" +
    "\000\032\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\040\uff79\041\uff79\043\uff79\044\uff79\112\uff79" +
    "\001\002\000\034\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7" +
    "\106\025\112\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\006\014\004\104\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\014\001\001\000\004" +
    "\103\023\001\001\000\006\003\017\005\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\033" +
    "\003\040\006\027\042\034\043\044\047\045\057\035\060" +
    "\041\001\001\000\004\103\u0139\001\001\000\002\001\001" +
    "\000\006\002\u0122\003\u011f\001\001\000\002\001\001\000" +
    "\004\003\u0119\001\001\000\002\001\001\000\020\002\033" +
    "\003\040\006\027\042\034\043\044\047\045\060\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\211\001\001\000\004\002\047" +
    "\001\001\000\006\003\017\005\050\001\001\000\004\004" +
    "\207\001\001\000\006\003\017\005\052\001\001\000\006" +
    "\036\054\037\053\001\001\000\006\036\163\105\170\001" +
    "\001\000\002\001\001\000\036\003\065\023\064\024\105" +
    "\025\104\026\102\027\101\030\100\031\076\032\075\033" +
    "\074\034\072\035\071\054\067\074\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\065\023\064\034" +
    "\166\035\071\054\067\074\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\065\023\064\024\164\025" +
    "\104\026\102\027\101\030\100\031\076\032\075\033\074" +
    "\034\072\035\071\054\067\074\061\001\001\000\002\001" +
    "\001\000\006\036\054\037\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\065\023\064\033\152\034" +
    "\072\035\071\054\067\074\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\065\023\064\035\147\054\067\074\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\065\023\064\025" +
    "\146\026\102\027\101\030\100\031\076\032\075\033\074" +
    "\034\072\035\071\054\067\074\061\001\001\000\002\001" +
    "\001\000\034\003\065\023\064\025\145\026\102\027\101" +
    "\030\100\031\076\032\075\033\074\034\072\035\071\054" +
    "\067\074\061\001\001\000\034\003\065\023\064\025\112" +
    "\026\102\027\101\030\100\031\076\032\075\033\074\034" +
    "\072\035\071\054\067\074\061\001\001\000\002\001\001" +
    "\000\032\003\065\023\064\026\144\027\101\030\100\031" +
    "\076\032\075\033\074\034\072\035\071\054\067\074\061" +
    "\001\001\000\032\003\065\023\064\026\115\027\101\030" +
    "\100\031\076\032\075\033\074\034\072\035\071\054\067" +
    "\074\061\001\001\000\002\001\001\000\030\003\065\023" +
    "\064\027\143\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\030\003\065\023" +
    "\064\027\142\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\030\003\065\023" +
    "\064\027\141\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\030\003\065\023" +
    "\064\027\140\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\030\003\065\023" +
    "\064\027\137\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\030\003\065\023" +
    "\064\027\124\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\002\001\001\000" +
    "\026\003\065\023\064\030\136\031\076\032\075\033\074" +
    "\034\072\035\071\054\067\074\061\001\001\000\026\003" +
    "\065\023\064\030\127\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\002\001\001\000" +
    "\024\003\065\023\064\031\135\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\024\003\065\023" +
    "\064\031\134\032\075\033\074\034\072\035\071\054\067" +
    "\074\061\001\001\000\024\003\065\023\064\031\133\032" +
    "\075\033\074\034\072\035\071\054\067\074\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\065\023\064\031\151\032\075\033\074\034" +
    "\072\035\071\054\067\074\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\163\001\001\000\042\003" +
    "\065\023\064\024\157\025\104\026\102\027\101\030\100" +
    "\031\076\032\075\033\074\034\072\035\071\054\067\074" +
    "\061\075\155\076\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\065\023\064\024\162\025\104\026\102\027\101\030\100" +
    "\031\076\032\075\033\074\034\072\035\071\054\067\074" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\172\001\001\000\002\001\001\000\046\003\065\023\064" +
    "\024\177\025\104\026\102\027\101\030\100\031\076\032" +
    "\075\033\074\034\072\035\071\040\173\051\176\052\174" +
    "\053\175\054\067\074\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\176\052\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\065" +
    "\023\064\024\205\025\104\026\102\027\101\030\100\031" +
    "\076\032\075\033\074\034\072\035\071\054\067\074\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\065\023\064\024\210\025\104\026\102\027\101\030\100" +
    "\031\076\032\075\033\074\034\072\035\071\054\067\074" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\216\071\214\072\215\073\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\217\001\001\000\002\001\001\000\006\002" +
    "\216\071\221\001\001\000\002\001\001\000\004\103\223" +
    "\001\001\000\004\016\224\001\001\000\002\001\001\000" +
    "\050\003\251\007\257\010\252\012\245\015\247\017\256" +
    "\041\246\044\244\045\237\046\242\050\233\054\253\055" +
    "\254\056\241\061\243\062\255\067\240\074\232\077\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\065\023\064\024\u010d\025\104\026\102" +
    "\027\101\030\100\031\076\032\075\033\074\034\072\035" +
    "\071\054\067\074\061\001\001\000\004\103\u010c\001\001" +
    "\000\004\103\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\361\001" +
    "\001\000\004\103\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\251\007\257\010\252\012\357\017" +
    "\256\041\246\044\244\045\237\046\242\050\233\054\253" +
    "\055\254\056\241\061\243\062\255\067\240\074\232\077" +
    "\262\001\001\000\004\103\347\001\001\000\006\036\054" +
    "\037\153\001\001\000\004\103\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\337\001\001\000\010" +
    "\020\322\021\323\022\324\001\001\000\004\103\320\001" +
    "\001\000\002\001\001\000\004\002\264\001\001\000\004" +
    "\103\263\001\001\000\002\001\001\000\006\003\017\005" +
    "\265\001\001\000\004\004\272\001\001\000\006\003\017" +
    "\005\267\001\001\000\006\036\054\037\270\001\001\000" +
    "\006\036\163\105\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\277\010\275\011\274\054\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\306" +
    "\001\001\000\006\036\054\037\153\001\001\000\002\001" +
    "\001\000\036\003\065\023\064\024\305\025\104\026\102" +
    "\027\101\030\100\031\076\032\075\033\074\034\072\035" +
    "\071\054\067\074\061\001\001\000\002\001\001\000\036" +
    "\003\065\023\064\024\304\025\104\026\102\027\101\030" +
    "\100\031\076\032\075\033\074\034\072\035\071\054\067" +
    "\074\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\065\023\064\024\310\025\104" +
    "\026\102\027\101\030\100\031\076\032\075\033\074\034" +
    "\072\035\071\054\067\074\061\001\001\000\002\001\001" +
    "\000\036\003\065\023\064\024\312\025\104\026\102\027" +
    "\101\030\100\031\076\032\075\033\074\034\072\035\071" +
    "\054\067\074\061\001\001\000\002\001\001\000\010\003" +
    "\277\010\314\054\253\001\001\000\002\001\001\000\004" +
    "\103\316\001\001\000\004\016\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\325\021\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\336" +
    "\001\001\000\002\001\001\000\036\003\065\023\064\024" +
    "\332\025\104\026\102\027\101\030\100\031\076\032\075" +
    "\033\074\034\072\035\071\054\067\074\061\001\001\000" +
    "\002\001\001\000\004\103\334\001\001\000\004\016\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\065\023\064\024\345" +
    "\025\104\026\102\027\101\030\100\031\076\032\075\033" +
    "\074\034\072\035\071\054\067\074\061\001\001\000\002" +
    "\001\001\000\036\003\065\023\064\024\344\025\104\026" +
    "\102\027\101\030\100\031\076\032\075\033\074\034\072" +
    "\035\071\054\067\074\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\065\023" +
    "\064\024\353\025\104\026\102\027\101\030\100\031\076" +
    "\032\075\033\074\034\072\035\071\054\067\074\061\001" +
    "\001\000\002\001\001\000\004\103\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\065\023\064\024\363" +
    "\025\104\026\102\027\101\030\100\031\076\032\075\033" +
    "\074\034\072\035\071\054\067\074\061\001\001\000\002" +
    "\001\001\000\004\103\365\001\001\000\004\016\366\001" +
    "\001\000\002\001\001\000\036\003\065\023\064\024\370" +
    "\025\104\026\102\027\101\030\100\031\076\032\075\033" +
    "\074\034\072\035\071\054\067\074\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\065\023\064\024" +
    "\373\025\104\026\102\027\101\030\100\031\076\032\075" +
    "\033\074\034\072\035\071\054\067\074\061\001\001\000" +
    "\002\001\001\000\004\103\375\001\001\000\004\066\376" +
    "\001\001\000\002\001\001\000\004\065\u0100\001\001\000" +
    "\006\063\u0102\064\u0103\001\001\000\004\103\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\065\023" +
    "\064\024\u0105\025\104\026\102\027\101\030\100\031\076" +
    "\032\075\033\074\034\072\035\071\054\067\074\061\001" +
    "\001\000\004\103\u0106\001\001\000\004\016\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\065\023\064\024\u010f\025" +
    "\104\026\102\027\101\030\100\031\076\032\075\033\074" +
    "\034\072\035\071\054\067\074\061\001\001\000\002\001" +
    "\001\000\004\103\u0111\001\001\000\004\016\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\u0115\001" +
    "\001\000\004\016\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\216\071\214\072\215\073\u011b\001\001\000\002\001\001" +
    "\000\004\103\u011d\001\001\000\004\016\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\u0129\001\001\000\004\003\u0123\001\001\000\002\001" +
    "\001\000\012\002\216\071\214\072\215\073\u0125\001\001" +
    "\000\002\001\001\000\004\103\u0127\001\001\000\004\016" +
    "\u0128\001\001\000\002\001\001\000\006\003\017\005\u012a" +
    "\001\001\000\004\004\u012f\001\001\000\006\003\017\005" +
    "\u012c\001\001\000\006\036\054\037\u012d\001\001\000\006" +
    "\036\163\105\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u0132\001\001\000\004" +
    "\016\u0133\001\001\000\002\001\001\000\012\002\216\071" +
    "\214\072\215\073\u0135\001\001\000\002\001\001\000\004" +
    "\103\u0137\001\001\000\004\016\u0138\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AudioParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AudioParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AudioParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private ErrorHandler errorHandler;

	private List<Integer> ind;

	public AudioParser(AudioLex lex) {
		super(lex);
		this.errorHandler = new ErrorHandler();
		this.ind = new ArrayList<>();
	}

	public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setError((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AudioParser$actions {
  private final AudioParser parser;

  /** Constructor */
  CUP$AudioParser$actions(AudioParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action_part00000000(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AudioParser$result;

      /* select the action based on the action number */
      switch (CUP$AudioParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		RESULT = start_val;
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AudioParser$parser.done_parsing();
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio1 ::= eol_ TRACK id extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = list_i;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // extends_ ::= EXTENDS id_list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",68, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extends_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",68, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bod ::= INDENT m_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bod ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // m_body ::= m_body main_body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // m_body ::= main_body 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_body ::= principal 
            {
              List<Instruction> RESULT =null;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Principal principal = (Principal)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(principal); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_body ::= function 
            {
              List<Instruction> RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Instruction function = (Instruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(function); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= statement eol 
            {
              List<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> statement = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_body ::= array_statement eol 
            {
              List<Instruction> RESULT =null;
		int array_statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> array_statement = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(array_statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_body ::= INDENT f_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_body ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // f_body ::= f_body body 
            {
              List<Instruction> RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_ins; RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // f_body ::= body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> list = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= assignment eol 
            {
              List<Instruction> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(assign); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= array_statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> list = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		  RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body ::= message eol 
            {
              List<Instruction> RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Message message = (Message)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(message); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= control 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body ::= continue_ eol 
            {
              List<Instruction> RESULT =null;
		int continue_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int continue_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Continue continue_ = (Continue)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(continue_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body ::= exit_ eol 
            {
              List<Instruction> RESULT =null;
		int exit_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int exit_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Exit exit_ = (Exit)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(exit_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body ::= function_call eol 
            {
              List<Instruction> RESULT =null;
		int f_callleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int f_callright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		FunctionCall f_call = (FunctionCall)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(f_call); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body ::= return_ eol 
            {
              List<Instruction> RESULT =null;
		int return_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int return_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Return return_ = (Return)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(return_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= KEEP VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_function ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement_function",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= EQUAL a 
            {
              Operation RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = operation; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id_list ::= id_list COMMA id 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					list.add(token);
					RESULT = list;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // id_list ::= id 
            {
              List<Token> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Token>();
					RESULT.add(token);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= INT 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= DOB 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= BOOL 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= CAD 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= CAR 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= id EQUAL a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(Assignment.TypeA.EQUAL, token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment ::= id PLUS_EQ a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), operation, op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_EQ, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= id PLUS_PLUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_PLUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment ::= id MINUS_MINUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.MINUS_MINUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment ::= l EQUAL a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAssignment(array_access, operation, Assignment.TypeA.EQUAL); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= l PLUS_EQ a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), operation, op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_EQ);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment ::= l PLUS_PLUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_PLUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignment ::= l MINUS_MINUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.MINUS_MINUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l ::= id dimensions 
            {
              ArrayAccess RESULT =null;
		int token_idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int token_idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token_id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAccess(token_id, list_array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("l",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_statement ::= KEEP VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array_statement ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_statement_function ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dimensions ::= dimensions dimension 
            {
              List<ArrayIndex> RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_op = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dimensions ::= dimension 
            {
              List<ArrayIndex> RESULT =null;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dimension ::= LBRACKET a RBRACKET 
            {
              ArrayIndex RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token left = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token right = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayIndex(left, operation, right); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimension",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array_value ::= EQUAL list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",67, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // array_value ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",67, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list ::= LBRACE value_list RBRACE 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list_op = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Operation.class, list_op.size());
					ind.add(list_op.size());
					// System.out.println(list_op.size());
					for(int i = 0; i < list_op.size(); i++) {
						Array.set(RESULT, i, list_op.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list ::= LBRACE list_fn RBRACE 
            {
              Object RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Object.class, list_fn.size());
					for(int i = 0; i < list_fn.size(); i++) {
						Array.set(RESULT, i, list_fn.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_fn ::= list_fn COMMA fn 
            {
              List<Object> RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_fn; RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_fn ::= fn 
            {
              List<Object> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fn ::= list 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list_op = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("fn",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value_list ::= value_list COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value_list ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a ::= a OR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.OR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // a ::= a NOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // a ::= a XOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.XOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // a ::= b 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // b ::= b AND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.AND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // b ::= b NAND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NAND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // b ::= c 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c ::= c EQEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.EQEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // c ::= c NEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c ::= c GREATER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c ::= c SMALLER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SMALLER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // c ::= c GRTREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // c ::= c SMLLREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.LESS_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // c ::= d 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // d ::= d PLUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUM, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // d ::= d MINUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUBTRACTION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // d ::= e 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // e ::= e TIMES f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MULTIPLICATION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // e ::= e DIVIDE f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT =new Operation(OperationType.DIVISION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // e ::= e MOD f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MOD, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // e ::= f 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // f ::= g POW f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.POW, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // f ::= g 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // g ::= MINUS h 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.UMINUS, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // g ::= h 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // h ::= NOT i 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOT, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // h ::= i 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // i ::= NULL j 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NULL, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // i ::= j 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // j ::= INTEGER 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.INTEGER, new Variable(var, Var.INTEGER, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // j ::= DECIMAL 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.DOUBLE, new Variable(var, Var.DOUBLE, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // j ::= STR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.STRING, new Variable(var, Var.STRING, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // j ::= CHAR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.CHAR, new Variable(var, Var.CHAR, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // j ::= boolean_val 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.BOOLEAN, var); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // j ::= id 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ID, new Variable(token)); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // j ::= l 
            {
              Operation RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ARRAY_ACCESS, array_access); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // j ::= LPAREN a RPAREN 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation var = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = var; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // j ::= function_call 
            {
              Operation RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		FunctionCall call = (FunctionCall)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.FUNCTION_CALL, call); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",65, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // eol ::= EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",65, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // eol_ ::= eol_ EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",66, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // eol_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",66, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // control ::= list_if 
            {
              Instruction RESULT =null;
		int ifInsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int ifInsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		IfInstruction ifIns = (IfInstruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = ifIns; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // control ::= for_ 
            {
              Instruction RESULT =null;
		int for_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int for_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		For for_ = (For)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = for_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // control ::= while_ 
            {
              Instruction RESULT =null;
		int while_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int while_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		While while_ = (While)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = while_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // control ::= do_while 
            {
              Instruction RESULT =null;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		DoWhile do_while = (DoWhile)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = do_while; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // control ::= switch_ 
            {
              Instruction RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Switch sw = (Switch)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = sw; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list_if ::= if_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // list_if ::= if_ else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // list_if ::= if_ list_else_if 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_if ::= if_ list_else_if else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_ ::= IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_ ::= ELSE eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // list_else_if ::= list_else_if else_if 
            {
              List<If> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // list_else_if ::= else_if 
            {
              List<If> RESULT =null;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_if ::= ELSE IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_ ::= FOR LPAREN for_assign SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_assign ::= INT id EQUAL a 
            {
              Assignment RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(type, id, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_assign ::= assignment 
            {
              Assignment RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = assign; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // while_ ::= WHILE LPAREN a RPAREN eol function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // do_while ::= DO_WHILE eol function_body WHILE LPAREN a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		
					RESULT = new DoWhile(info, token, list_ins, condition);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // switch_ ::= SWITCH LPAREN a RPAREN eol switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // switch_body ::= INDENT case_list default_ DEDENT 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int default_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int default_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Case default_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = list;
					if(default_ != null) {
						RESULT.add(default_);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // switch_body ::= 
            {
              List<Case> RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case_list ::= case_list case_ 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int case_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int case_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Case case_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(case_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_list ::= 
            {
              List<Case> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_ ::= CASE a eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, operation, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // default_ ::= DEFAULT eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, null, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // default_ ::= 
            {
              Case RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exit_ ::= EXIT 
            {
              Exit RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Exit(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("exit_",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // continue_ ::= CONTINUE 
            {
              Continue RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Continue(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("continue_",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // return_ ::= RETURN a 
            {
              Return RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Return(info, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("return_",61, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function ::= id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(id, false, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // function ::= KEEP id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(info, false, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // function ::= KEEP type id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(info, true, token_type, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // function ::= type id LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;
		int token_typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int token_typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token_type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Function(token_type, false, token_type, id, list, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // principal ::= MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Principal(list_ins); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // principal ::= KEEP MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Principal(list_ins); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // message ::= MSG LPAREN a RPAREN 
            {
              Message RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new Message(token, operation);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // params_f ::= params 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // params_f ::= 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // params ::= params COMMA param 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Parameter param = (Parameter)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(param); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",56, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // params ::= param 
            {
              List<Parameter> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Parameter param = (Parameter)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(param); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",56, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // param ::= type id 
            {
              Parameter RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Parameter(type, id); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("param",55, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // note ::= NOTE 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("note",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // note ::= IF 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("note",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // play ::= PLAY LPAREN note COMMA a COMMA a COMMA a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("play",62, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // wait ::= WAIT LPAREN a COMMA a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("wait",63, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // order ::= ORDER LPAREN id COMMA WAY RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("order",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // function_call ::= id LPAREN args_ RPAREN 
            {
              FunctionCall RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new FunctionCall(token, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // args_ ::= args 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args_",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // args_ ::= 
            {
              List<Operation> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args_",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // args ::= args COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // args ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("args",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // id ::= ID 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // id ::= LENGTH 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // id ::= SUM 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = t; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AudioParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
              return CUP$AudioParser$do_action_part00000000(
                               CUP$AudioParser$act_num,
                               CUP$AudioParser$parser,
                               CUP$AudioParser$stack,
                               CUP$AudioParser$top);
    }
}

}
