
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.lang.reflect.Array;
import com.cesar31.audiogenerator.instruction.*;
import com.cesar31.audiogenerator.control.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AudioParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AudioParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AudioParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AudioParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AudioParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\015\007\000\002\063" +
    "\004\000\002\063\002\000\002\014\003\000\002\014\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\002\000\002" +
    "\007\011\000\002\005\004\000\002\005\002\000\002\006" +
    "\005\000\002\006\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\011\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\004\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\054\004" +
    "\000\002\045\013\000\002\035\004\000\002\035\003\000" +
    "\002\034\005\000\002\053\004\000\002\053\002\000\002" +
    "\046\005\000\002\046\005\000\002\050\005\000\002\050" +
    "\003\000\002\047\003\000\002\036\005\000\002\036\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\003\000\002\027\005\000\002\027" +
    "\003\000\002\030\004\000\002\030\003\000\002\031\004" +
    "\000\002\031\003\000\002\032\004\000\002\032\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\005\000\002\021\003\000\002\021\003" +
    "\000\002\004\003\000\002\004\002\000\002\002\004\000" +
    "\002\002\003\000\002\052\004\000\002\052\003\000\002" +
    "\051\004\000\002\051\002\000\002\016\010\000\002\017" +
    "\005\000\002\020\011\000\002\043\014\000\002\012\007" +
    "\000\002\012\003\000\002\037\010\000\002\044\005\000" +
    "\002\055\010\000\002\056\006\000\002\057\005\000\002" +
    "\060\005\000\002\061\005\000\002\062\006\000\002\040" +
    "\010\000\002\040\012\000\002\040\011\000\002\040\011" +
    "\000\002\041\007\000\002\042\010\000\002\064\003\000" +
    "\002\064\002\000\002\065\005\000\002\065\003\000\002" +
    "\066\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\004\uff99\125\uff99\001\002\000\006\004" +
    "\007\125\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\062\011\001\002\000\006\004" +
    "\uff9a\125\uff9a\001\002\000\010\002\ufffe\005\013\125\ufffe" +
    "\001\002\000\006\002\uffe9\125\uffe9\001\002\000\004\062" +
    "\014\001\002\000\014\002\uffe4\103\uffe4\104\uffe4\120\uffe4" +
    "\125\uffe4\001\002\000\010\002\uffff\103\016\125\uffff\001" +
    "\002\000\004\062\017\001\002\000\014\002\uffe5\103\uffe5" +
    "\104\uffe5\120\uffe5\125\uffe5\001\002\000\006\002\ufffd\125" +
    "\030\001\002\000\004\002\000\001\002\000\006\002\ufffb" +
    "\125\ufffb\001\002\000\010\002\ufffc\065\046\125\047\001" +
    "\002\000\006\002\uffec\125\uffec\001\002\000\006\002\ufff8" +
    "\125\ufff8\001\002\000\006\002\ufff6\125\ufff6\001\002\000" +
    "\006\002\ufff2\125\ufff2\001\002\000\010\002\uff9b\065\uff9b" +
    "\125\uff9b\001\002\000\006\002\uffea\125\uffea\001\002\000" +
    "\006\002\ufff3\125\ufff3\001\002\000\006\002\uffee\125\uffee" +
    "\001\002\000\006\002\ufff1\125\ufff1\001\002\000\006\002" +
    "\ufff4\125\ufff4\001\002\000\006\002\ufffa\125\ufffa\001\002" +
    "\000\006\002\uffef\125\uffef\001\002\000\006\002\ufff7\125" +
    "\ufff7\001\002\000\006\002\ufff5\125\ufff5\001\002\000\006" +
    "\002\ufff0\125\ufff0\001\002\000\006\002\uffeb\125\uffeb\001" +
    "\002\000\006\002\ufff9\125\ufff9\001\002\000\006\002\uffed" +
    "\125\uffed\001\002\000\056\006\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\060\uff9d\061\uff9d\062\uff9d\065\uff9d\001\002" +
    "\000\010\002\uff9c\065\uff9c\125\uff9c\001\002\000\056\006" +
    "\055\007\uff9f\010\056\011\053\012\076\013\067\014\075" +
    "\020\065\021\054\022\063\023\074\024\051\025\100\026" +
    "\101\027\061\030\070\031\052\032\062\060\064\061\071" +
    "\062\066\065\060\001\002\000\006\002\uff8d\125\uff8d\001" +
    "\002\000\006\002\uff8c\125\uff8c\001\002\000\006\017\uffe2" +
    "\062\uffe2\001\002\000\010\002\uff97\020\335\125\uff97\001" +
    "\002\000\020\007\uffa0\010\056\011\053\012\076\013\067" +
    "\014\075\062\324\001\002\000\006\017\uffe3\062\uffe3\001" +
    "\002\000\004\062\320\001\002\000\056\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\060\uff9e\061\uff9e\062\uff9e\065" +
    "\uff9e\001\002\000\004\122\315\001\002\000\030\015\113" +
    "\016\120\062\115\063\130\064\111\074\133\102\112\106" +
    "\117\122\114\126\123\127\110\001\002\000\004\122\311" +
    "\001\002\000\004\122\306\001\002\000\004\122\303\001" +
    "\002\000\016\104\226\113\224\114\223\115\225\120\210" +
    "\122\272\001\002\000\006\017\uffdf\062\uffdf\001\002\000" +
    "\006\002\uff91\125\uff91\001\002\000\004\122\270\001\002" +
    "\000\006\002\uffde\125\uffde\001\002\000\012\104\265\113" +
    "\263\114\262\115\264\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\006\017\uffe0\062\uffe0" +
    "\001\002\000\006\017\uffe1\062\uffe1\001\002\000\004\007" +
    "\231\001\002\000\006\002\uff8e\125\uff8e\001\002\000\004" +
    "\122\102\001\002\000\006\007\104\062\103\001\002\000" +
    "\014\104\226\113\224\114\223\115\225\120\210\001\002" +
    "\000\004\010\217\001\002\000\004\124\107\001\002\000" +
    "\004\124\uff93\001\002\000\030\015\113\016\120\062\115" +
    "\063\130\064\111\074\133\102\112\106\117\122\114\126" +
    "\123\127\110\001\002\000\062\002\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\075\uffa7\076\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\103\uffa7\105\uffa7\106\uffa7\107\uffa7" +
    "\110\uffa7\111\uffa7\112\uffa7\117\uffa7\121\uffa7\123\uffa7\124" +
    "\uffa7\125\uffa7\001\002\000\062\002\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\100\uffa9\101\uffa9\103\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\117\uffa9\121\uffa9\123\uffa9\124" +
    "\uffa9\125\uffa9\001\002\000\024\015\113\016\120\062\115" +
    "\063\130\064\111\074\133\122\114\126\123\127\110\001" +
    "\002\000\062\002\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\103\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2" +
    "\112\uffa2\117\uffa2\121\uffa2\123\uffa2\124\uffa2\125\uffa2\001" +
    "\002\000\030\015\113\016\120\062\115\063\130\064\111" +
    "\074\133\102\112\106\117\122\114\126\123\127\110\001" +
    "\002\000\064\002\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\103\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5" +
    "\112\uffa5\117\uffa5\120\210\121\uffa5\123\uffa5\124\uffa5\125" +
    "\uffa5\001\002\000\062\002\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\073\uffa6\075\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\101\uffa6\103\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\111\uffa6\112\uffa6\117\uffa6\121\uffa6\123\uffa6\124\uffa6\125" +
    "\uffa6\001\002\000\026\015\113\016\120\062\115\063\130" +
    "\064\111\074\133\102\112\122\114\126\123\127\110\001" +
    "\002\000\062\002\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\103\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1" +
    "\112\uffa1\117\uffa1\121\uffa1\123\uffa1\124\uffa1\125\uffa1\001" +
    "\002\000\062\002\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4" +
    "\072\uffa4\073\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101" +
    "\uffa4\103\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4" +
    "\112\uffa4\117\uffa4\121\uffa4\123\uffa4\124\uffa4\125\uffa4\001" +
    "\002\000\062\002\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101" +
    "\uffab\103\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab" +
    "\112\uffab\117\uffab\121\uffab\123\uffab\124\uffab\125\uffab\001" +
    "\002\000\062\002\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101" +
    "\uffa8\103\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8" +
    "\112\uffa8\117\uffa8\121\uffa8\123\uffa8\124\uffa8\125\uffa8\001" +
    "\002\000\062\002\uffad\066\uffad\067\uffad\070\uffad\071\uffad" +
    "\072\uffad\073\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\103\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad" +
    "\112\uffad\117\uffad\121\uffad\123\uffad\124\uffad\125\uffad\001" +
    "\002\000\062\002\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101" +
    "\uffaf\103\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf" +
    "\112\uffaf\117\uffaf\121\uffaf\123\uffaf\124\uffaf\125\uffaf\001" +
    "\002\000\062\002\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\103\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1" +
    "\112\203\117\uffb1\121\uffb1\123\uffb1\124\uffb1\125\uffb1\001" +
    "\002\000\060\002\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\103\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3" +
    "\117\uffb3\121\uffb3\123\uffb3\124\uffb3\125\uffb3\001\002\000" +
    "\062\002\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\103" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa" +
    "\117\uffaa\121\uffaa\123\uffaa\124\uffaa\125\uffaa\001\002\000" +
    "\060\002\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103" +
    "\uffb7\105\uffb7\106\uffb7\107\163\110\162\111\161\117\uffb7" +
    "\121\uffb7\123\uffb7\124\uffb7\125\uffb7\001\002\000\052\002" +
    "\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
    "\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\103\uffba\105" +
    "\156\106\157\117\uffba\121\uffba\123\uffba\124\uffba\125\uffba" +
    "\001\002\000\022\015\113\016\120\062\115\063\130\064" +
    "\111\122\114\126\123\127\110\001\002\000\046\002\uffc1" +
    "\066\154\067\153\070\147\071\151\072\152\073\150\075" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\103\uffc1\117\uffc1" +
    "\121\uffc1\123\uffc1\124\uffc1\125\uffc1\001\002\000\032\002" +
    "\uffc4\075\145\076\144\077\uffc4\100\uffc4\101\uffc4\103\uffc4" +
    "\117\uffc4\121\uffc4\123\uffc4\124\uffc4\125\uffc4\001\002\000" +
    "\012\077\141\100\137\101\142\124\140\001\002\000\030" +
    "\015\113\016\120\062\115\063\130\064\111\074\133\102" +
    "\112\106\117\122\114\126\123\127\110\001\002\000\004" +
    "\062\103\001\002\000\030\015\113\016\120\062\115\063" +
    "\130\064\111\074\133\102\112\106\117\122\114\126\123" +
    "\127\110\001\002\000\030\015\113\016\120\062\115\063" +
    "\130\064\111\074\133\102\112\106\117\122\114\126\123" +
    "\127\110\001\002\000\032\002\uffc5\075\145\076\144\077" +
    "\uffc5\100\uffc5\101\uffc5\103\uffc5\117\uffc5\121\uffc5\123\uffc5" +
    "\124\uffc5\125\uffc5\001\002\000\030\015\113\016\120\062" +
    "\115\063\130\064\111\074\133\102\112\106\117\122\114" +
    "\126\123\127\110\001\002\000\030\015\113\016\120\062" +
    "\115\063\130\064\111\074\133\102\112\106\117\122\114" +
    "\126\123\127\110\001\002\000\046\002\uffc3\066\154\067" +
    "\153\070\147\071\151\072\152\073\150\075\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\101\uffc3\103\uffc3\117\uffc3\121\uffc3\123" +
    "\uffc3\124\uffc3\125\uffc3\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\052\002\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\103\uffc0\105\156\106\157" +
    "\117\uffc0\121\uffc0\123\uffc0\124\uffc0\125\uffc0\001\002\000" +
    "\030\015\113\016\120\062\115\063\130\064\111\074\133" +
    "\102\112\106\117\122\114\126\123\127\110\001\002\000" +
    "\030\015\113\016\120\062\115\063\130\064\111\074\133" +
    "\102\112\106\117\122\114\126\123\127\110\001\002\000" +
    "\060\002\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8" +
    "\073\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\103" +
    "\uffb8\105\uffb8\106\uffb8\107\163\110\162\111\161\117\uffb8" +
    "\121\uffb8\123\uffb8\124\uffb8\125\uffb8\001\002\000\030\015" +
    "\113\016\120\062\115\063\130\064\111\074\133\102\112" +
    "\106\117\122\114\126\123\127\110\001\002\000\030\015" +
    "\113\016\120\062\115\063\130\064\111\074\133\102\112" +
    "\106\117\122\114\126\123\127\110\001\002\000\030\015" +
    "\113\016\120\062\115\063\130\064\111\074\133\102\112" +
    "\106\117\122\114\126\123\127\110\001\002\000\060\002" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\103\uffb6\105" +
    "\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\117\uffb6\121\uffb6" +
    "\123\uffb6\124\uffb6\125\uffb6\001\002\000\060\002\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\103\uffb5\105\uffb5\106" +
    "\uffb5\107\uffb5\110\uffb5\111\uffb5\117\uffb5\121\uffb5\123\uffb5" +
    "\124\uffb5\125\uffb5\001\002\000\060\002\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\103\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\117\uffb4\121\uffb4\123\uffb4\124\uffb4" +
    "\125\uffb4\001\002\000\060\002\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\103\uffb9\105\uffb9\106\uffb9\107\163\110" +
    "\162\111\161\117\uffb9\121\uffb9\123\uffb9\124\uffb9\125\uffb9" +
    "\001\002\000\052\002\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\103\uffbf\105\156\106\157\117\uffbf\121\uffbf\123" +
    "\uffbf\124\uffbf\125\uffbf\001\002\000\052\002\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\101\uffbc\103\uffbc\105\156\106\157" +
    "\117\uffbc\121\uffbc\123\uffbc\124\uffbc\125\uffbc\001\002\000" +
    "\052\002\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\103" +
    "\uffbd\105\156\106\157\117\uffbd\121\uffbd\123\uffbd\124\uffbd" +
    "\125\uffbd\001\002\000\052\002\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\103\uffbb\105\156\106\157\117\uffbb\121" +
    "\uffbb\123\uffbb\124\uffbb\125\uffbb\001\002\000\052\002\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\103\uffbe\105\156" +
    "\106\157\117\uffbe\121\uffbe\123\uffbe\124\uffbe\125\uffbe\001" +
    "\002\000\046\002\uffc2\066\154\067\153\070\147\071\151" +
    "\072\152\073\150\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\103\uffc2\117\uffc2\121\uffc2\123\uffc2\124\uffc2\125\uffc2" +
    "\001\002\000\032\002\uffc7\075\145\076\144\077\uffc7\100" +
    "\uffc7\101\uffc7\103\uffc7\117\uffc7\121\uffc7\123\uffc7\124\uffc7" +
    "\125\uffc7\001\002\000\004\123\200\001\002\000\006\002" +
    "\uff95\125\uff95\001\002\000\032\002\uffc6\075\145\076\144" +
    "\077\uffc6\100\uffc6\101\uffc6\103\uffc6\117\uffc6\121\uffc6\123" +
    "\uffc6\124\uffc6\125\uffc6\001\002\000\062\002\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\075\uffac\076" +
    "\uffac\077\uffac\100\uffac\101\uffac\103\uffac\105\uffac\106\uffac" +
    "\107\uffac\110\uffac\111\uffac\112\uffac\117\uffac\121\uffac\123" +
    "\uffac\124\uffac\125\uffac\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\060\002\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\101\uffb2\103\uffb2\105\uffb2\106\uffb2" +
    "\107\uffb2\110\uffb2\111\uffb2\117\uffb2\121\uffb2\123\uffb2\124" +
    "\uffb2\125\uffb2\001\002\000\062\002\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\075\uffb0\076\uffb0\077" +
    "\uffb0\100\uffb0\101\uffb0\103\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\111\uffb0\112\uffb0\117\uffb0\121\uffb0\123\uffb0\124" +
    "\uffb0\125\uffb0\001\002\000\074\002\uffd5\066\uffd5\067\uffd5" +
    "\070\uffd5\071\uffd5\072\uffd5\073\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5" +
    "\107\uffd5\110\uffd5\111\uffd5\112\uffd5\113\uffd5\114\uffd5\115" +
    "\uffd5\117\uffd5\120\210\121\uffd5\123\uffd5\124\uffd5\125\uffd5" +
    "\001\002\000\074\002\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\101\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110" +
    "\uffd2\111\uffd2\112\uffd2\113\uffd2\114\uffd2\115\uffd2\117\uffd2" +
    "\120\uffd2\121\uffd2\123\uffd2\124\uffd2\125\uffd2\001\002\000" +
    "\030\015\113\016\120\062\115\063\130\064\111\074\133" +
    "\102\112\106\117\122\114\126\123\127\110\001\002\000" +
    "\012\077\141\100\137\101\142\121\212\001\002\000\074" +
    "\002\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\114\uffd1\115\uffd1\117\uffd1\120\uffd1\121\uffd1" +
    "\123\uffd1\124\uffd1\125\uffd1\001\002\000\074\002\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\101\uffd3\103\uffd3\104\uffd3\105" +
    "\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3" +
    "\114\uffd3\115\uffd3\117\uffd3\120\uffd3\121\uffd3\123\uffd3\124" +
    "\uffd3\125\uffd3\001\002\000\012\077\141\100\137\101\142" +
    "\123\215\001\002\000\062\002\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\075\uffa3\076\uffa3\077\uffa3" +
    "\100\uffa3\101\uffa3\103\uffa3\105\uffa3\106\uffa3\107\uffa3\110" +
    "\uffa3\111\uffa3\112\uffa3\117\uffa3\121\uffa3\123\uffa3\124\uffa3" +
    "\125\uffa3\001\002\000\062\002\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\103\uffae\105\uffae\106\uffae\107\uffae\110" +
    "\uffae\111\uffae\112\uffae\117\uffae\121\uffae\123\uffae\124\uffae" +
    "\125\uffae\001\002\000\004\062\220\001\002\000\004\104" +
    "\221\001\002\000\030\015\113\016\120\062\115\063\130" +
    "\064\111\074\133\102\112\106\117\122\114\126\123\127" +
    "\110\001\002\000\012\077\141\100\137\101\142\124\uff94" +
    "\001\002\000\012\002\uffdb\123\uffdb\124\uffdb\125\uffdb\001" +
    "\002\000\030\015\113\016\120\062\115\063\130\064\111" +
    "\074\133\102\112\106\117\122\114\126\123\127\110\001" +
    "\002\000\012\002\uffda\123\uffda\124\uffda\125\uffda\001\002" +
    "\000\030\015\113\016\120\062\115\063\130\064\111\074" +
    "\133\102\112\106\117\122\114\126\123\127\110\001\002" +
    "\000\020\002\uffdd\077\141\100\137\101\142\123\uffdd\124" +
    "\uffdd\125\uffdd\001\002\000\020\002\uffdc\077\141\100\137" +
    "\101\142\123\uffdc\124\uffdc\125\uffdc\001\002\000\014\010" +
    "\056\011\053\012\076\013\067\014\075\001\002\000\006" +
    "\017\234\062\014\001\002\000\012\002\uffe6\103\016\104" +
    "\256\125\uffe6\001\002\000\004\062\014\001\002\000\006" +
    "\103\016\120\210\001\002\000\012\002\uffcf\104\237\120" +
    "\210\125\uffcf\001\002\000\004\116\241\001\002\000\006" +
    "\002\uffd4\125\uffd4\001\002\000\032\015\113\016\120\062" +
    "\115\063\130\064\111\074\133\102\112\106\117\116\241" +
    "\122\114\126\123\127\110\001\002\000\006\002\uffd0\125" +
    "\uffd0\001\002\000\006\103\253\117\254\001\002\000\006" +
    "\103\uffcb\117\uffcb\001\002\000\006\103\250\117\251\001" +
    "\002\000\006\103\uffca\117\uffca\001\002\000\014\077\141" +
    "\100\137\101\142\103\uffc8\117\uffc8\001\002\000\004\116" +
    "\241\001\002\000\012\002\uffcd\103\uffcd\117\uffcd\125\uffcd" +
    "\001\002\000\006\103\uffcc\117\uffcc\001\002\000\030\015" +
    "\113\016\120\062\115\063\130\064\111\074\133\102\112" +
    "\106\117\122\114\126\123\127\110\001\002\000\012\002" +
    "\uffce\103\uffce\117\uffce\125\uffce\001\002\000\014\077\141" +
    "\100\137\101\142\103\uffc9\117\uffc9\001\002\000\030\015" +
    "\113\016\120\062\115\063\130\064\111\074\133\102\112" +
    "\106\117\122\114\126\123\127\110\001\002\000\006\002" +
    "\uffe8\125\uffe8\001\002\000\014\002\uffe7\077\141\100\137" +
    "\101\142\125\uffe7\001\002\000\014\002\uff8f\077\141\100" +
    "\137\101\142\125\uff8f\001\002\000\012\002\uffd7\123\uffd7" +
    "\124\uffd7\125\uffd7\001\002\000\030\015\113\016\120\062" +
    "\115\063\130\064\111\074\133\102\112\106\117\122\114" +
    "\126\123\127\110\001\002\000\012\002\uffd6\123\uffd6\124" +
    "\uffd6\125\uffd6\001\002\000\030\015\113\016\120\062\115" +
    "\063\130\064\111\074\133\102\112\106\117\122\114\126" +
    "\123\127\110\001\002\000\020\002\uffd9\077\141\100\137" +
    "\101\142\123\uffd9\124\uffd9\125\uffd9\001\002\000\020\002" +
    "\uffd8\077\141\100\137\101\142\123\uffd8\124\uffd8\125\uffd8" +
    "\001\002\000\004\123\271\001\002\000\006\002\uff86\125" +
    "\uff86\001\002\000\016\010\056\011\053\012\076\013\067" +
    "\014\075\123\uff83\001\002\000\004\123\302\001\002\000" +
    "\006\103\uff81\123\uff81\001\002\000\006\103\300\123\uff84" +
    "\001\002\000\004\062\277\001\002\000\006\103\uff80\123" +
    "\uff80\001\002\000\014\010\056\011\053\012\076\013\067" +
    "\014\075\001\002\000\006\103\uff82\123\uff82\001\002\000" +
    "\006\002\uff8a\125\uff8a\001\002\000\030\015\113\016\120" +
    "\062\115\063\130\064\111\074\133\102\112\106\117\122" +
    "\114\126\123\127\110\001\002\000\012\077\141\100\137" +
    "\101\142\123\305\001\002\000\006\002\uff98\125\uff98\001" +
    "\002\000\030\015\113\016\120\062\115\063\130\064\111" +
    "\074\133\102\112\106\117\122\114\126\123\127\110\001" +
    "\002\000\012\077\141\100\137\101\142\123\310\001\002" +
    "\000\006\002\uff85\125\uff85\001\002\000\030\015\113\016" +
    "\120\062\115\063\130\064\111\074\133\102\112\106\117" +
    "\122\114\126\123\127\110\001\002\000\012\077\141\100" +
    "\137\101\142\123\313\001\002\000\006\002\uff90\125\uff90" +
    "\001\002\000\014\002\uff8b\077\141\100\137\101\142\125" +
    "\uff8b\001\002\000\030\015\113\016\120\062\115\063\130" +
    "\064\111\074\133\102\112\106\117\122\114\126\123\127" +
    "\110\001\002\000\012\077\141\100\137\101\142\123\317" +
    "\001\002\000\006\002\uff92\125\uff92\001\002\000\004\122" +
    "\321\001\002\000\016\010\056\011\053\012\076\013\067" +
    "\014\075\123\uff83\001\002\000\004\123\323\001\002\000" +
    "\006\002\uff87\125\uff87\001\002\000\004\122\332\001\002" +
    "\000\004\062\326\001\002\000\004\122\327\001\002\000" +
    "\016\010\056\011\053\012\076\013\067\014\075\123\uff83" +
    "\001\002\000\004\123\331\001\002\000\006\002\uff89\125" +
    "\uff89\001\002\000\016\010\056\011\053\012\076\013\067" +
    "\014\075\123\uff83\001\002\000\004\123\334\001\002\000" +
    "\006\002\uff88\125\uff88\001\002\000\004\122\336\001\002" +
    "\000\030\015\113\016\120\062\115\063\130\064\111\074" +
    "\133\102\112\106\117\122\114\126\123\127\110\001\002" +
    "\000\012\077\141\100\137\101\142\123\340\001\002\000" +
    "\006\002\uff96\125\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\015\004\051\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\011\001\001\000\006\013" +
    "\017\014\020\001\001\000\004\006\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\007\021\011\035\016\037\017\025\020\040" +
    "\037\034\040\023\041\042\042\030\043\024\044\031\045" +
    "\043\052\022\055\026\056\033\057\041\060\036\061\032" +
    "\062\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\056\004\076" +
    "\010\071\054\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\021\115\022\313\023\134" +
    "\024\133\025\131\026\130\027\126\030\125\031\124\032" +
    "\123\033\121\054\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\206\035\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\021\115\022" +
    "\260\023\134\024\133\025\131\026\130\027\126\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\105\012\104\054\072\001" +
    "\001\000\006\034\206\035\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\021\115\022" +
    "\135\023\134\024\133\025\131\026\130\027\126\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\115\032\215\033\121" +
    "\054\120\001\001\000\002\001\001\000\032\021\115\022" +
    "\213\023\134\024\133\025\131\026\130\027\126\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\006\034" +
    "\206\035\205\001\001\000\002\001\001\000\014\021\115" +
    "\031\204\032\123\033\121\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\115\033\201\054\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\021\115\023\200\024\133\025\131\026\130\027\126\030" +
    "\125\031\124\032\123\033\121\054\120\001\001\000\006" +
    "\010\176\054\072\001\001\000\030\021\115\023\175\024" +
    "\133\025\131\026\130\027\126\030\125\031\124\032\123" +
    "\033\121\054\120\001\001\000\030\021\115\023\142\024" +
    "\133\025\131\026\130\027\126\030\125\031\124\032\123" +
    "\033\121\054\120\001\001\000\002\001\001\000\026\021" +
    "\115\024\174\025\131\026\130\027\126\030\125\031\124" +
    "\032\123\033\121\054\120\001\001\000\026\021\115\024" +
    "\145\025\131\026\130\027\126\030\125\031\124\032\123" +
    "\033\121\054\120\001\001\000\002\001\001\000\024\021" +
    "\115\025\173\026\130\027\126\030\125\031\124\032\123" +
    "\033\121\054\120\001\001\000\024\021\115\025\172\026" +
    "\130\027\126\030\125\031\124\032\123\033\121\054\120" +
    "\001\001\000\024\021\115\025\171\026\130\027\126\030" +
    "\125\031\124\032\123\033\121\054\120\001\001\000\024" +
    "\021\115\025\170\026\130\027\126\030\125\031\124\032" +
    "\123\033\121\054\120\001\001\000\024\021\115\025\167" +
    "\026\130\027\126\030\125\031\124\032\123\033\121\054" +
    "\120\001\001\000\024\021\115\025\154\026\130\027\126" +
    "\030\125\031\124\032\123\033\121\054\120\001\001\000" +
    "\002\001\001\000\022\021\115\026\166\027\126\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\022\021" +
    "\115\026\157\027\126\030\125\031\124\032\123\033\121" +
    "\054\120\001\001\000\002\001\001\000\020\021\115\027" +
    "\165\030\125\031\124\032\123\033\121\054\120\001\001" +
    "\000\020\021\115\027\164\030\125\031\124\032\123\033" +
    "\121\054\120\001\001\000\020\021\115\027\163\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\115\027\203\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\212\001\001\000\002" +
    "\001\001\000\032\021\115\022\210\023\134\024\133\025" +
    "\131\026\130\027\126\030\125\031\124\032\123\033\121" +
    "\054\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\021" +
    "\115\022\221\023\134\024\133\025\131\026\130\027\126" +
    "\030\125\031\124\032\123\033\121\054\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\021\115\022\227" +
    "\023\134\024\133\025\131\026\130\027\126\030\125\031" +
    "\124\032\123\033\121\054\120\001\001\000\002\001\001" +
    "\000\032\021\115\022\226\023\134\024\133\025\131\026" +
    "\130\027\126\030\125\031\124\032\123\033\121\054\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\231\001\001\000\004\006\232\001\001\000\004\005\256" +
    "\001\001\000\004\006\234\001\001\000\006\034\206\035" +
    "\235\001\001\000\006\034\212\053\237\001\001\000\004" +
    "\046\241\001\001\000\002\001\001\000\042\021\115\022" +
    "\246\023\134\024\133\025\131\026\130\027\126\030\125" +
    "\031\124\032\123\033\121\036\242\046\245\047\243\050" +
    "\244\054\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\245\047\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\021\115\022\254\023" +
    "\134\024\133\025\131\026\130\027\126\030\125\031\124" +
    "\032\123\033\121\054\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\021\115\022\257\023\134\024\133" +
    "\025\131\026\130\027\126\030\125\031\124\032\123\033" +
    "\121\054\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\021\115\022" +
    "\266\023\134\024\133\025\131\026\130\027\126\030\125" +
    "\031\124\032\123\033\121\054\120\001\001\000\002\001" +
    "\001\000\032\021\115\022\265\023\134\024\133\025\131" +
    "\026\130\027\126\030\125\031\124\032\123\033\121\054" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\275\064\272\065" +
    "\274\066\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\275\066\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\021\115\022\303\023\134\024\133\025" +
    "\131\026\130\027\126\030\125\031\124\032\123\033\121" +
    "\054\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\021\115\022\306\023\134\024\133\025\131\026\130" +
    "\027\126\030\125\031\124\032\123\033\121\054\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\021\115" +
    "\022\311\023\134\024\133\025\131\026\130\027\126\030" +
    "\125\031\124\032\123\033\121\054\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\021" +
    "\115\022\315\023\134\024\133\025\131\026\130\027\126" +
    "\030\125\031\124\032\123\033\121\054\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\275\064\321\065\274\066\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\275\064\327\065\274\066" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\275\064\332\065\274\066\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\021\115" +
    "\022\336\023\134\024\133\025\131\026\130\027\126\030" +
    "\125\031\124\032\123\033\121\054\120\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AudioParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AudioParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AudioParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Integer min, max;
	private StackHandler stackHandler;

	public AudioParser(AudioLex lex) {
		super(lex);
		this.min = 0;
		this.max = 0;
		this.stackHandler = new StackHandler();
	}

	public Stack<Ins> getStack() {
		return this.stackHandler.getStack();
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			// expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AudioParser$actions {
  private final AudioParser parser;

  /** Constructor */
  CUP$AudioParser$actions(AudioParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action_part00000000(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AudioParser$result;

      /* select the action based on the action number */
      switch (CUP$AudioParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		RESULT = start_val;
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AudioParser$parser.done_parsing();
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio1 ::= eol TRACK ID extends_ bod 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = list_i;
					if(!getStack().isEmpty()) {
						for(Ins i : getStack()) {
							if(i.isInAst()) {
								RESULT.add((Instruction) i);
							}
						}
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // extends_ ::= EXTENDS id_list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extends_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bod ::= body 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bod ::= body eol_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= body statement 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Assignment> list = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = list_i;
					for(Assignment a : list) {
						stackHandler.checkStackForInstructionsNonFather(RESULT , a);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= body assign 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsNonFather(RESULT, assign); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= body array_statement 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<ArrayAssignment> array_assign = (List<ArrayAssignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = list_i;
					for(ArrayAssignment a : array_assign) {
						stackHandler.checkStackForInstructionsNonFather(RESULT, a);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= body for_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int for_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int for_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		For for_ = (For)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsFather(RESULT, for_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= body if_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsIf(RESULT, if_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= body else_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsIf(RESULT, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= body else_if 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsIf(RESULT, else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= body while_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		While wh = (While)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsFather(RESULT, wh); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= body do_while 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		DoWhile do_while = (DoWhile)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsFather(RESULT, do_while); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= body switch_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= body case_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= body default_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= body exit_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body ::= body continue_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= body return_ 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body ::= body function 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list_i; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body ::= body principal 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Principal principal = (Principal)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsFather(RESULT, principal); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body ::= body message 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int messageleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Message message = (Message)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_i; stackHandler.checkStackForInstructionsNonFather(RESULT, message); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= eol_ tab keep VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int keepleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int keepright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Boolean keep = (Boolean)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					if(min <= t && t <= max) {
						max = t;
					} else if(t == 0) {
						min = 0;
						max = 0;
					} else {
						System.out.println("statement mal identado");
					}

					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(t, keep, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= EQUAL a 
            {
              Operation RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = operation; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_list ::= id_list COMMA ID 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					list.add(token);
					RESULT = list;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id_list ::= ID 
            {
              List<Token> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Token>();
					RESULT.add(token);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= DOB 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= BOOL 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= CAD 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= CAR 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign ::= eol_ tab assignment 
            {
              Assignment RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					assign.setTab(t);
					RESULT = assign;
					if(t >= 1 && min <= t && t <= max) {
						max = t;
					} else {
						System.out.println("Assignment mal identado!");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assign",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= ID EQUAL a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= ID PLUS_EQ a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), operation);
					RESULT = new Assignment(token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment ::= ID PLUS_PLUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")));
					RESULT = new Assignment(token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= ID MINUS_MINUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")));
					RESULT = new Assignment(token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment ::= l EQUAL a 
            {
              Assignment RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment ::= l PLUS_EQ a 
            {
              Assignment RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= l PLUS_PLUS 
            {
              Assignment RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment ::= l MINUS_MINUS 
            {
              Assignment RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l ::= ID dimensions 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("l",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_statement ::= eol_ tab keep VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayAssignment> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int keepleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int keepright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Boolean keep = (Boolean)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> dimensions = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					if(min <= t && t <= max) {
						max = t;
					} else if(t == 0) {
						min = 0;
						max = 0;
					} else {
						System.out.println("Arrat-Assignment mal identado");
					}

					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayAssignment(t, keep, type, id, dimensions, array_list));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dimensions ::= dimensions dimension 
            {
              List<Operation> RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list_op = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dimensions ::= dimension 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dimension ::= LBRACKET a RBRACKET 
            {
              Operation RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = operation; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimension",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_value ::= EQUAL list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_value ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list ::= LBRACE value_list RBRACE 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list_op = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Operation.class, list_op.size());
					for(int i = 0; i < list_op.size(); i++) {
						Array.set(RESULT, i, list_op.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= LBRACE list_fn RBRACE 
            {
              Object RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Object.class, list_fn.size());
					for(int i = 0; i < list_fn.size(); i++) {
						Array.set(RESULT, i, list_fn.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_fn ::= list_fn COMMA fn 
            {
              List<Object> RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_fn; RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_fn ::= fn 
            {
              List<Object> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fn ::= list 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list_op = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("fn",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value_list ::= value_list COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value_list ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // a ::= a OR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.OR, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // a ::= a NOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOR, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a ::= a XOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.XOR, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a ::= b 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // b ::= b AND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.AND, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b ::= b NAND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NAND, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // b ::= c 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c ::= c EQEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.EQEQ, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c ::= c NEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NEQ, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c ::= c GREATER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c ::= c SMALLER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SMALLER, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // c ::= c GRTREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER_OR_EQUAL, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c ::= c SMLLREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.LESS_OR_EQUAL, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c ::= d 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // d ::= d PLUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUM, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // d ::= d MINUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUBTRACTION, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // d ::= e 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // e ::= e TIMES f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MULTIPLICATION, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // e ::= e DIVIDE f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT =new Operation(OperationType.DIVISION, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // e ::= e MOD f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MOD, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // e ::= f 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // f ::= g POW f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.POW, l, r); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // f ::= g 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // g ::= MINUS h 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.UMINUS, l); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // g ::= h 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // h ::= NOT i 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOT, l); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // h ::= i 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // i ::= NULL j 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NULL, l); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // i ::= j 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // j ::= INTEGER 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // j ::= DECIMAL 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.DOUBLE, new Variable(Var.DOUBLE, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // j ::= STR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.STRING, new Variable(Var.STRING, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // j ::= CHAR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.CHAR, new Variable(Var.CHAR, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // j ::= boolean_val 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.BOOLEAN, var); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // j ::= ID 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ID, new Variable(token)); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // j ::= l 
            {
              Operation RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // j ::= LPAREN a RPAREN 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation var = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = var; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // keep ::= KEEP 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("keep",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // keep ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("keep",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tab ::= tab TAB 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = t + 1; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("tab",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tab ::= TAB 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("tab",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eol_ ::= eol_ EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // eol_ ::= EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // eol ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_ ::= eol_ tab IF LPAREN a RPAREN 
            {
              If RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new If(t, If.Type.IF, condition);
					if(t >= 1 && min <= t && t <= max) {
						max = t + 1;
					} else {
						System.out.println("If mal identado");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_ ::= eol_ tab ELSE 
            {
              If RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new If(t, If.Type.ELSE, null);
					if(t >=1 && min <= t && t <= max) {
						max = t + 1;
					} else {
						System.out.println("Else mal identado");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // else_if ::= eol_ tab ELSE IF LPAREN a RPAREN 
            {
              If RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new If(t, If.Type.ELSE_IF, condition);
					if(t >=1 && min <=t && t <= max) {
						max = t + 1;
					} else {
						System.out.println("Else_if mal identado");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_ ::= eol_ tab FOR LPAREN for_assign SEMI a SEMI assignment RPAREN 
            {
              For RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-8)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new For(t, assign, condition, increase);
					if(t >=1 && min <= t && t <= max) {
						max = t + 1;
					} else {
						System.out.println("For mal identado");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_assign ::= VAR INT ID EQUAL a 
            {
              Assignment RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(type, id, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_assign ::= assignment 
            {
              Assignment RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = assign; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_ ::= eol_ tab WHILE LPAREN a RPAREN 
            {
              While RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new While(t, condition);
					if(t >=1 && min <= t && t <= max) {
						max = t + 1;
					} else {
						System.out.println("While mal identado");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // do_while ::= eol_ tab DO_WHILE 
            {
              DoWhile RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new DoWhile(t);
					if(t >= 1 && min <=t && t <= max) {
						max = t + 1;
					} else {
						System.out.println("Do_while mal identado");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_ ::= eol_ tab SWITCH LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_ ::= eol_ tab CASE a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // default_ ::= eol_ tab DEFAULT 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exit_ ::= eol_ tab EXIT 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("exit_",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // continue_ ::= eol_ tab CONTINUE 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("continue_",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return_ ::= eol_ tab RETURN a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("return_",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // function ::= eol_ tab ID LPAREN params_f RPAREN 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // function ::= eol_ tab KEEP type ID LPAREN params_f RPAREN 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // function ::= eol_ tab KEEP ID LPAREN params_f RPAREN 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // function ::= eol_ tab type ID LPAREN params_f RPAREN 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // principal ::= eol_ tab MAIN LPAREN RPAREN 
            {
              Principal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		
					RESULT = new Principal(t);
					if(t != 0) {
						System.out.println("Error, metodo main mal identado");
					} else {
						min = t + 1;
						max = t + 1;
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // message ::= eol_ tab MSG LPAREN a RPAREN 
            {
              Message RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new Message(t, operation);
					if(t >= 1 && min <= t && t <= max) {
						max = t;
					} else {
						System.out.println("Message mal identado!");
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // params_f ::= params 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // params_f ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // params ::= params COMMA param 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // params ::= param 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // param ::= type ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("param",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AudioParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
              return CUP$AudioParser$do_action_part00000000(
                               CUP$AudioParser$act_num,
                               CUP$AudioParser$parser,
                               CUP$AudioParser$stack,
                               CUP$AudioParser$top);
    }
}

}
