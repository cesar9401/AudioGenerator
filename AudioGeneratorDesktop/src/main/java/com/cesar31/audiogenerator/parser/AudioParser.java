
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.lang.reflect.Array;
import com.cesar31.audiogenerator.instruction.*;
import com.cesar31.audiogenerator.control.*;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AudioParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AudioParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AudioParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AudioParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AudioParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\013\010\000\002\101" +
    "\004\000\002\101\002\000\002\012\005\000\002\012\002" +
    "\000\002\056\004\000\002\056\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\004\000\002\057\004\000\002" +
    "\015\005\000\002\015\002\000\002\014\004\000\002\014" +
    "\003\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\004\000\002\005\007\000\002\005\006\000\002" +
    "\006\006\000\002\003\004\000\002\003\002\000\002\004" +
    "\005\000\002\004\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\004\000\002\053\004\000\002\046\011" +
    "\000\002\046\010\000\002\047\010\000\002\036\004\000" +
    "\002\036\003\000\002\035\005\000\002\077\004\000\002" +
    "\077\002\000\002\050\005\000\002\050\005\000\002\052" +
    "\005\000\002\052\003\000\002\051\003\000\002\037\005" +
    "\000\002\037\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\004\000\002\031\003" +
    "\000\002\032\004\000\002\032\003\000\002\033\004\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\005\000\002\022\003" +
    "\000\002\022\003\000\002\075\004\000\002\075\003\000" +
    "\002\076\004\000\002\076\002\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\054\003\000\002\054\004\000\002\054\004" +
    "\000\002\054\005\000\002\016\010\000\002\017\005\000" +
    "\002\021\004\000\002\021\003\000\002\020\011\000\002" +
    "\044\014\000\002\010\006\000\002\010\003\000\002\040" +
    "\010\000\002\045\012\000\002\066\010\000\002\065\006" +
    "\000\002\065\002\000\002\064\004\000\002\064\002\000" +
    "\002\062\006\000\002\063\005\000\002\063\002\000\002" +
    "\061\003\000\002\060\003\000\002\100\004\000\002\041" +
    "\010\000\002\041\012\000\002\041\011\000\002\041\011" +
    "\000\002\042\007\000\002\043\006\000\002\102\003\000" +
    "\002\102\002\000\002\103\005\000\002\103\003\000\002" +
    "\104\004\000\002\067\003\000\002\067\003\000\002\070" +
    "\014\000\002\071\010\000\002\072\010\000\002\073\006" +
    "\000\002\074\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\004\uff9c\106\uff9c\001\002\000\006\004" +
    "\007\106\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\044\011\001\002\000\006\004" +
    "\uff9d\106\uff9d\001\002\000\006\005\013\106\ufffe\001\002" +
    "\000\004\106\020\001\002\000\004\044\014\001\002\000" +
    "\012\064\uffe4\065\uffe4\101\uffe4\106\uffe4\001\002\000\006" +
    "\064\016\106\uffff\001\002\000\004\044\017\001\002\000" +
    "\012\064\uffe5\065\uffe5\101\uffe5\106\uffe5\001\002\000\062" +
    "\002\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\106\uff9e\111\uff9e\112\uff9e\001\002\000\010" +
    "\002\ufffc\106\022\111\024\001\002\000\062\002\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\106\uff9f\111\uff9f\112\uff9f\001\002\000\004\002\000\001" +
    "\002\000\024\006\043\007\034\010\026\011\033\012\027" +
    "\013\031\014\044\043\030\044\036\001\002\000\004\106" +
    "\020\001\002\000\006\017\uffe3\044\uffe3\001\002\000\006" +
    "\017\uffe1\044\uffe1\001\002\000\004\103\u011f\001\002\000" +
    "\006\017\uffdf\044\uffdf\001\002\000\026\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\043\ufff8\044" +
    "\ufff8\112\ufff8\001\002\000\006\017\uffe2\044\uffe2\001\002" +
    "\000\014\010\026\011\033\012\027\013\031\014\044\001" +
    "\002\000\026\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\043\ufffa\044\ufffa\112\ufffa\001\002\000" +
    "\004\103\u0113\001\002\000\004\044\u010d\001\002\000\026" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\043\ufff9\044\ufff9\112\ufff9\001\002\000\004\106\020" +
    "\001\002\000\026\006\043\007\034\010\026\011\033\012" +
    "\027\013\031\014\044\043\030\044\036\112\u010a\001\002" +
    "\000\020\007\045\010\026\011\033\012\027\013\031\014" +
    "\044\044\046\001\002\000\006\017\uffe0\044\uffe0\001\002" +
    "\000\014\010\026\011\033\012\027\013\031\014\044\001" +
    "\002\000\004\103\376\001\002\000\004\044\050\001\002" +
    "\000\004\103\051\001\002\000\016\010\026\011\033\012" +
    "\027\013\031\014\044\104\uff76\001\002\000\004\104\061" +
    "\001\002\000\006\064\uff74\104\uff74\001\002\000\006\064" +
    "\057\104\uff77\001\002\000\004\044\056\001\002\000\006" +
    "\064\uff73\104\uff73\001\002\000\014\010\026\011\033\012" +
    "\027\013\031\014\044\001\002\000\006\064\uff75\104\uff75" +
    "\001\002\000\004\106\020\001\002\000\032\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\043\ufff4" +
    "\044\ufff4\106\022\111\064\112\ufff4\001\002\000\026\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\043\uff7c\044\uff7c\112\uff7c\001\002\000\026\007\116\020" +
    "\073\022\071\024\065\026\115\027\067\030\106\031\066" +
    "\042\072\044\076\001\002\000\004\106\uff80\001\002\000" +
    "\004\106\uff7f\001\002\000\004\103\371\001\002\000\004" +
    "\106\020\001\002\000\004\103\347\001\002\000\004\103" +
    "\344\001\002\000\004\103\337\001\002\000\030\007\uff9a" +
    "\020\uff9a\022\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\042\uff9a\044\uff9a\112\uff9a\001\002\000\030\007\uff97" +
    "\020\uff97\022\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\042\uff97\044\uff97\112\uff97\001\002\000\014\065\334" +
    "\074\332\075\331\076\333\101\125\001\002\000\030\007" +
    "\uffed\020\uffed\022\uffed\024\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\042\uffed\044\uffed\112\uffed\001\002\000\004\106" +
    "\020\001\002\000\004\106\020\001\002\000\030\007\uff98" +
    "\020\uff98\022\uff98\024\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\042\uff98\044\uff98\112\uff98\001\002\000\030\007\ufff2" +
    "\020\ufff2\022\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\042\ufff2\044\ufff2\112\ufff2\001\002\000\030\007\uff99" +
    "\020\uff99\022\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\042\uff99\044\uff99\112\uff99\001\002\000\030\007\116" +
    "\020\073\022\071\024\065\026\115\027\067\030\106\031" +
    "\066\042\072\044\076\112\325\001\002\000\004\106\020" +
    "\001\002\000\004\106\020\001\002\000\012\065\312\074" +
    "\310\075\307\076\311\001\002\000\030\007\uff9b\020\uff9b" +
    "\022\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\042" +
    "\uff9b\044\uff9b\112\uff9b\001\002\000\004\106\020\001\002" +
    "\000\032\007\uff96\020\uff96\021\270\022\uff96\024\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\042\uff96\044\uff96\112\uff96" +
    "\001\002\000\004\106\020\001\002\000\004\103\251\001" +
    "\002\000\014\010\026\011\033\012\027\013\031\014\044" +
    "\001\002\000\006\017\121\044\014\001\002\000\010\064" +
    "\016\065\246\106\uffe6\001\002\000\004\044\014\001\002" +
    "\000\006\064\016\101\125\001\002\000\010\065\227\101" +
    "\125\106\uffce\001\002\000\072\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\100" +
    "\uffd1\101\uffd1\102\uffd1\104\uffd1\105\uffd1\106\uffd1\001\002" +
    "\000\030\015\131\016\136\044\133\045\146\046\126\055" +
    "\152\063\130\067\137\103\132\107\141\110\127\001\002" +
    "\000\060\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\100" +
    "\uffa8\102\uffa8\104\uffa8\105\uffa8\106\uffa8\001\002\000\060" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\064\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\100\uffa6\102" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\001\002\000\024\015\131" +
    "\016\136\044\133\045\146\046\126\055\152\103\132\107" +
    "\141\110\127\001\002\000\060\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\064\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\100\uffa1\102\uffa1\104\uffa1\105\uffa1\106" +
    "\uffa1\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\062\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\064\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\100\uffa4\101\125\102\uffa4\104\uffa4\105\uffa4\106" +
    "\uffa4\001\002\000\060\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\064\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\100\uffa5\102\uffa5\104\uffa5\105\uffa5\106\uffa5\001" +
    "\002\000\060\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3" +
    "\100\uffa3\102\uffa3\104\uffa3\105\uffa3\106\uffa3\001\002\000" +
    "\060\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\100\uffa0" +
    "\102\uffa0\104\uffa0\105\uffa0\106\uffa0\001\002\000\026\015" +
    "\131\016\136\044\133\045\146\046\126\055\152\063\130" +
    "\103\132\107\141\110\127\001\002\000\060\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\064\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\100\uffaa\102\uffaa\104\uffaa" +
    "\105\uffaa\106\uffaa\001\002\000\060\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\064\uffa7\066\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\100\uffa7\102\uffa7\104\uffa7\105\uffa7" +
    "\106\uffa7\001\002\000\060\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\064\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\100\uffac\102\uffac\104\uffac\105\uffac\106\uffac" +
    "\001\002\000\060\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\064\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073" +
    "\uffae\100\uffae\102\uffae\104\uffae\105\uffae\106\uffae\001\002" +
    "\000\060\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\217\100" +
    "\uffb0\102\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002\000\056" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\100\uffb2\102\uffb2\104" +
    "\uffb2\105\uffb2\106\uffb2\001\002\000\060\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\100\uffa9\102\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\001\002\000\056\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\064\uffb6\066\uffb6\067\uffb6\070\201\071\200" +
    "\072\177\100\uffb6\102\uffb6\104\uffb6\105\uffb6\106\uffb6\001" +
    "\002\000\050\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064" +
    "\uffb9\066\174\067\175\100\uffb9\102\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\001\002\000\044\047\172\050\171\051\165\052" +
    "\167\053\170\054\166\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\064\uffc0\100\uffc0\102\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\001\002\000\022\015\131\016\136\044\133\045\146" +
    "\046\126\103\132\107\141\110\127\001\002\000\030\056" +
    "\163\057\162\060\uffc3\061\uffc3\062\uffc3\064\uffc3\100\uffc3" +
    "\102\uffc3\104\uffc3\105\uffc3\106\uffc3\001\002\000\012\060" +
    "\160\061\156\062\157\102\155\001\002\000\072\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\100\uffd0\101\uffd0\102\uffd0\104\uffd0\105\uffd0" +
    "\106\uffd0\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\030\056\163\057\162\060\uffc6\061" +
    "\uffc6\062\uffc6\064\uffc6\100\uffc6\102\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\044\047\172\050\171\051\165\052" +
    "\167\053\170\054\166\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\064\uffc2\100\uffc2\102\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\050\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\064\uffbf\066\174\067\175\100\uffbf\102\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\001\002\000\030\015\131\016\136\044" +
    "\133\045\146\046\126\055\152\063\130\067\137\103\132" +
    "\107\141\110\127\001\002\000\030\015\131\016\136\044" +
    "\133\045\146\046\126\055\152\063\130\067\137\103\132" +
    "\107\141\110\127\001\002\000\056\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\064\uffb7\066\uffb7\067\uffb7\070\201\071" +
    "\200\072\177\100\uffb7\102\uffb7\104\uffb7\105\uffb7\106\uffb7" +
    "\001\002\000\030\015\131\016\136\044\133\045\146\046" +
    "\126\055\152\063\130\067\137\103\132\107\141\110\127" +
    "\001\002\000\030\015\131\016\136\044\133\045\146\046" +
    "\126\055\152\063\130\067\137\103\132\107\141\110\127" +
    "\001\002\000\030\015\131\016\136\044\133\045\146\046" +
    "\126\055\152\063\130\067\137\103\132\107\141\110\127" +
    "\001\002\000\056\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\064\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\100" +
    "\uffb5\102\uffb5\104\uffb5\105\uffb5\106\uffb5\001\002\000\056" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\072\uffb4\100\uffb4\102\uffb4\104" +
    "\uffb4\105\uffb4\106\uffb4\001\002\000\056\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\064\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\100\uffb3\102\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\001\002\000\056\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\064\uffb8\066\uffb8\067\uffb8\070\201\071\200\072\177" +
    "\100\uffb8\102\uffb8\104\uffb8\105\uffb8\106\uffb8\001\002\000" +
    "\050\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064\uffbe\066" +
    "\174\067\175\100\uffbe\102\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\001\002\000\050\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\064\uffbb\066\174\067\175\100\uffbb\102\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\001\002\000\050\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\064\uffbc\066\174\067\175\100\uffbc\102\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\001\002\000\050\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\064\uffba\066\174\067\175\100" +
    "\uffba\102\uffba\104\uffba\105\uffba\106\uffba\001\002\000\050" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\066\174" +
    "\067\175\100\uffbd\102\uffbd\104\uffbd\105\uffbd\106\uffbd\001" +
    "\002\000\044\047\172\050\171\051\165\052\167\053\170" +
    "\054\166\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\064" +
    "\uffc1\100\uffc1\102\uffc1\104\uffc1\105\uffc1\106\uffc1\001\002" +
    "\000\030\056\163\057\162\060\uffc4\061\uffc4\062\uffc4\064" +
    "\uffc4\100\uffc4\102\uffc4\104\uffc4\105\uffc4\106\uffc4\001\002" +
    "\000\030\056\163\057\162\060\uffc5\061\uffc5\062\uffc5\064" +
    "\uffc5\100\uffc5\102\uffc5\104\uffc5\105\uffc5\106\uffc5\001\002" +
    "\000\060\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\064\uffab" +
    "\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\100" +
    "\uffab\102\uffab\104\uffab\105\uffab\106\uffab\001\002\000\030" +
    "\015\131\016\136\044\133\045\146\046\126\055\152\063" +
    "\130\067\137\103\132\107\141\110\127\001\002\000\056" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\100\uffb1\102\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\001\002\000\060\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\100\uffaf\102\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\001\002\000\072\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\100" +
    "\uffd6\101\125\102\uffd6\104\uffd6\105\uffd6\106\uffd6\001\002" +
    "\000\072\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\074\uffd2\075\uffd2\076\uffd2\100\uffd2\101\uffd2\102\uffd2" +
    "\104\uffd2\105\uffd2\106\uffd2\001\002\000\012\060\160\061" +
    "\156\062\157\104\225\001\002\000\060\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\064\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\100\uffa2\102\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\001\002\000\060\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\064\uffad\066\uffad\067\uffad\070\uffad\071\uffad" +
    "\072\uffad\073\uffad\100\uffad\102\uffad\104\uffad\105\uffad\106" +
    "\uffad\001\002\000\004\077\231\001\002\000\004\106\uffd3" +
    "\001\002\000\032\015\131\016\136\044\133\045\146\046" +
    "\126\055\152\063\130\067\137\077\231\103\132\107\141" +
    "\110\127\001\002\000\004\106\uffcf\001\002\000\006\064" +
    "\243\100\244\001\002\000\006\064\uffca\100\uffca\001\002" +
    "\000\006\064\240\100\241\001\002\000\006\064\uffc9\100" +
    "\uffc9\001\002\000\014\060\160\061\156\062\157\064\uffc7" +
    "\100\uffc7\001\002\000\004\077\231\001\002\000\010\064" +
    "\uffcc\100\uffcc\106\uffcc\001\002\000\006\064\uffcb\100\uffcb" +
    "\001\002\000\030\015\131\016\136\044\133\045\146\046" +
    "\126\055\152\063\130\067\137\103\132\107\141\110\127" +
    "\001\002\000\010\064\uffcd\100\uffcd\106\uffcd\001\002\000" +
    "\014\060\160\061\156\062\157\064\uffc8\100\uffc8\001\002" +
    "\000\030\015\131\016\136\044\133\045\146\046\126\055" +
    "\152\063\130\067\137\103\132\107\141\110\127\001\002" +
    "\000\004\106\uffe8\001\002\000\012\060\160\061\156\062" +
    "\157\106\uffe7\001\002\000\006\010\254\044\076\001\002" +
    "\000\004\105\260\001\002\000\004\105\uff8b\001\002\000" +
    "\004\044\255\001\002\000\004\065\256\001\002\000\030" +
    "\015\131\016\136\044\133\045\146\046\126\055\152\063" +
    "\130\067\137\103\132\107\141\110\127\001\002\000\012" +
    "\060\160\061\156\062\157\105\uff8c\001\002\000\030\015" +
    "\131\016\136\044\133\045\146\046\126\055\152\063\130" +
    "\067\137\103\132\107\141\110\127\001\002\000\012\060" +
    "\160\061\156\062\157\105\262\001\002\000\004\044\076" +
    "\001\002\000\004\104\264\001\002\000\004\106\020\001" +
    "\002\000\034\007\ufff4\020\ufff4\022\ufff4\024\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\042\ufff4\044\ufff4\106\022\111" +
    "\064\112\ufff4\001\002\000\030\007\uff8d\020\uff8d\022\uff8d" +
    "\024\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\042\uff8d\044" +
    "\uff8d\112\uff8d\001\002\000\032\007\ufff1\020\ufff1\022\ufff1" +
    "\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\042\ufff1\044" +
    "\ufff1\106\022\112\ufff1\001\002\000\006\020\277\106\020" +
    "\001\002\000\030\007\uff95\020\uff95\022\uff95\024\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\042\uff95\044\uff95\112\uff95" +
    "\001\002\000\032\007\uff8f\020\uff8f\021\uff8f\022\uff8f\024" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\042\uff8f\044\uff8f" +
    "\112\uff8f\001\002\000\032\007\uff94\020\uff94\021\270\022" +
    "\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031\uff94\042\uff94" +
    "\044\uff94\112\uff94\001\002\000\030\007\uff93\020\uff93\022" +
    "\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\042\uff93" +
    "\044\uff93\112\uff93\001\002\000\032\007\uff90\020\uff90\021" +
    "\uff90\022\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\042\uff90\044\uff90\112\uff90\001\002\000\034\007\ufff4\020" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\042\ufff4\044\ufff4\106\022\111\064\112\ufff4\001\002\000" +
    "\004\103\300\001\002\000\030\015\131\016\136\044\133" +
    "\045\146\046\126\055\152\063\130\067\137\103\132\107" +
    "\141\110\127\001\002\000\012\060\160\061\156\062\157" +
    "\104\302\001\002\000\004\106\020\001\002\000\036\007" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\042\ufff4\044\ufff4\106\022\111\064\112" +
    "\ufff4\001\002\000\032\007\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\024\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\042\uff8e\044" +
    "\uff8e\112\uff8e\001\002\000\030\007\uff91\020\uff91\022\uff91" +
    "\024\uff91\026\uff91\027\uff91\030\uff91\031\uff91\042\uff91\044" +
    "\uff91\112\uff91\001\002\000\032\007\uffeb\020\uffeb\022\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\042\uffeb\044" +
    "\uffeb\106\022\112\uffeb\001\002\000\010\104\uffd8\105\uffd8" +
    "\106\uffd8\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\010\104\uffd7\105\uffd7\106\uffd7\001" +
    "\002\000\030\015\131\016\136\044\133\045\146\046\126" +
    "\055\152\063\130\067\137\103\132\107\141\110\127\001" +
    "\002\000\016\060\160\061\156\062\157\104\uffda\105\uffda" +
    "\106\uffda\001\002\000\016\060\160\061\156\062\157\104" +
    "\uffd9\105\uffd9\106\uffd9\001\002\000\032\007\ufff0\020\ufff0" +
    "\022\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\042" +
    "\ufff0\044\ufff0\106\022\112\ufff0\001\002\000\010\027\ufff4" +
    "\106\022\111\064\001\002\000\004\027\320\001\002\000" +
    "\004\103\321\001\002\000\030\015\131\016\136\044\133" +
    "\045\146\046\126\055\152\063\130\067\137\103\132\107" +
    "\141\110\127\001\002\000\012\060\160\061\156\062\157" +
    "\104\323\001\002\000\004\106\020\001\002\000\032\007" +
    "\uff89\020\uff89\022\uff89\024\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\042\uff89\044\uff89\106\022\112\uff89\001\002\000" +
    "\054\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\112\ufff5\001\002\000\030\007\ufff3\020\ufff3\022" +
    "\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\042\ufff3" +
    "\044\ufff3\112\ufff3\001\002\000\032\007\uffee\020\uffee\022" +
    "\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\042\uffee" +
    "\044\uffee\106\022\112\uffee\001\002\000\032\007\uffec\020" +
    "\uffec\022\uffec\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\042\uffec\044\uffec\106\022\112\uffec\001\002\000\010\104" +
    "\uffdc\105\uffdc\106\uffdc\001\002\000\030\015\131\016\136" +
    "\044\133\045\146\046\126\055\152\063\130\067\137\103" +
    "\132\107\141\110\127\001\002\000\010\104\uffdb\105\uffdb" +
    "\106\uffdb\001\002\000\030\015\131\016\136\044\133\045" +
    "\146\046\126\055\152\063\130\067\137\103\132\107\141" +
    "\110\127\001\002\000\016\060\160\061\156\062\157\104" +
    "\uffde\105\uffde\106\uffde\001\002\000\016\060\160\061\156" +
    "\062\157\104\uffdd\105\uffdd\106\uffdd\001\002\000\030\015" +
    "\131\016\136\044\133\045\146\046\126\055\152\063\130" +
    "\067\137\103\132\107\141\110\127\001\002\000\012\060" +
    "\160\061\156\062\157\104\341\001\002\000\004\106\020" +
    "\001\002\000\036\007\ufff4\020\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\042\ufff4\044\ufff4" +
    "\106\022\111\064\112\ufff4\001\002\000\032\007\uff92\020" +
    "\uff92\021\uff92\022\uff92\024\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\042\uff92\044\uff92\112\uff92\001\002\000\030\015" +
    "\131\016\136\044\133\045\146\046\126\055\152\063\130" +
    "\067\137\103\132\107\141\110\127\001\002\000\012\060" +
    "\160\061\156\062\157\104\346\001\002\000\004\106\uff78" +
    "\001\002\000\030\015\131\016\136\044\133\045\146\046" +
    "\126\055\152\063\130\067\137\103\132\107\141\110\127" +
    "\001\002\000\012\060\160\061\156\062\157\104\351\001" +
    "\002\000\004\106\020\001\002\000\034\007\uff86\020\uff86" +
    "\022\uff86\024\uff86\026\uff86\027\uff86\030\uff86\031\uff86\042" +
    "\uff86\044\uff86\106\022\111\354\112\uff86\001\002\000\030" +
    "\007\uff88\020\uff88\022\uff88\024\uff88\026\uff88\027\uff88\030" +
    "\uff88\031\uff88\042\uff88\044\uff88\112\uff88\001\002\000\010" +
    "\023\uff84\025\uff84\112\uff84\001\002\000\010\023\361\025" +
    "\356\112\uff81\001\002\000\004\106\020\001\002\000\010" +
    "\023\uff85\025\uff85\112\uff85\001\002\000\004\112\365\001" +
    "\002\000\030\015\131\016\136\044\133\045\146\046\126" +
    "\055\152\063\130\067\137\103\132\107\141\110\127\001" +
    "\002\000\012\060\160\061\156\062\157\106\020\001\002" +
    "\000\014\023\ufff4\025\ufff4\106\022\111\064\112\ufff4\001" +
    "\002\000\010\023\uff83\025\uff83\112\uff83\001\002\000\030" +
    "\007\uff87\020\uff87\022\uff87\024\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\042\uff87\044\uff87\112\uff87\001\002\000\010" +
    "\106\022\111\064\112\ufff4\001\002\000\004\112\uff82\001" +
    "\002\000\032\007\uffef\020\uffef\022\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\042\uffef\044\uffef\106\022\112" +
    "\uffef\001\002\000\030\015\131\016\136\044\133\045\146" +
    "\046\126\055\152\063\130\067\137\103\132\107\141\110" +
    "\127\001\002\000\012\060\160\061\156\062\157\104\373" +
    "\001\002\000\004\106\020\001\002\000\034\007\ufff4\020" +
    "\ufff4\022\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\042\ufff4\044\ufff4\106\022\111\064\112\ufff4\001\002\000" +
    "\030\007\uff8a\020\uff8a\022\uff8a\024\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\042\uff8a\044\uff8a\112\uff8a\001\002\000" +
    "\016\010\026\011\033\012\027\013\031\014\044\104\uff76" +
    "\001\002\000\004\104\u0100\001\002\000\004\106\020\001" +
    "\002\000\032\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\043\ufff4\044\ufff4\106\022\111\064\112" +
    "\ufff4\001\002\000\026\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\043\uff7b\044\uff7b\112\uff7b\001" +
    "\002\000\006\017\u0105\044\014\001\002\000\010\064\016" +
    "\065\246\106\uffe6\001\002\000\004\044\014\001\002\000" +
    "\006\064\016\101\125\001\002\000\010\065\227\101\125" +
    "\106\uffce\001\002\000\004\106\uffd5\001\002\000\004\106" +
    "\uffea\001\002\000\004\002\ufffd\001\002\000\026\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\043" +
    "\ufffb\044\ufffb\112\ufffb\001\002\000\030\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\043\ufff7\044" +
    "\ufff7\106\022\112\ufff7\001\002\000\004\103\u010e\001\002" +
    "\000\016\010\026\011\033\012\027\013\031\014\044\104" +
    "\uff76\001\002\000\004\104\u0110\001\002\000\004\106\020" +
    "\001\002\000\032\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\043\ufff4\044\ufff4\106\022\111\064" +
    "\112\ufff4\001\002\000\026\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\043\uff7a\044\uff7a\112\uff7a" +
    "\001\002\000\016\010\026\011\033\012\027\013\031\014" +
    "\044\104\uff76\001\002\000\004\104\u0115\001\002\000\004" +
    "\106\020\001\002\000\032\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\043\ufff4\044\ufff4\106\022" +
    "\111\064\112\ufff4\001\002\000\026\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\043\uff7d\044\uff7d" +
    "\112\uff7d\001\002\000\006\017\u011a\044\014\001\002\000" +
    "\010\064\016\065\246\106\uffe6\001\002\000\004\044\014" +
    "\001\002\000\006\064\016\101\125\001\002\000\010\065" +
    "\227\101\125\106\uffce\001\002\000\004\106\uffd4\001\002" +
    "\000\004\106\uffe9\001\002\000\004\104\u0120\001\002\000" +
    "\004\106\020\001\002\000\032\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\043\ufff4\044\ufff4\106" +
    "\022\111\064\112\ufff4\001\002\000\026\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\043\uff79\044" +
    "\uff79\112\uff79\001\002\000\030\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\043\ufff6\044\ufff6\106" +
    "\022\112\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\013\004\076\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\011\001\001\000\004\075" +
    "\020\001\001\000\004\004\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\036\005\040\041\031\042" +
    "\037\046\024\056\041\057\034\001\001\000\004\075\u0122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\u0117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u010b" +
    "\001\001\000\016\002\036\005\040\041\031\042\037\046" +
    "\024\057\u010a\001\001\000\004\002\046\001\001\000\002" +
    "\001\001\000\004\002\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\054\102\051" +
    "\103\053\104\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\054\104\057\001\001\000\002\001\001\000" +
    "\004\075\061\001\001\000\004\015\062\001\001\000\002" +
    "\001\001\000\042\006\113\007\106\011\102\014\104\016" +
    "\112\040\103\043\100\044\073\045\101\047\067\053\107" +
    "\054\110\055\076\060\077\061\111\066\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\123\036\221\001\001\000\002\001\001\000\004\075" +
    "\327\001\001\000\004\075\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\113\007" +
    "\106\011\325\016\112\040\103\043\100\044\073\045\101" +
    "\047\067\053\107\054\110\055\076\060\077\061\111\066" +
    "\074\001\001\000\004\075\315\001\001\000\004\075\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\305\001\001\000\010\017\270\020\271\021\272\001\001" +
    "\000\004\075\266\001\001\000\002\001\001\000\004\002" +
    "\116\001\001\000\004\004\117\001\001\000\004\003\246" +
    "\001\001\000\004\004\121\001\001\000\006\035\123\036" +
    "\122\001\001\000\006\035\222\077\227\001\001\000\002" +
    "\001\001\000\032\022\133\023\153\024\152\025\150\026" +
    "\147\027\146\030\144\031\143\032\142\033\141\034\137" +
    "\053\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\133\033\225\034\137\053\134\001\001\000\002" +
    "\001\001\000\032\022\133\023\223\024\152\025\150\026" +
    "\147\027\146\030\144\031\143\032\142\033\141\034\137" +
    "\053\134\001\001\000\006\035\123\036\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\133\032\220\033\141\034\137\053\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\133\034\215\053\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\022\133" +
    "\024\214\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\030\022\133" +
    "\024\213\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\030\022\133" +
    "\024\160\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\026\022\133\025\212\026\147\027\146\030\144\031" +
    "\143\032\142\033\141\034\137\053\134\001\001\000\026" +
    "\022\133\025\163\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\024\022\133\026\211\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\024\022\133" +
    "\026\210\027\146\030\144\031\143\032\142\033\141\034" +
    "\137\053\134\001\001\000\024\022\133\026\207\027\146" +
    "\030\144\031\143\032\142\033\141\034\137\053\134\001" +
    "\001\000\024\022\133\026\206\027\146\030\144\031\143" +
    "\032\142\033\141\034\137\053\134\001\001\000\024\022" +
    "\133\026\205\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\024\022\133\026\172\027" +
    "\146\030\144\031\143\032\142\033\141\034\137\053\134" +
    "\001\001\000\002\001\001\000\022\022\133\027\204\030" +
    "\144\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\022\022\133\027\175\030\144\031\143\032\142\033" +
    "\141\034\137\053\134\001\001\000\002\001\001\000\020" +
    "\022\133\030\203\031\143\032\142\033\141\034\137\053" +
    "\134\001\001\000\020\022\133\030\202\031\143\032\142" +
    "\033\141\034\137\053\134\001\001\000\020\022\133\030" +
    "\201\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\133\030\217\031\143\032\142\033\141\034" +
    "\137\053\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\231" +
    "\001\001\000\002\001\001\000\042\022\133\023\236\024" +
    "\152\025\150\026\147\027\146\030\144\031\143\032\142" +
    "\033\141\034\137\037\232\050\235\051\233\052\234\053" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\235\051\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\133\023\244\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\022\133\023\247\024\152\025\150\026\147" +
    "\027\146\030\144\031\143\032\142\033\141\034\137\053" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\252\010\251\053\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\022\133\023\256\024\152\025\150\026\147\027\146\030" +
    "\144\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\002\001\001\000\032\022\133\023\260\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\006\007" +
    "\262\053\107\001\001\000\002\001\001\000\004\075\264" +
    "\001\001\000\004\015\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\273\020\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\304\001\001" +
    "\000\002\001\001\000\032\022\133\023\300\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\004\075" +
    "\302\001\001\000\004\015\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\022\133\023\313\024\152\025\150\026\147\027\146" +
    "\030\144\031\143\032\142\033\141\034\137\053\134\001" +
    "\001\000\002\001\001\000\032\022\133\023\312\024\152" +
    "\025\150\026\147\027\146\030\144\031\143\032\142\033" +
    "\141\034\137\053\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\022\133\023\321" +
    "\024\152\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\004\075\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\133\023\335\024\152\025" +
    "\150\026\147\027\146\030\144\031\143\032\142\033\141" +
    "\034\137\053\134\001\001\000\002\001\001\000\032\022" +
    "\133\023\334\024\152\025\150\026\147\027\146\030\144" +
    "\031\143\032\142\033\141\034\137\053\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\022\133\023\337" +
    "\024\152\025\150\026\147\027\146\030\144\031\143\032" +
    "\142\033\141\034\137\053\134\001\001\000\002\001\001" +
    "\000\004\075\341\001\001\000\004\015\342\001\001\000" +
    "\002\001\001\000\032\022\133\023\344\024\152\025\150" +
    "\026\147\027\146\030\144\031\143\032\142\033\141\034" +
    "\137\053\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\022\133\023\347\024\152\025\150\026\147\027" +
    "\146\030\144\031\143\032\142\033\141\034\137\053\134" +
    "\001\001\000\002\001\001\000\004\075\351\001\001\000" +
    "\004\065\352\001\001\000\002\001\001\000\004\064\354" +
    "\001\001\000\006\062\356\063\357\001\001\000\004\075" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\022\133\023\361\024\152\025\150\026\147\027\146\030" +
    "\144\031\143\032\142\033\141\034\137\053\134\001\001" +
    "\000\004\075\362\001\001\000\004\015\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\022\133\023" +
    "\371\024\152\025\150\026\147\027\146\030\144\031\143" +
    "\032\142\033\141\034\137\053\134\001\001\000\002\001" +
    "\001\000\004\075\373\001\001\000\004\015\374\001\001" +
    "\000\002\001\001\000\012\002\054\102\376\103\053\104" +
    "\052\001\001\000\002\001\001\000\004\075\u0100\001\001" +
    "\000\004\015\u0101\001\001\000\002\001\001\000\004\004" +
    "\u0103\001\001\000\004\003\u0108\001\001\000\004\004\u0105" +
    "\001\001\000\006\035\123\036\u0106\001\001\000\006\035" +
    "\222\077\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\054\102\u010e\103\053\104\052" +
    "\001\001\000\002\001\001\000\004\075\u0110\001\001\000" +
    "\004\015\u0111\001\001\000\002\001\001\000\012\002\054" +
    "\102\u0113\103\053\104\052\001\001\000\002\001\001\000" +
    "\004\075\u0115\001\001\000\004\015\u0116\001\001\000\002" +
    "\001\001\000\004\004\u0118\001\001\000\004\003\u011d\001" +
    "\001\000\004\004\u011a\001\001\000\006\035\123\036\u011b" +
    "\001\001\000\006\035\222\077\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0120" +
    "\001\001\000\004\015\u0121\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AudioParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AudioParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AudioParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private ErrorHandler errorHandler;

	private List<Integer> ind;

	public AudioParser(AudioLex lex) {
		super(lex);
		this.errorHandler = new ErrorHandler();
		this.ind = new ArrayList<>();
	}

	public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setError((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	protected int error_sync_size() {
		return 1;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AudioParser$actions {
  private final AudioParser parser;

  /** Constructor */
  CUP$AudioParser$actions(AudioParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action_part00000000(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AudioParser$result;

      /* select the action based on the action number */
      switch (CUP$AudioParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		RESULT = start_val;
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AudioParser$parser.done_parsing();
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio1 ::= eol_ TRACK ID extends_ eol bod 
            {
              List<Instruction> RESULT =null;
		int list_ileft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_iright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = list_i;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("inicio1",9, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // extends_ ::= EXTENDS id_list 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",63, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extends_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("extends_",63, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bod ::= INDENT m_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bod ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("bod",8, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // m_body ::= m_body main_body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // m_body ::= main_body 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instruction = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("m_body",44, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_body ::= principal 
            {
              List<Instruction> RESULT =null;
		int principalleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int principalright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Principal principal = (Principal)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(principal); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_body ::= function 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= statement eol 
            {
              List<Instruction> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> statement = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_body ::= array_statement eol 
            {
              List<Instruction> RESULT =null;
		int array_statementleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_statementright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> array_statement = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(array_statement); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("main_body",45, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_body ::= INDENT f_body DEDENT 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_body ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // f_body ::= f_body body 
            {
              List<Instruction> RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_ins; RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // f_body ::= body 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f_body",10, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Assignment> list = (List<Assignment>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= assignment eol 
            {
              List<Instruction> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(assign); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= array_statement_function eol 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayStatement> list = (List<ArrayStatement>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		  RESULT = new ArrayList<>(); RESULT.addAll(list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body ::= message eol 
            {
              List<Instruction> RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Message message = (Message)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(message); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= control 
            {
              List<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(instruction); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body ::= continue_ eol 
            {
              List<Instruction> RESULT =null;
		int continue_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int continue_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Continue continue_ = (Continue)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(continue_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body ::= exit_ eol 
            {
              List<Instruction> RESULT =null;
		int exit_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int exit_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Exit exit_ = (Exit)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(exit_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= KEEP VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_function ::= VAR type id_list value 
            {
              List<Assignment> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("statement_function",4, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= EQUAL a 
            {
              Operation RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = operation; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= 
            {
              Operation RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_list ::= id_list COMMA ID 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					list.add(token);
					RESULT = list;
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id_list ::= ID 
            {
              List<Token> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<Token>();
					RESULT.add(token);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("id_list",2, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= DOB 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= BOOL 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= CAD 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= CAR 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment ::= ID EQUAL a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(Assignment.TypeA.EQUAL, token, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= ID PLUS_EQ a 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), operation, op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_EQ, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= ID PLUS_PLUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_PLUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment ::= ID MINUS_MINUS 
            {
              Assignment RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.MINUS_MINUS, token, tmp);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= l EQUAL a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAssignment(array_access, operation, Assignment.TypeA.EQUAL); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment ::= l PLUS_EQ a 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), operation, op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_EQ);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment ::= l PLUS_PLUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_PLUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= l MINUS_MINUS 
            {
              Assignment RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.MINUS_MINUS);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l ::= ID dimensions 
            {
              ArrayAccess RESULT =null;
		int token_idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int token_idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token_id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayAccess(token_id, list_array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("l",41, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_statement ::= KEEP VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_statement ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement",36, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_statement_function ::= VAR type ARRAY id_list dimensions array_value 
            {
              List<ArrayStatement> RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int list_tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Token> list_token = (List<Token>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_array_index = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object array_list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_statement_function",37, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dimensions ::= dimensions dimension 
            {
              List<ArrayIndex> RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<ArrayIndex> list_op = (List<ArrayIndex>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dimensions ::= dimension 
            {
              List<ArrayIndex> RESULT =null;
		int array_indexleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_indexright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayIndex array_index = (ArrayIndex)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(array_index); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimensions",28, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dimension ::= LBRACKET a RBRACKET 
            {
              ArrayIndex RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token left = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token right = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayIndex(left, operation, right); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("dimension",27, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_value ::= EQUAL list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",61, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_value ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("array_value",61, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= LBRACE value_list RBRACE 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Operation> list_op = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Operation.class, list_op.size());
					ind.add(list_op.size());
					// System.out.println(list_op.size());
					for(int i = 0; i < list_op.size(); i++) {
						Array.set(RESULT, i, list_op.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= LBRACE list_fn RBRACE 
            {
              Object RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = Array.newInstance(Object.class, list_fn.size());
					for(int i = 0; i < list_fn.size(); i++) {
						Array.set(RESULT, i, list_fn.get(i));
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_fn ::= list_fn COMMA fn 
            {
              List<Object> RESULT =null;
		int list_fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int list_fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Object> list_fn = (List<Object>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_fn; RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_fn ::= fn 
            {
              List<Object> RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(fn); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_fn",40, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fn ::= list 
            {
              Object RESULT =null;
		int list_opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Object list_op = (Object)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list_op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("fn",39, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value_list ::= value_list COMMA a 
            {
              List<Operation> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Operation> list = (List<Operation>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value_list ::= a 
            {
              List<Operation> RESULT =null;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("value_list",29, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // a ::= a OR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.OR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a ::= a NOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a ::= a XOR b 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.XOR, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // a ::= b 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("a",17, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b ::= b AND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.AND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // b ::= b NAND c 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NAND, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // b ::= c 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("b",18, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c ::= c EQEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.EQEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c ::= c NEQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NEQ, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c ::= c GREATER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // c ::= c SMALLER d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SMALLER, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c ::= c GRTREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.GREATER_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c ::= c SMLLREQ d 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.LESS_OR_EQUAL, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // c ::= d 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("c",19, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // d ::= d PLUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUM, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // d ::= d MINUS e 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.SUBTRACTION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // d ::= e 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("d",20, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // e ::= e TIMES f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MULTIPLICATION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // e ::= e DIVIDE f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT =new Operation(OperationType.DIVISION, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // e ::= e MOD f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.MOD, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // e ::= f 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("e",21, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // f ::= g POW f 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.POW, l, r, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // f ::= g 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("f",22, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // g ::= MINUS h 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.UMINUS, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // g ::= h 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("g",23, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // h ::= NOT i 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NOT, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // h ::= i 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("h",24, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // i ::= NULL j 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.NULL, l, token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // i ::= j 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = op; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("i",25, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // j ::= INTEGER 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.INTEGER, new Variable(var, Var.INTEGER, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // j ::= DECIMAL 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.DOUBLE, new Variable(var, Var.DOUBLE, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // j ::= STR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.STRING, new Variable(var, Var.STRING, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // j ::= CHAR 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.CHAR, new Variable(var, Var.CHAR, var.getValue())); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // j ::= boolean_val 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.BOOLEAN, var); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // j ::= ID 
            {
              Operation RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ID, new Variable(token)); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // j ::= l 
            {
              Operation RESULT =null;
		int array_accessleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int array_accessright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		ArrayAccess array_access = (ArrayAccess)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Operation(OperationType.ARRAY_ACCESS, array_access); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // j ::= LPAREN a RPAREN 
            {
              Operation RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation var = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		 RESULT = var; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("j",26, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token var = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("boolean_val",16, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // eol ::= eol EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // eol ::= EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol",59, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // eol_ ::= eol_ EOL 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eol_ ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("eol_",60, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // control ::= list_if 
            {
              Instruction RESULT =null;
		int ifInsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int ifInsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		IfInstruction ifIns = (IfInstruction)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = ifIns; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // control ::= for_ 
            {
              Instruction RESULT =null;
		int for_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int for_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		For for_ = (For)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = for_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // control ::= while_ 
            {
              Instruction RESULT =null;
		int while_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int while_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		While while_ = (While)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = while_; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // control ::= do_while 
            {
              Instruction RESULT =null;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		DoWhile do_while = (DoWhile)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = do_while; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // control ::= switch_ 
            {
              Instruction RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Switch sw = (Switch)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = sw; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("control",43, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // list_if ::= if_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list_if ::= if_ else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list_if ::= if_ list_else_if 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list_if ::= if_ list_else_if else_ 
            {
              IfInstruction RESULT =null;
		int if_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int if_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		If if_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int list_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list_if = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_ = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new IfInstruction(if_, list_if, else_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_if",42, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_ ::= IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("if_",12, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // else_ ::= ELSE eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_",13, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_else_if ::= list_else_if else_if 
            {
              List<If> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<If> list = (List<If>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_else_if ::= else_if 
            {
              List<If> RESULT =null;
		int else_ifleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int else_ifright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		If else_if = (If)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(else_if); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("list_else_if",15, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_if ::= ELSE IF LPAREN a RPAREN eol function_body 
            {
              If RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("else_if",14, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_ ::= FOR LPAREN for_assign SEMI a SEMI assignment RPAREN eol function_body 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int increaseleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int increaseright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Assignment increase = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new For(token, assign, condition, increase, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_",34, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_assign ::= INT ID EQUAL a 
            {
              Assignment RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Assignment(type, id, operation); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_assign ::= assignment 
            {
              Assignment RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Assignment assign = (Assignment)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = assign; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("for_assign",6, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_ ::= WHILE LPAREN a RPAREN eol function_body 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new While(token, condition, list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("while_",30, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // do_while ::= DO_WHILE eol function_body WHILE LPAREN a RPAREN eol 
            {
              DoWhile RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)).value;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		
					RESULT = new DoWhile(info, token, list_ins, condition);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("do_while",35, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_ ::= SWITCH LPAREN a RPAREN eol switch_body 
            {
              Switch RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Switch(token, condition, list); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_",52, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // switch_body ::= INDENT case_list default_ DEDENT 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int default_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int default_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Case default_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = list;
					if(default_ != null) {
						RESULT.add(default_);
					}
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // switch_body ::= 
            {
              List<Case> RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("switch_body",51, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // case_list ::= case_list case_ 
            {
              List<Case> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		int case_left = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int case_right = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Case case_ = (Case)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = list; RESULT.add(case_); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_list ::= 
            {
              List<Case> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_list",50, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_ ::= CASE a eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, operation, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("case_",48, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // default_ ::= DEFAULT eol function_body 
            {
              Case RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Case(token, null, instructions); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // default_ ::= 
            {
              Case RESULT =null;
		 RESULT = null; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("default_",49, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exit_ ::= EXIT 
            {
              Exit RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Exit(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("exit_",47, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // continue_ ::= CONTINUE 
            {
              Continue RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = new Continue(token); 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("continue_",46, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // return_ ::= RETURN a 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("return_",62, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function ::= ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function ::= KEEP type ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-7)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function ::= KEEP ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function ::= type ID LPAREN params_f RPAREN eol function_body 
            {
              Instruction RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("function",31, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-6)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // principal ::= MAIN LPAREN RPAREN eol function_body 
            {
              Principal RESULT =null;
		int list_insleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int list_insright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		List<Instruction> list_ins = (List<Instruction>)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		
					RESULT = new Principal(list_ins);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("principal",32, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-4)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // message ::= MSG LPAREN a RPAREN 
            {
              Message RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).right;
		Operation operation = (Operation)((java_cup.runtime.Symbol) CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)).value;
		
					RESULT = new Message(token, operation);
				
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("message",33, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // params_f ::= params 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // params_f ::= 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params_f",64, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // params ::= params COMMA param 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",65, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-2)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // params ::= param 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("params",65, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // param ::= type ID 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("param",66, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-1)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // note ::= NOTE 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("note",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // note ::= IF 
            {
              Token RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$AudioParser$stack.peek()).value;
		 RESULT = token; 
              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("note",53, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // play ::= PLAY LPAREN note COMMA a COMMA a COMMA a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("play",54, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-9)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // wait ::= WAIT LPAREN a COMMA a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("wait",55, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // order ::= ORDER LPAREN ID COMMA WAY RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("order",56, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-5)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sum ::= SUM LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("sum",57, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // length ::= LENGTH LPAREN a RPAREN 
            {
              Object RESULT =null;

              CUP$AudioParser$result = parser.getSymbolFactory().newSymbol("length",58, ((java_cup.runtime.Symbol)CUP$AudioParser$stack.elementAt(CUP$AudioParser$top-3)), ((java_cup.runtime.Symbol)CUP$AudioParser$stack.peek()), RESULT);
            }
          return CUP$AudioParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AudioParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AudioParser$do_action(
    int                        CUP$AudioParser$act_num,
    java_cup.runtime.lr_parser CUP$AudioParser$parser,
    java.util.Stack            CUP$AudioParser$stack,
    int                        CUP$AudioParser$top)
    throws java.lang.Exception
    {
              return CUP$AudioParser$do_action_part00000000(
                               CUP$AudioParser$act_num,
                               CUP$AudioParser$parser,
                               CUP$AudioParser$stack,
                               CUP$AudioParser$top);
    }
}

}
