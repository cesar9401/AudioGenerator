
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser.playlist;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.cesar31.audiogenerator.parser.Token;
import com.cesar31.audiogenerator.playlist.*;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PlaylistParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PlaylistParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PlaylistParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PlaylistParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PlaylistParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\016\005\000\002\002\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\014\005\000\002\014\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\007\005\000\002\007\005\000" +
    "\002\010\005\000\002\010\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\003\000\002\005\003\000\002\005\002\000" +
    "\002\004\005\000\002\004\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\003\005\016\004\001\002\000\006\003" +
    "\120\004\010\001\002\000\006\003\011\004\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\006\003\105\014\106\001\002\000\004\014\014\001\002" +
    "\000\004\017\013\001\002\000\004\002\uffff\001\002\000" +
    "\004\016\015\001\002\000\014\003\024\005\026\006\017" +
    "\007\030\010\022\001\002\000\006\015\ufff6\017\ufff6\001" +
    "\002\000\006\003\101\014\102\001\002\000\006\015\ufff5" +
    "\017\ufff5\001\002\000\006\015\ufff7\017\ufff7\001\002\000" +
    "\006\003\075\014\076\001\002\000\006\015\ufff3\017\ufff3" +
    "\001\002\000\010\014\050\015\ufff2\017\ufff2\001\002\000" +
    "\006\015\ufff4\017\ufff4\001\002\000\006\003\043\014\044" +
    "\001\002\000\006\015\040\017\041\001\002\000\006\003" +
    "\031\014\032\001\002\000\010\003\033\011\034\012\035" +
    "\001\002\000\010\003\033\011\034\012\035\001\002\000" +
    "\006\015\uffe7\017\uffe7\001\002\000\006\015\uffe9\017\uffe9" +
    "\001\002\000\006\015\uffe8\017\uffe8\001\002\000\006\015" +
    "\uffeb\017\uffeb\001\002\000\006\015\uffea\017\uffea\001\002" +
    "\000\014\003\024\005\026\006\017\007\030\010\022\001" +
    "\002\000\006\003\ufffb\017\ufffb\001\002\000\006\015\ufff8" +
    "\017\ufff8\001\002\000\004\022\047\001\002\000\006\003" +
    "\045\022\046\001\002\000\006\015\uffee\017\uffee\001\002" +
    "\000\006\015\ufff1\017\ufff1\001\002\000\006\015\uffef\017" +
    "\uffef\001\002\000\010\003\052\020\054\022\053\001\002" +
    "\000\006\015\uffe5\017\uffe5\001\002\000\030\003\065\004" +
    "\062\005\067\006\056\007\066\011\057\012\063\013\064" +
    "\015\uffe1\017\uffe1\021\uffdf\001\002\000\006\015\ufff0\017" +
    "\ufff0\001\002\000\024\003\065\004\062\005\067\006\056" +
    "\007\066\011\057\012\063\013\064\021\uffdf\001\002\000" +
    "\006\015\uffdd\021\uffdd\001\002\000\006\015\uffd9\021\uffd9" +
    "\001\002\000\006\015\uffd7\021\uffd7\001\002\000\006\015" +
    "\071\021\uffe0\001\002\000\004\021\070\001\002\000\006" +
    "\015\uffdb\021\uffdb\001\002\000\006\015\uffd6\021\uffd6\001" +
    "\002\000\006\015\uffdc\021\uffdc\001\002\000\006\015\uffd5" +
    "\021\uffd5\001\002\000\006\015\uffd8\021\uffd8\001\002\000" +
    "\006\015\uffda\021\uffda\001\002\000\006\015\uffe3\017\uffe3" +
    "\001\002\000\022\003\065\004\062\005\067\006\056\007" +
    "\066\011\057\012\063\013\064\001\002\000\006\015\uffde" +
    "\021\uffde\001\002\000\004\021\074\001\002\000\006\015" +
    "\uffe2\017\uffe2\001\002\000\006\003\052\020\054\001\002" +
    "\000\006\003\052\020\054\001\002\000\006\015\uffe6\017" +
    "\uffe6\001\002\000\006\015\uffe4\017\uffe4\001\002\000\010" +
    "\003\033\011\034\012\035\001\002\000\010\003\033\011" +
    "\034\012\035\001\002\000\006\015\uffed\017\uffed\001\002" +
    "\000\006\015\uffec\017\uffec\001\002\000\004\016\115\001" +
    "\002\000\006\003\110\016\107\001\002\000\014\003\024" +
    "\005\026\006\017\007\030\010\022\001\002\000\014\003" +
    "\024\005\026\006\017\007\030\010\022\001\002\000\006" +
    "\015\040\017\112\001\002\000\006\003\ufff9\017\ufff9\001" +
    "\002\000\006\015\040\017\114\001\002\000\006\003\ufffc" +
    "\017\ufffc\001\002\000\014\003\024\005\026\006\017\007" +
    "\030\010\022\001\002\000\006\015\040\017\117\001\002" +
    "\000\006\003\ufffa\017\ufffa\001\002\000\006\014\014\017" +
    "\124\001\002\000\006\003\122\017\123\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\004\016\005\001\001\000\004\015\120\001" +
    "\001\000\004\015\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\017" +
    "\010\024\011\015\012\022\013\020\014\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\036\001\001\000\004\002" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\017\010\024\011\015\012\022\013\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\050\001\001\000\002\001\001\000\010\003" +
    "\054\004\057\005\072\001\001\000\002\001\001\000\010" +
    "\003\054\004\057\005\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\077" +
    "\001\001\000\004\006\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\103\001\001\000\004\002\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\017\010\024\011\015" +
    "\012\022\013\020\014\112\001\001\000\016\007\017\010" +
    "\024\011\015\012\022\013\020\014\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\017\010\024\011\015\012\022\013\020" +
    "\014\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PlaylistParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PlaylistParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PlaylistParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ErrorHandler errorHandler;
    private Token info;

    public PlaylistParser(PlaylistLex lex) {
        super(lex);
		this.errorHandler = new ErrorHandler();
        this.errorHandler.initGrammarOfPlaylists(); 
    }

    public Token getInfo() {
        return this.info;
    }

	public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

    public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setErrorForListGram((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PlaylistParser$actions {
  private final PlaylistParser parser;

  /** Constructor */
  CUP$PlaylistParser$actions(PlaylistParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PlaylistParser$do_action_part00000000(
    int                        CUP$PlaylistParser$act_num,
    java_cup.runtime.lr_parser CUP$PlaylistParser$parser,
    java.util.Stack            CUP$PlaylistParser$stack,
    int                        CUP$PlaylistParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PlaylistParser$result;

      /* select the action based on the action number */
      switch (CUP$PlaylistParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // playlist ::= LBRACE list RBRACE 
            {
              List<MusicList> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;
		 info = token; RESULT = list; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("playlist",12, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= playlist EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> start_val = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;
		RESULT = start_val;
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PlaylistParser$parser.done_parsing();
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // playlist ::= error list RBRACE 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("playlist",12, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // playlist ::= LBRACE error RBRACE 
            {
              List<MusicList> RESULT =null;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("playlist",12, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // playlist ::= LBRACE list error 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("playlist",12, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list ::= LIST COLON LBRACE options RBRACE 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;
		 RESULT = list; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-4)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list ::= error COLON LBRACE options RBRACE 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-4)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list ::= LIST error LBRACE options RBRACE 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-4)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list ::= LIST COLON error options RBRACE 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("list",11, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-4)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // options ::= options COMMA option 
            {
              List<MusicList> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		List<MusicList> list = (List<MusicList>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		MusicList opt = (MusicList)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		
                    RESULT = list;
                    if(opt != null) {
                        RESULT.add(opt);
                    }
                
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("options",10, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // options ::= option 
            {
              List<MusicList> RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		MusicList opt = (MusicList)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    if(opt != null) {
                        RESULT.add(opt);
                    }
                
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("options",10, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // option ::= name 
            {
              MusicList RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = name; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("option",9, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // option ::= random 
            {
              MusicList RESULT =null;
		int randomleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int randomright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Option random = (Option)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = random; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("option",9, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // option ::= circular 
            {
              MusicList RESULT =null;
		int circularleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int circularright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Option circular = (Option)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = circular; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("option",9, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // option ::= tracks 
            {
              MusicList RESULT =null;
		int tracksleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tracksright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		TrackList tracks = (TrackList)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = tracks; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("option",9, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // option ::= error 
            {
              MusicList RESULT =null;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("option",9, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= NAME COLON STR 
            {
              Name RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = new Name(info, name.getValue()); 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // name ::= error COLON STR 
            {
              Name RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // name ::= NAME error STR 
            {
              Name RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // name ::= NAME COLON error 
            {
              Name RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // random ::= RANDOM COLON boolean_val 
            {
              Option RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		
                    if(value != null) {
                        RESULT = new Option(info, Option.Type.RANDOM, value);
                    }
                
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("random",5, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // random ::= RANDOM error boolean_val 
            {
              Option RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("random",5, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // circular ::= CIRCULAR COLON boolean_val 
            {
              Option RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		
                    if(value != null) {
                        RESULT = new Option(info, Option.Type.CIRCULAR, value);
                    }
                
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("circular",6, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // circular ::= CIRCULAR error boolean_val 
            {
              Option RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("circular",6, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean_val ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("boolean_val",0, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean_val ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("boolean_val",0, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolean_val ::= error 
            {
              Boolean RESULT =null;
		 RESULT = null; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("boolean_val",0, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tracks ::= TRACKS COLON tracks_l 
            {
              TrackList RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = new TrackList(info, list); 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks",8, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tracks ::= error COLON tracks_l 
            {
              TrackList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks",8, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tracks ::= TRACKS error tracks_l 
            {
              TrackList RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks",8, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tracks_l ::= LBRACKET tracks_list RBRACKET 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;
		 RESULT = list; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks_l",4, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tracks_l ::= error tracks_list RBRACKET 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-1)).value;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks_l",4, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tracks_l ::= error 
            {
              List<Token> RESULT =null;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks_l",4, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tracks_list ::= list_id 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = list; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks_list",3, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tracks_list ::= 
            {
              List<Token> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("tracks_list",3, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // list_id ::= list_id COMMA id 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		
                    RESULT = list;
                    if(token != null) {
                        RESULT.add(token);
                    }
                
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("list_id",2, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.elementAt(CUP$PlaylistParser$top-2)), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_id ::= id 
            {
              List<Token> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    if(token != null) {
                        RESULT.add(token);
                    }
                
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("list_id",2, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // id ::= ID 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // id ::= LIST 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // id ::= NAME 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id ::= RANDOM 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id ::= CIRCULAR 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // id ::= TRUE 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= FALSE 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PlaylistParser$stack.peek()).value;
		 RESULT = t; 
              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id ::= error 
            {
              Token RESULT =null;

              CUP$PlaylistParser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PlaylistParser$stack.peek()), RESULT);
            }
          return CUP$PlaylistParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PlaylistParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PlaylistParser$do_action(
    int                        CUP$PlaylistParser$act_num,
    java_cup.runtime.lr_parser CUP$PlaylistParser$parser,
    java.util.Stack            CUP$PlaylistParser$stack,
    int                        CUP$PlaylistParser$top)
    throws java.lang.Exception
    {
              return CUP$PlaylistParser$do_action_part00000000(
                               CUP$PlaylistParser$act_num,
                               CUP$PlaylistParser$parser,
                               CUP$PlaylistParser$stack,
                               CUP$PlaylistParser$top);
    }
}

}
