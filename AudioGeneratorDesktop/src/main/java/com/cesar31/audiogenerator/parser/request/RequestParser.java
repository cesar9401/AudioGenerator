
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser.request;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.cesar31.audiogenerator.request.*;
import com.cesar31.audiogenerator.parser.Token;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RequestParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return RequestParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public RequestParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RequestParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RequestParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\014\005\000\002\002\004\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\013\004" +
    "\000\002\013\003\000\002\012\003\000\002\012\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\002\006\000\002\002\006\000\002" +
    "\002\006\000\002\002\006\000\002\002\006\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\003\004\013\006\001\002\000\010\003" +
    "\143\004\144\013\015\001\002\000\004\002\142\001\002" +
    "\000\006\003\136\004\135\001\002\000\006\003\011\013" +
    "\015\001\002\000\006\003\ufff9\013\ufff9\001\002\000\020" +
    "\003\131\005\120\006\117\007\113\010\114\013\132\015" +
    "\115\001\002\000\006\003\076\013\100\001\002\000\006" +
    "\003\ufffa\013\ufffa\001\002\000\006\003\ufffb\013\ufffb\001" +
    "\002\000\010\003\066\005\070\006\067\001\002\000\006" +
    "\003\043\015\044\001\002\000\006\007\020\010\021\001" +
    "\002\000\006\003\042\013\024\001\002\000\006\003\023" +
    "\013\024\001\002\000\006\003\ufff7\013\ufff7\001\002\000" +
    "\010\003\ufff3\013\ufff3\014\036\001\002\000\006\003\025" +
    "\014\026\001\002\000\004\005\034\001\002\000\006\003" +
    "\027\005\030\001\002\000\004\012\033\001\002\000\006" +
    "\003\031\012\032\001\002\000\006\003\uffe6\013\uffe6\001" +
    "\002\000\006\003\uffea\013\uffea\001\002\000\006\003\uffe7" +
    "\013\uffe7\001\002\000\004\012\035\001\002\000\006\003" +
    "\uffe8\013\uffe8\001\002\000\004\005\037\001\002\000\004" +
    "\012\040\001\002\000\006\003\uffe9\013\uffe9\001\002\000" +
    "\006\003\ufff8\013\ufff8\001\002\000\010\003\ufff5\013\ufff5" +
    "\014\036\001\002\000\006\003\064\013\046\001\002\000" +
    "\006\003\045\013\046\001\002\000\010\003\uffef\013\uffef" +
    "\014\061\001\002\000\006\003\050\014\051\001\002\000" +
    "\006\003\ufff2\013\ufff2\001\002\000\004\006\057\001\002" +
    "\000\006\003\052\006\053\001\002\000\004\012\056\001" +
    "\002\000\006\003\054\012\055\001\002\000\006\003\uffdd" +
    "\013\uffdd\001\002\000\006\003\uffe1\013\uffe1\001\002\000" +
    "\006\003\uffde\013\uffde\001\002\000\004\012\060\001\002" +
    "\000\006\003\uffdf\013\uffdf\001\002\000\004\006\062\001" +
    "\002\000\004\012\063\001\002\000\006\003\uffe0\013\uffe0" +
    "\001\002\000\004\014\061\001\002\000\006\003\ufff0\013" +
    "\ufff0\001\002\000\004\012\075\001\002\000\006\003\074" +
    "\012\073\001\002\000\006\003\072\012\071\001\002\000" +
    "\006\007\uffee\010\uffee\001\002\000\006\007\uffeb\010\uffeb" +
    "\001\002\000\006\003\uffe5\015\uffe5\001\002\000\006\003" +
    "\uffe2\015\uffe2\001\002\000\012\003\uffe3\007\uffec\010\uffec" +
    "\015\uffe3\001\002\000\020\002\ufffd\005\120\006\117\007" +
    "\113\010\114\014\116\015\115\001\002\000\006\003\ufffc" +
    "\013\ufffc\001\002\000\012\003\102\005\070\006\067\014" +
    "\103\001\002\000\004\002\001\001\002\000\006\004\111" +
    "\012\075\001\002\000\006\003\105\004\104\001\002\000" +
    "\006\003\110\012\107\001\002\000\004\012\106\001\002" +
    "\000\004\002\uffd5\001\002\000\004\002\uffd8\001\002\000" +
    "\004\002\uffd4\001\002\000\004\012\112\001\002\000\004" +
    "\002\uffd6\001\002\000\006\003\127\013\024\001\002\000" +
    "\006\003\127\013\024\001\002\000\006\003\064\013\046" +
    "\001\002\000\004\004\123\001\002\000\004\012\122\001" +
    "\002\000\004\012\121\001\002\000\006\007\uffed\010\uffed" +
    "\001\002\000\006\003\uffe4\015\uffe4\001\002\000\004\012" +
    "\124\001\002\000\004\002\uffd7\001\002\000\006\003\ufff1" +
    "\013\ufff1\001\002\000\006\003\ufff4\013\ufff4\001\002\000" +
    "\004\014\036\001\002\000\006\003\ufff6\013\ufff6\001\002" +
    "\000\004\014\116\001\002\000\006\003\134\014\103\001" +
    "\002\000\004\002\ufffe\001\002\000\004\004\111\001\002" +
    "\000\006\003\141\012\140\001\002\000\004\012\137\001" +
    "\002\000\006\003\uffda\013\uffda\001\002\000\006\003\uffdc" +
    "\013\uffdc\001\002\000\006\003\uffd9\013\uffd9\001\002\000" +
    "\004\002\000\001\002\000\014\005\120\006\117\007\113" +
    "\010\114\015\115\001\002\000\004\012\150\001\002\000" +
    "\006\003\146\013\100\001\002\000\016\005\120\006\117" +
    "\007\113\010\114\014\116\015\115\001\002\000\004\002" +
    "\uffff\001\002\000\006\003\uffdb\013\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\007\006\014\004\001\001\000\016\005" +
    "\016\006\015\010\007\011\012\012\013\013\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\016\006" +
    "\015\010\007\011\012\012\013\013\011\001\001\000\002" +
    "\001\001\000\004\004\132\001\001\000\016\004\100\005" +
    "\016\006\015\010\007\011\012\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\040\001\001\000\004" +
    "\002\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\064\001\001" +
    "\000\004\003\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\127\001\001\000\004\002\125\001" +
    "\001\000\004\003\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\146\005" +
    "\016\006\015\010\007\011\012\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RequestParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RequestParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RequestParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ErrorHandler errorHandler;
    private Token info;

    public RequestParser(RequestLex lex) {
        super(lex);
		this.errorHandler = new ErrorHandler();
        this.errorHandler.initGrammarOfRequests();
    }

    public Token getInfo() {
        return this.info;
    }

    public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

    public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setErrorForGramOfRequest((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
        //this.errorHandler.setErrorForListGram((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RequestParser$actions {
  private final RequestParser parser;

  /** Constructor */
  CUP$RequestParser$actions(RequestParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action_part00000000(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RequestParser$result;

      /* select the action based on the action number */
      switch (CUP$RequestParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // request ::= op_request options cl_request 
            {
              List<Request> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> list = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 info = token; RESULT = list; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= request EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> start_val = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		RESULT = start_val;
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RequestParser$parser.done_parsing();
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // request ::= error options cl_request 
            {
              List<Request> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> list = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // request ::= op_request error cl_request 
            {
              List<Request> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // request ::= op_request options error 
            {
              List<Request> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> list = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // options ::= options option 
            {
              List<Request> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> list = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Request op = (Request)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                    RESULT = list;
                    if(op != null) {
                        RESULT.add(op);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("options",9, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // options ::= option 
            {
              List<Request> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Request op = (Request)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    if(op != null) {
                        RESULT.add(op);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("options",9, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // option ::= type 
            {
              Request RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = type; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("option",8, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // option ::= name 
            {
              Request RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestName name = (RequestName)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = name; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("option",8, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= op_type LIST cl_type 
            {
              Type RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    if(info != null) {
                        RESULT = new Type(info, token);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= op_type TRACK cl_type 
            {
              Type RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    if(info != null) {
                        RESULT = new Type(info, token);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= error LIST cl_type 
            {
              Type RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= op_type LIST error 
            {
              Type RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= error TRACK cl_type 
            {
              Type RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= op_type TRACK error 
            {
              Type RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // name ::= op_name STR cl_name 
            {
              RequestName RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    if(info != null) {
                        RESULT = new RequestName(info, token);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= error STR cl_name 
            {
              RequestName RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // name ::= op_name error cl_name 
            {
              RequestName RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // name ::= op_name STR error 
            {
              RequestName RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_type ::= SMALLER TYPE GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_type",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_type ::= error TYPE GREATER 
            {
              Token RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_type",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_type ::= SMALLER error GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_type",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_type ::= SMALLER TYPE error 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_type",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cl_type ::= SMALLER DIVIDE TYPE GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_type",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cl_type ::= error DIVIDE TYPE GREATER 
            {
              Token RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_type",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cl_type ::= SMALLER error TYPE GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_type",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cl_type ::= SMALLER DIVIDE error GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_type",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cl_type ::= SMALLER DIVIDE TYPE error 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_type",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_name ::= SMALLER NAME GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_name",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_name ::= error NAME GREATER 
            {
              Token RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_name",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_name ::= SMALLER error GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_name",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_name ::= SMALLER NAME error 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_name",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cl_name ::= SMALLER DIVIDE NAME GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_name",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cl_name ::= error DIVIDE NAME GREATER 
            {
              Token RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_name",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cl_name ::= SMALLER error NAME GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_name",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cl_name ::= SMALLER DIVIDE error GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_name",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cl_name ::= SMALLER DIVIDE NAME error 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_name",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_request ::= SMALLER REQUEST GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_request",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_request ::= error REQUEST GREATER 
            {
              Token RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_request",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_request ::= SMALLER error GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_request",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_request ::= SMALLER REQUEST error 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_request",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cl_request ::= SMALLER DIVIDE REQUEST GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cl_request ::= error DIVIDE REQUEST GREATER 
            {
              Token RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cl_request ::= SMALLER error REQUEST GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cl_request ::= SMALLER DIVIDE error GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cl_request ::= SMALLER DIVIDE REQUEST error 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RequestParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
              return CUP$RequestParser$do_action_part00000000(
                               CUP$RequestParser$act_num,
                               CUP$RequestParser$parser,
                               CUP$RequestParser$stack,
                               CUP$RequestParser$top);
    }
}

}
