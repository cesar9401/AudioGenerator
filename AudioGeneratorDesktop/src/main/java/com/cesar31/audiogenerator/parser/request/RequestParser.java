
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.audiogenerator.parser.request;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.cesar31.audiogenerator.request.*;
import com.cesar31.audiogenerator.parser.Token;
import com.cesar31.audiogenerator.error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RequestParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return RequestParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public RequestParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RequestParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RequestParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\014\005\000\002\002\004\000\002\013" +
    "\004\000\002\013\003\000\002\012\003\000\002\012\003" +
    "\000\002\011\005\000\002\011\005\000\002\010\005\000" +
    "\002\005\005\000\002\002\006\000\002\006\005\000\002" +
    "\003\006\000\002\007\005\000\002\004\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\004\013\005\001\002\000\004\002\050\001" +
    "\002\000\004\004\046\001\002\000\004\013\013\001\002" +
    "\000\004\013\041\001\002\000\004\013\ufffc\001\002\000" +
    "\004\013\ufffe\001\002\000\004\013\ufffd\001\002\000\006" +
    "\005\035\006\034\001\002\000\004\015\026\001\002\000" +
    "\006\007\016\010\017\001\002\000\004\013\021\001\002" +
    "\000\004\013\021\001\002\000\004\013\ufffa\001\002\000" +
    "\004\014\022\001\002\000\004\005\023\001\002\000\004" +
    "\012\024\001\002\000\004\013\ufff7\001\002\000\004\013" +
    "\ufffb\001\002\000\004\013\027\001\002\000\004\014\031" +
    "\001\002\000\004\013\ufff9\001\002\000\004\006\032\001" +
    "\002\000\004\012\033\001\002\000\004\013\ufff5\001\002" +
    "\000\004\012\037\001\002\000\004\012\036\001\002\000" +
    "\006\007\ufff8\010\ufff8\001\002\000\004\015\ufff6\001\002" +
    "\000\004\013\uffff\001\002\000\010\005\035\006\034\014" +
    "\043\001\002\000\004\002\001\001\002\000\004\004\044" +
    "\001\002\000\004\012\045\001\002\000\004\002\ufff3\001" +
    "\002\000\004\012\047\001\002\000\004\013\ufff4\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\006\007\005\014\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\014\006\013\010\007" +
    "\011\011\012\010\013\006\001\001\000\016\004\041\005" +
    "\014\006\013\010\007\011\011\012\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\024" +
    "\001\001\000\004\002\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RequestParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RequestParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RequestParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ErrorHandler errorHandler;
    private Token info;

    public RequestParser(RequestLex lex) {
        super(lex);
		this.errorHandler = new ErrorHandler();
    }

    public Token getInfo() {
        return this.info;
    }

    public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

    public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
        System.out.println();
		//this.errorHandler.setErrorForListGram((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RequestParser$actions {
  private final RequestParser parser;

  /** Constructor */
  CUP$RequestParser$actions(RequestParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action_part00000000(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RequestParser$result;

      /* select the action based on the action number */
      switch (CUP$RequestParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // request ::= op_request options cl_request 
            {
              List<Request> RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> list = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 info = token; RESULT = list; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= request EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> start_val = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		RESULT = start_val;
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RequestParser$parser.done_parsing();
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // options ::= options option 
            {
              List<Request> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		List<Request> list = (List<Request>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Request op = (Request)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                    RESULT = list;
                    if(op != null) {
                        RESULT.add(op);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("options",9, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // options ::= option 
            {
              List<Request> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Request op = (Request)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    if(op != null) {
                        RESULT.add(op);
                    }
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("options",9, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // option ::= type 
            {
              Request RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = type; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("option",8, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // option ::= name 
            {
              Request RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestName name = (RequestName)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = name; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("option",8, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= op_type LIST cl_type 
            {
              Type RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = new Type(info, token); 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= op_type TRACK cl_type 
            {
              Type RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = new Type(info, token); 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // name ::= op_name STR cl_name 
            {
              RequestName RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = new RequestName(info, token); 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // op_type ::= SMALLER TYPE GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_type",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cl_type ::= SMALLER DIVIDE TYPE GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_type",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // op_name ::= SMALLER NAME GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_name",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cl_name ::= SMALLER DIVIDE NAME GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_name",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op_request ::= SMALLER REQUEST GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("op_request",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cl_request ::= SMALLER DIVIDE REQUEST GREATER 
            {
              Token RESULT =null;
		int infoleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		Token info = (Token)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		 RESULT = info; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("cl_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RequestParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
              return CUP$RequestParser$do_action_part00000000(
                               CUP$RequestParser$act_num,
                               CUP$RequestParser$parser,
                               CUP$RequestParser$stack,
                               CUP$RequestParser$top);
    }
}

}
