// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: audio.flex


package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import static com.cesar31.audiogenerator.parser.AudioParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AudioLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\11\24"+
    "\2\0\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\36\1\41"+
    "\1\42\1\43\1\36\1\44\1\45\1\36\1\46\1\47"+
    "\1\50\1\36\1\51\4\36\1\52\1\53\1\54\1\55"+
    "\1\36\1\0\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\41\1\70\1\71\1\72"+
    "\1\73\1\74\1\36\1\75\1\76\1\77\1\100\1\51"+
    "\1\101\1\102\1\36\1\103\1\104\1\105\1\106\54\0"+
    "\1\107\12\0\1\107\4\0\1\107\5\0\27\107\1\0"+
    "\37\107\1\0\u01ca\107\4\0\14\107\16\0\5\107\7\0"+
    "\1\107\1\0\1\107\21\0\165\107\1\0\2\107\2\0"+
    "\4\107\1\0\1\107\6\0\1\107\1\0\3\107\1\0"+
    "\1\107\1\0\24\107\1\0\123\107\1\0\213\107\1\0"+
    "\255\107\1\0\46\107\2\0\1\107\6\0\51\107\10\0"+
    "\55\107\1\0\1\107\1\0\2\107\1\0\2\107\1\0"+
    "\1\107\10\0\33\107\4\0\4\107\35\0\13\107\5\0"+
    "\100\107\12\110\4\0\146\107\1\0\10\107\2\0\12\107"+
    "\1\0\6\107\12\110\3\107\2\0\1\107\20\0\73\107"+
    "\2\0\145\107\16\0\12\110\54\107\4\0\1\107\2\0"+
    "\1\107\2\0\56\107\22\0\34\107\4\0\13\107\65\0"+
    "\25\107\1\0\10\107\25\0\17\107\1\0\201\107\2\0"+
    "\12\110\1\0\23\107\1\0\10\107\2\0\2\107\2\0"+
    "\26\107\1\0\7\107\1\0\1\107\3\0\4\107\2\0"+
    "\11\107\2\0\2\107\2\0\4\107\10\0\1\107\4\0"+
    "\2\107\1\0\5\107\2\0\12\110\2\107\12\0\1\107"+
    "\1\0\1\107\2\0\3\107\1\0\6\107\4\0\2\107"+
    "\2\0\26\107\1\0\7\107\1\0\2\107\1\0\2\107"+
    "\1\0\2\107\2\0\1\107\1\0\5\107\4\0\2\107"+
    "\2\0\3\107\3\0\1\107\7\0\4\107\1\0\1\107"+
    "\7\0\12\110\6\107\13\0\3\107\1\0\11\107\1\0"+
    "\3\107\1\0\26\107\1\0\7\107\1\0\2\107\1\0"+
    "\5\107\2\0\12\107\1\0\3\107\1\0\3\107\2\0"+
    "\1\107\17\0\4\107\2\0\12\110\11\0\7\107\1\0"+
    "\3\107\1\0\10\107\2\0\2\107\2\0\26\107\1\0"+
    "\7\107\1\0\2\107\1\0\5\107\2\0\11\107\2\0"+
    "\2\107\2\0\3\107\10\0\2\107\4\0\2\107\1\0"+
    "\5\107\2\0\12\110\1\0\1\107\20\0\2\107\1\0"+
    "\6\107\3\0\3\107\1\0\4\107\3\0\2\107\1\0"+
    "\1\107\1\0\2\107\3\0\2\107\3\0\3\107\3\0"+
    "\14\107\4\0\5\107\3\0\3\107\1\0\4\107\2\0"+
    "\1\107\6\0\1\107\16\0\12\110\20\0\15\107\1\0"+
    "\3\107\1\0\27\107\1\0\20\107\3\0\10\107\1\0"+
    "\3\107\1\0\4\107\7\0\2\107\1\0\3\107\5\0"+
    "\4\107\2\0\12\110\20\0\4\107\1\0\10\107\1\0"+
    "\3\107\1\0\27\107\1\0\12\107\1\0\5\107\2\0"+
    "\11\107\1\0\3\107\1\0\4\107\7\0\2\107\7\0"+
    "\1\107\1\0\4\107\2\0\12\110\1\0\2\107\15\0"+
    "\4\107\1\0\10\107\1\0\3\107\1\0\63\107\1\0"+
    "\3\107\1\0\5\107\5\0\4\107\7\0\5\107\2\0"+
    "\12\110\12\0\6\107\2\0\2\107\1\0\22\107\3\0"+
    "\30\107\1\0\11\107\1\0\1\107\2\0\7\107\3\0"+
    "\1\107\4\0\6\107\1\0\1\107\1\0\10\107\6\0"+
    "\12\110\2\0\2\107\15\0\72\107\5\0\17\107\1\0"+
    "\12\110\47\0\2\107\1\0\1\107\1\0\5\107\1\0"+
    "\30\107\1\0\1\107\1\0\27\107\2\0\5\107\1\0"+
    "\1\107\1\0\6\107\2\0\12\110\2\0\4\107\40\0"+
    "\1\107\27\0\2\107\6\0\12\110\13\0\1\107\1\0"+
    "\1\107\1\0\1\107\4\0\12\107\1\0\44\107\4\0"+
    "\24\107\1\0\22\107\1\0\44\107\11\0\1\107\71\0"+
    "\100\107\12\110\6\0\100\107\12\110\4\107\2\0\46\107"+
    "\1\0\1\107\5\0\1\107\2\0\53\107\1\0\115\107"+
    "\1\0\4\107\2\0\7\107\1\0\1\107\1\0\4\107"+
    "\2\0\51\107\1\0\4\107\2\0\41\107\1\0\4\107"+
    "\2\0\7\107\1\0\1\107\1\0\4\107\2\0\17\107"+
    "\1\0\71\107\1\0\4\107\2\0\103\107\2\0\3\107"+
    "\40\0\20\107\20\0\126\107\2\0\6\107\3\0\u016c\107"+
    "\2\0\21\107\1\0\32\107\5\0\113\107\3\0\13\107"+
    "\7\0\15\107\1\0\7\107\13\0\25\107\13\0\24\107"+
    "\14\0\15\107\1\0\3\107\1\0\2\107\14\0\124\107"+
    "\3\0\1\107\4\0\2\107\2\0\12\110\41\0\3\107"+
    "\2\0\12\110\6\0\131\107\7\0\53\107\5\0\106\107"+
    "\12\0\37\107\1\0\14\107\4\0\14\107\12\0\12\110"+
    "\36\107\2\0\5\107\13\0\54\107\4\0\32\107\6\0"+
    "\12\110\46\0\34\107\4\0\77\107\1\0\35\107\2\0"+
    "\1\107\12\110\6\0\12\110\15\0\1\107\10\0\17\107"+
    "\101\0\114\107\4\0\12\110\21\0\11\107\14\0\60\107"+
    "\12\110\72\107\14\0\70\107\10\0\12\110\3\0\3\107"+
    "\12\110\44\107\2\0\11\107\7\0\53\107\2\0\3\107"+
    "\20\0\3\107\1\0\47\107\5\0\372\107\1\0\33\107"+
    "\2\0\6\107\2\0\46\107\2\0\6\107\2\0\10\107"+
    "\1\0\1\107\1\0\1\107\1\0\1\107\1\0\37\107"+
    "\2\0\65\107\1\0\7\107\1\0\1\107\3\0\3\107"+
    "\1\0\7\107\3\0\4\107\2\0\6\107\4\0\15\107"+
    "\5\0\3\107\1\0\7\107\102\0\2\107\23\0\1\107"+
    "\34\0\1\107\15\0\1\107\20\0\15\107\63\0\41\107"+
    "\21\0\1\107\4\0\1\107\2\0\12\107\1\0\1\107"+
    "\3\0\5\107\6\0\1\107\1\0\1\107\1\0\1\107"+
    "\1\0\4\107\1\0\13\107\2\0\4\107\5\0\5\107"+
    "\4\0\1\107\21\0\51\107\u022d\0\64\107\26\0\57\107"+
    "\1\0\57\107\1\0\205\107\6\0\11\107\14\0\46\107"+
    "\1\0\1\107\5\0\1\107\2\0\70\107\7\0\1\107"+
    "\17\0\30\107\11\0\7\107\1\0\7\107\1\0\7\107"+
    "\1\0\7\107\1\0\7\107\1\0\7\107\1\0\7\107"+
    "\1\0\7\107\1\0\40\107\57\0\1\107\325\0\3\107"+
    "\31\0\17\107\1\0\5\107\2\0\5\107\4\0\126\107"+
    "\2\0\2\107\2\0\3\107\1\0\132\107\1\0\4\107"+
    "\5\0\53\107\1\0\136\107\21\0\33\107\65\0\306\107"+
    "\112\0\360\107\20\0\215\107\103\0\56\107\2\0\15\107"+
    "\3\0\20\107\12\110\2\107\24\0\63\107\1\0\12\107"+
    "\1\0\163\107\45\0\11\107\2\0\147\107\2\0\65\107"+
    "\2\0\5\107\60\0\61\107\30\0\64\107\14\0\106\107"+
    "\12\0\12\110\6\0\30\107\3\0\1\107\1\0\3\107"+
    "\12\110\44\107\2\0\44\107\14\0\35\107\3\0\101\107"+
    "\16\0\1\107\12\110\6\0\20\107\12\110\5\107\1\0"+
    "\67\107\11\0\16\107\2\0\12\110\6\0\27\107\3\0"+
    "\111\107\30\0\3\107\2\0\20\107\2\0\5\107\12\0"+
    "\6\107\2\0\6\107\2\0\6\107\11\0\7\107\1\0"+
    "\7\107\1\0\53\107\1\0\14\107\10\0\173\107\1\0"+
    "\2\107\2\0\12\110\6\0\244\107\14\0\27\107\4\0"+
    "\61\107\4\0\156\107\2\0\152\107\46\0\7\107\14\0"+
    "\5\107\5\0\14\107\1\0\15\107\1\0\5\107\1\0"+
    "\1\107\1\0\2\107\1\0\2\107\1\0\154\107\41\0"+
    "\153\107\22\0\100\107\2\0\66\107\50\0\14\107\4\0"+
    "\20\107\20\0\20\107\3\0\2\107\30\0\3\107\40\0"+
    "\5\107\1\0\207\107\23\0\12\110\7\0\32\107\4\0"+
    "\1\107\1\0\32\107\13\0\131\107\3\0\6\107\2\0"+
    "\6\107\2\0\6\107\2\0\3\107\43\0\14\107\1\0"+
    "\32\107\1\0\23\107\1\0\2\107\1\0\17\107\2\0"+
    "\16\107\42\0\173\107\105\0\65\107\210\0\1\107\202\0"+
    "\35\107\3\0\61\107\17\0\1\107\37\0\40\107\15\0"+
    "\36\107\5\0\53\107\5\0\36\107\2\0\44\107\4\0"+
    "\10\107\1\0\5\107\52\0\236\107\2\0\12\110\6\0"+
    "\44\107\4\0\44\107\4\0\50\107\10\0\64\107\234\0"+
    "\67\107\11\0\26\107\12\0\10\107\230\0\6\107\2\0"+
    "\1\107\1\0\54\107\1\0\2\107\3\0\1\107\2\0"+
    "\27\107\12\0\27\107\11\0\37\107\101\0\23\107\1\0"+
    "\2\107\12\0\26\107\12\0\32\107\106\0\70\107\6\0"+
    "\2\107\100\0\4\107\1\0\2\107\5\0\10\107\1\0"+
    "\3\107\1\0\35\107\2\0\3\107\4\0\1\107\40\0"+
    "\35\107\3\0\35\107\43\0\10\107\1\0\36\107\31\0"+
    "\66\107\12\0\26\107\12\0\23\107\15\0\22\107\156\0"+
    "\111\107\67\0\63\107\15\0\63\107\15\0\50\107\10\0"+
    "\12\110\306\0\35\107\12\0\1\107\10\0\41\107\217\0"+
    "\27\107\11\0\107\107\37\0\12\110\17\0\74\107\25\0"+
    "\31\107\7\0\12\110\6\0\65\107\1\0\12\110\4\0"+
    "\3\107\11\0\44\107\2\0\1\107\11\0\105\107\4\0"+
    "\4\107\3\0\12\110\1\107\1\0\1\107\43\0\22\107"+
    "\1\0\45\107\6\0\1\107\101\0\7\107\1\0\1\107"+
    "\1\0\4\107\1\0\17\107\1\0\12\107\7\0\73\107"+
    "\5\0\12\110\6\0\4\107\1\0\10\107\2\0\2\107"+
    "\2\0\26\107\1\0\7\107\1\0\2\107\1\0\5\107"+
    "\1\0\12\107\2\0\2\107\2\0\3\107\2\0\1\107"+
    "\6\0\1\107\5\0\7\107\2\0\7\107\3\0\5\107"+
    "\213\0\113\107\5\0\12\110\4\0\2\107\40\0\106\107"+
    "\1\0\1\107\10\0\12\110\246\0\66\107\2\0\11\107"+
    "\27\0\6\107\42\0\101\107\3\0\1\107\13\0\12\110"+
    "\46\0\71\107\7\0\12\110\66\0\33\107\2\0\17\107"+
    "\4\0\12\110\306\0\73\107\145\0\100\107\12\110\25\0"+
    "\1\107\240\0\10\107\2\0\56\107\2\0\10\107\1\0"+
    "\2\107\33\0\77\107\10\0\1\107\10\0\112\107\3\0"+
    "\1\107\42\0\71\107\7\0\11\107\1\0\55\107\1\0"+
    "\11\107\17\0\12\110\30\0\36\107\2\0\26\107\1\0"+
    "\16\107\111\0\7\107\1\0\2\107\1\0\54\107\3\0"+
    "\1\107\1\0\2\107\1\0\11\107\10\0\12\110\6\0"+
    "\6\107\1\0\2\107\1\0\45\107\1\0\2\107\1\0"+
    "\6\107\7\0\12\110\u0136\0\27\107\11\0\232\107\146\0"+
    "\157\107\21\0\304\107\274\0\57\107\321\0\107\107\271\0"+
    "\71\107\7\0\37\107\1\0\12\110\146\0\36\107\2\0"+
    "\5\107\13\0\67\107\11\0\4\107\14\0\12\110\11\0"+
    "\25\107\5\0\23\107\260\0\100\107\200\0\113\107\4\0"+
    "\71\107\7\0\21\107\100\0\2\107\1\0\1\107\34\0"+
    "\370\107\10\0\363\107\15\0\37\107\61\0\3\107\21\0"+
    "\4\107\10\0\u018c\107\4\0\153\107\5\0\15\107\3\0"+
    "\11\107\7\0\12\107\3\0\2\107\306\0\5\107\3\0"+
    "\6\107\10\0\10\107\2\0\7\107\36\0\4\107\224\0"+
    "\3\107\273\0\125\107\1\0\107\107\1\0\2\107\2\0"+
    "\1\107\2\0\2\107\2\0\4\107\1\0\14\107\1\0"+
    "\1\107\1\0\7\107\1\0\101\107\1\0\4\107\2\0"+
    "\10\107\1\0\7\107\1\0\34\107\1\0\4\107\1\0"+
    "\5\107\1\0\1\107\3\0\7\107\1\0\u0154\107\2\0"+
    "\31\107\1\0\31\107\1\0\37\107\1\0\31\107\1\0"+
    "\37\107\1\0\31\107\1\0\37\107\1\0\31\107\1\0"+
    "\37\107\1\0\31\107\1\0\10\107\2\0\62\110\67\107"+
    "\4\0\62\107\10\0\1\107\16\0\1\107\26\0\5\107"+
    "\1\0\17\107\120\0\7\107\1\0\21\107\2\0\7\107"+
    "\1\0\2\107\1\0\5\107\325\0\55\107\3\0\16\107"+
    "\2\0\12\110\4\0\1\107\u0171\0\60\107\12\110\6\0"+
    "\305\107\13\0\7\107\51\0\114\107\4\0\12\110\246\0"+
    "\4\107\1\0\33\107\1\0\2\107\1\0\1\107\2\0"+
    "\1\107\1\0\12\107\1\0\4\107\1\0\1\107\1\0"+
    "\1\107\6\0\1\107\4\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\3\107\1\0\2\107\1\0\1\107\2\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\2\107\1\0\1\107\2\0\4\107\1\0"+
    "\7\107\1\0\4\107\1\0\4\107\1\0\1\107\1\0"+
    "\12\107\1\0\21\107\5\0\3\107\1\0\5\107\1\0"+
    "\21\107\164\0\32\107\6\0\32\107\6\0\32\107\166\0"+
    "\327\107\51\0\65\107\13\0\336\107\2\0\u0182\107\16\0"+
    "\u0131\107\37\0\36\107\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\22\24\1\25\1\26"+
    "\1\27\1\24\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\1\1\37\1\40\1\1\1\41\1\42"+
    "\1\43\1\0\1\44\1\0\1\45\1\46\1\47\1\50"+
    "\1\51\2\0\1\52\1\53\1\54\1\4\6\24\1\55"+
    "\3\24\1\56\3\24\1\57\2\24\1\60\4\24\1\61"+
    "\1\24\1\62\7\24\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\0\1\4\11\24\1\101\4\24\1\102\4\24"+
    "\1\103\7\24\1\104\4\24\1\105\3\24\1\106\7\24"+
    "\1\107\12\24\1\110\4\24\1\111\7\24\1\112\1\113"+
    "\2\24\1\114\11\24\1\115\3\24\1\116\1\117\5\24"+
    "\1\120\1\121\4\24\1\122\5\24\1\123\1\124\4\24"+
    "\1\125\1\126\6\24\1\127\4\24\1\130\1\24\1\131"+
    "\3\24\1\132\2\24\1\133\1\24\1\134\1\24\1\135"+
    "\2\24\1\136\3\24\1\137\2\24\1\140\1\141\1\142"+
    "\5\24\1\143\1\24\1\144\1\24\1\145\1\146\1\24"+
    "\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\333\0\333\0\u0124\0\333"+
    "\0\u016d\0\333\0\333\0\u01b6\0\333\0\333\0\333\0\333"+
    "\0\u01ff\0\333\0\u0248\0\333\0\u0291\0\u02da\0\u0323\0\u036c"+
    "\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc"+
    "\0\u0845\0\u088e\0\u08d7\0\333\0\333\0\333\0\u0920\0\333"+
    "\0\u0969\0\333\0\u09b2\0\333\0\333\0\333\0\333\0\u09fb"+
    "\0\333\0\333\0\u0a44\0\333\0\333\0\333\0\u0a8d\0\333"+
    "\0\u0ad6\0\333\0\333\0\333\0\333\0\333\0\u0b1f\0\u0b68"+
    "\0\333\0\333\0\333\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\u1488\0\u14d1\0\333\0\333\0\333\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\u0b1f\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687"+
    "\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\333\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\333\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\333"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\333"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u05b4\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u05b4\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281"+
    "\0\u22ca\0\u2313\0\u235c\0\u05b4\0\u23a5\0\u23ee\0\u2437\0\u2480"+
    "\0\u05b4\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f"+
    "\0\u05b4\0\333\0\u26c8\0\u2711\0\u05b4\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u05b4\0\u29eb"+
    "\0\u2a34\0\u2a7d\0\u05b4\0\u05b4\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1"+
    "\0\u2bea\0\u05b4\0\u05b4\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u05b4"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u05b4\0\u05b4\0\u2ec4"+
    "\0\u2f0d\0\u2f56\0\u2f9f\0\u05b4\0\u05b4\0\u2fe8\0\u3031\0\u307a"+
    "\0\u30c3\0\u310c\0\u3155\0\u05b4\0\u319e\0\u31e7\0\u3230\0\u3279"+
    "\0\u05b4\0\u32c2\0\u05b4\0\u330b\0\u3354\0\u339d\0\u05b4\0\u33e6"+
    "\0\u342f\0\u05b4\0\u3478\0\u05b4\0\u34c1\0\u05b4\0\u350a\0\u3553"+
    "\0\u05b4\0\u359c\0\u35e5\0\u362e\0\u05b4\0\u3677\0\u36c0\0\u05b4"+
    "\0\u05b4\0\u05b4\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u05b4"+
    "\0\u3876\0\u05b4\0\u38bf\0\u05b4\0\u05b4\0\u3908\0\u05b4\0\u05b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\4\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\4\1\55\1\56\1\32\1\57"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\40"+
    "\1\44\1\45\1\40\1\46\1\47\1\50\1\51\1\52"+
    "\4\40\1\60\1\61\1\62\2\4\1\63\1\64\1\65"+
    "\1\66\2\63\1\67\1\70\43\63\1\71\35\63\1\72"+
    "\3\4\3\72\1\73\2\72\1\74\40\72\1\75\35\72"+
    "\113\0\1\6\113\0\1\76\3\0\1\77\14\0\1\100"+
    "\56\0\1\101\14\0\1\102\73\0\1\103\21\0\1\104"+
    "\7\0\1\105\102\0\1\106\111\0\1\107\110\0\1\107"+
    "\1\0\2\26\104\0\1\110\5\0\1\111\110\0\1\112"+
    "\110\0\1\113\1\114\104\0\2\40\3\0\22\40\4\0"+
    "\17\40\1\115\1\116\5\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\15\40\1\117\10\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\1\120\14\40\1\121"+
    "\10\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\4\40\1\122\10\40\1\123\10\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\14\40\1\124\3\40\1\125"+
    "\3\40\1\126\1\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\1\127\25\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\26\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\1\130\25\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\13\40\1\131\12\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\132"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\1\133\14\40\1\134\10\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\4\40\1\135\3\40\1\136\15\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\17\40"+
    "\1\137\6\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\1\140\7\40\1\141\6\40\1\142\6\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\143"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\1\144\7\40\1\145\4\40\1\146\4\40\1\147\1\150"+
    "\2\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\17\40\1\151\6\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\1\152\3\40\1\153\21\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\15\40\1\154\10\40"+
    "\3\0\2\40\105\0\1\155\3\0\1\63\3\0\2\63"+
    "\2\0\43\63\1\0\35\63\6\0\1\156\1\157\62\0"+
    "\1\160\2\0\1\161\1\0\1\162\20\0\1\163\2\0"+
    "\1\164\57\0\1\165\2\0\1\166\1\0\1\167\22\0"+
    "\1\170\204\0\1\171\26\0\2\172\63\0\1\172\20\110"+
    "\1\173\70\110\2\114\1\10\1\174\105\114\23\0\2\40"+
    "\3\0\22\40\4\0\17\40\1\175\6\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\2\40\1\176\23\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\15\40"+
    "\1\177\10\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\3\40\1\200\13\40\1\201\1\202\5\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\14\40\1\203"+
    "\11\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\5\40\1\204\12\40\1\205\5\40\3\0\2\40\7\0"+
    "\1\206\13\0\2\40\3\0\22\40\4\0\1\40\1\207"+
    "\24\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\21\40\1\210\4\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\16\40\1\211\7\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\21\40\1\212\4\40\3\0"+
    "\2\40\7\0\1\213\13\0\2\40\3\0\22\40\4\0"+
    "\12\40\1\214\13\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\2\40\1\215\23\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\16\40\1\216\7\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\217"+
    "\21\40\3\0\2\40\7\0\1\220\13\0\2\40\3\0"+
    "\22\40\4\0\26\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\14\40\1\221\11\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\14\40\1\222\11\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\223"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\3\40\1\224\22\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\17\40\1\225\6\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\20\40\1\226\5\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\10\40\1\227"+
    "\15\40\3\0\2\40\7\0\1\230\13\0\2\40\3\0"+
    "\22\40\4\0\16\40\1\231\2\40\1\232\4\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\12\40\1\233"+
    "\13\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\14\40\1\234\11\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\12\40\1\235\13\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\13\40\1\236\12\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\10\40\1\237"+
    "\15\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\22\40\1\240\3\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\17\40\1\241\6\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\17\40\1\242\6\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\15\40\1\243"+
    "\10\40\3\0\2\40\20\110\1\173\6\110\1\10\61\110"+
    "\2\0\1\10\131\0\2\40\3\0\22\40\4\0\4\40"+
    "\1\244\21\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\4\40\1\245\21\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\4\40\1\246\21\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\4\40\1\247\21\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\1\250"+
    "\25\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\15\40\1\251\10\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\21\40\1\252\4\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\1\253\25\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\2\40\1\254\23\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\12\40"+
    "\1\255\13\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\4\40\1\256\21\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\4\40\1\257\21\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\10\40\1\260\15\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\20\40"+
    "\1\261\5\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\4\40\1\262\21\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\1\263\25\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\16\40\1\264\7\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\6\40\1\265"+
    "\17\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\20\40\1\266\5\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\14\40\1\267\11\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\4\40\1\270\21\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\1\271\3\40"+
    "\1\272\21\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\21\40\1\273\4\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\13\40\1\274\1\275\11\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\17\40\1\276"+
    "\6\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\15\40\1\277\10\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\10\40\1\300\15\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\15\40\1\301\10\40\3\0"+
    "\2\40\7\0\1\302\13\0\2\40\3\0\22\40\4\0"+
    "\26\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\1\303\25\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\21\40\1\304\4\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\4\40\1\305\21\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\3\40\1\306\22\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\12\40"+
    "\1\177\13\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\6\40\1\307\17\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\14\40\1\310\11\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\1\311\25\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\14\40\1\312"+
    "\11\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\2\40\1\313\23\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\10\40\1\314\15\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\22\40\1\315\3\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\316"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\4\40\1\317\21\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\17\40\1\320\6\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\17\40\1\321\6\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\322"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\4\40\1\323\10\40\1\323\10\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\17\40\1\324\6\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\17\40\1\325"+
    "\6\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\10\40\1\326\15\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\1\327\25\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\21\40\1\330\4\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\14\40\1\331\11\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\20\40"+
    "\1\332\5\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\1\333\25\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\15\40\1\334\10\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\2\40\1\335\23\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\15\40\1\336"+
    "\10\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\17\40\1\337\6\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\17\40\1\340\6\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\17\40\1\341\6\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\2\40\1\342"+
    "\23\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\1\343\25\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\12\40\1\344\13\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\3\40\1\345\22\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\14\40\1\346\11\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\1\347"+
    "\25\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\21\40\1\350\4\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\14\40\1\351\11\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\12\40\1\352\13\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\14\40\1\353"+
    "\11\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\15\40\1\354\10\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\1\355\25\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\14\40\1\356\11\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\4\40\1\357\21\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\21\40"+
    "\1\360\4\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\11\40\1\361\14\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\17\40\1\362\6\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\1\363\25\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\20\40\1\364"+
    "\5\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\10\40\1\365\15\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\3\40\1\366\22\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\14\40\1\367\11\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\10\40\1\370"+
    "\15\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\7\40\1\371\16\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\3\40\1\372\22\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\15\40\1\373\10\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\374"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\4\40\1\375\21\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\22\40\1\376\3\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\21\40\1\377\4\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\3\40\1\u0100"+
    "\22\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\3\40\1\u0101\22\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\20\40\1\u0102\5\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\22\40\1\u0103\3\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\4\40\1\u0104"+
    "\21\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\1\u0105\25\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\17\40\1\u0106\6\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\16\40\1\u0107\7\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\22\40\1\u0108\3\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\1\u0109"+
    "\25\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\25\40\1\u010a\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\4\40\1\u010b\21\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\14\40\1\u010c\11\40\3\0\2\40"+
    "\23\0\2\40\3\0\22\40\4\0\17\40\1\u010d\6\40"+
    "\3\0\2\40\23\0\2\40\3\0\22\40\4\0\1\u010e"+
    "\25\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\4\40\1\u010f\21\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\4\40\1\u0110\21\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\3\40\1\u0111\22\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\20\40\1\u0112"+
    "\5\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\1\u0113\25\40\3\0\2\40\23\0\2\40\3\0\22\40"+
    "\4\0\2\40\1\u0114\23\40\3\0\2\40\23\0\2\40"+
    "\3\0\22\40\4\0\1\u0115\25\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\17\40\1\u0116\6\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\21\40\1\u0117"+
    "\4\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\17\40\1\u0118\6\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\14\40\1\u0119\11\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\12\40\1\u011a\13\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\10\40\1\u011b"+
    "\15\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\17\40\1\u011c\6\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\15\40\1\305\10\40\3\0\2\40\23\0"+
    "\2\40\3\0\22\40\4\0\4\40\1\u011d\21\40\3\0"+
    "\2\40\23\0\2\40\3\0\22\40\4\0\21\40\1\u011e"+
    "\4\40\3\0\2\40\23\0\2\40\3\0\22\40\4\0"+
    "\17\40\1\u011f\6\40\3\0\2\40\23\0\2\40\3\0"+
    "\22\40\4\0\4\40\1\u0120\21\40\3\0\2\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14673];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\1\1\1\11\1\1\2\11\1\1\4\11"+
    "\1\1\1\11\1\1\1\11\27\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\4\11\1\1\2\11\1\1\3\11"+
    "\1\0\1\11\1\0\5\11\2\0\3\11\41\1\15\11"+
    "\1\1\1\0\12\1\1\11\4\1\1\11\4\1\1\11"+
    "\7\1\1\11\51\1\1\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	StringBuffer character = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object object) {
		return new Symbol(type, yyline + 1, yycolumn + 1, object);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AudioLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
            }
            // fall through
          case 105: break;
          case 2:
            { return symbol(TAB, yytext());
            }
            // fall through
          case 106: break;
          case 3:
            { return symbol(EOL, yytext());
            }
            // fall through
          case 107: break;
          case 4:
            { /* Ignore */
            }
            // fall through
          case 108: break;
          case 5:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 109: break;
          case 6:
            { string.setLength(0);
		yybegin(STRING);
            }
            // fall through
          case 110: break;
          case 7:
            { return symbol(MOD, yytext());
            }
            // fall through
          case 111: break;
          case 8:
            { character.setLength(0);
		yybegin(CHARACTER);
            }
            // fall through
          case 112: break;
          case 9:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 113: break;
          case 10:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 114: break;
          case 11:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 115: break;
          case 12:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 116: break;
          case 13:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 117: break;
          case 14:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 118: break;
          case 15:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 119: break;
          case 16:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 120: break;
          case 17:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 121: break;
          case 18:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 122: break;
          case 19:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 123: break;
          case 20:
            { return symbol(ID, yytext());
            }
            // fall through
          case 124: break;
          case 21:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 125: break;
          case 22:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 126: break;
          case 23:
            { return symbol(POW, yytext());
            }
            // fall through
          case 127: break;
          case 24:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 128: break;
          case 25:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 129: break;
          case 26:
            { string.append(yytext());
            }
            // fall through
          case 130: break;
          case 27:
            { string.append("\\t");
            }
            // fall through
          case 131: break;
          case 28:
            { string.append("\\n");
            }
            // fall through
          case 132: break;
          case 29:
            { string.append("\\r");
            }
            // fall through
          case 133: break;
          case 30:
            { yybegin(YYINITIAL);
		return symbol(STR, string.toString());
            }
            // fall through
          case 134: break;
          case 31:
            { string.append('\\');
            }
            // fall through
          case 135: break;
          case 32:
            { character.append(yytext());
            }
            // fall through
          case 136: break;
          case 33:
            { yybegin(YYINITIAL);
		return symbol(CHAR, character.toString());
            }
            // fall through
          case 137: break;
          case 34:
            { character.append('\\');
            }
            // fall through
          case 138: break;
          case 35:
            { return symbol(NULL, yytext());
            }
            // fall through
          case 139: break;
          case 36:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 140: break;
          case 37:
            { return symbol(AND, yytext());
            }
            // fall through
          case 141: break;
          case 38:
            { return symbol(XOR, yytext());
            }
            // fall through
          case 142: break;
          case 39:
            { return symbol(PLUS_PLUS, yytext());
            }
            // fall through
          case 143: break;
          case 40:
            { return symbol(PLUS_EQ, yytext());
            }
            // fall through
          case 144: break;
          case 41:
            { return symbol(MINUS_MINUS, yytext());
            }
            // fall through
          case 145: break;
          case 42:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 146: break;
          case 43:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 147: break;
          case 44:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 148: break;
          case 45:
            { return symbol(DO, yytext());
            }
            // fall through
          case 149: break;
          case 46:
            { return symbol(FA, yytext());
            }
            // fall through
          case 150: break;
          case 47:
            { return symbol(LA, yytext());
            }
            // fall through
          case 151: break;
          case 48:
            { return symbol(MI, yytext());
            }
            // fall through
          case 152: break;
          case 49:
            { return symbol(RE, yytext());
            }
            // fall through
          case 153: break;
          case 50:
            { return symbol(IF, yytext());
            }
            // fall through
          case 154: break;
          case 51:
            { return symbol(OR, yytext());
            }
            // fall through
          case 155: break;
          case 52:
            { string.append('\"');
            }
            // fall through
          case 156: break;
          case 53:
            { string.append('#');
            }
            // fall through
          case 157: break;
          case 54:
            { string.append('\n');
            }
            // fall through
          case 158: break;
          case 55:
            { string.append('\r');
            }
            // fall through
          case 159: break;
          case 56:
            { string.append('\t');
            }
            // fall through
          case 160: break;
          case 57:
            { character.append('#');
            }
            // fall through
          case 161: break;
          case 58:
            { character.append('\'');
            }
            // fall through
          case 162: break;
          case 59:
            { character.append('\n');
            }
            // fall through
          case 163: break;
          case 60:
            { character.append('\r');
            }
            // fall through
          case 164: break;
          case 61:
            { character.append('\t');
            }
            // fall through
          case 165: break;
          case 62:
            { return symbol(NAND, yytext());
            }
            // fall through
          case 166: break;
          case 63:
            { return symbol(NOR, yytext());
            }
            // fall through
          case 167: break;
          case 64:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 168: break;
          case 65:
            { return symbol(DO_, yytext());
            }
            // fall through
          case 169: break;
          case 66:
            { return symbol(FA_, yytext());
            }
            // fall through
          case 170: break;
          case 67:
            { return symbol(LA_, yytext());
            }
            // fall through
          case 171: break;
          case 68:
            { return symbol(RE_, yytext());
            }
            // fall through
          case 172: break;
          case 69:
            { return symbol(SOL, yytext());
            }
            // fall through
          case 173: break;
          case 70:
            { return symbol(VAR, yytext());
            }
            // fall through
          case 174: break;
          case 71:
            { return symbol(CASE, yytext());
            }
            // fall through
          case 175: break;
          case 72:
            { return symbol(KEEP, yytext());
            }
            // fall through
          case 176: break;
          case 73:
            { return symbol(FOR, yytext());
            }
            // fall through
          case 177: break;
          case 74:
            { return symbol(ELSE, yytext());
            }
            // fall through
          case 178: break;
          case 75:
            { return symbol(SOL_, yytext());
            }
            // fall through
          case 179: break;
          case 76:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 180: break;
          case 77:
            { return symbol(DOB, yytext());
            }
            // fall through
          case 181: break;
          case 78:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 182: break;
          case 79:
            { return symbol(DO_WHILE, yytext());
            }
            // fall through
          case 183: break;
          case 80:
            { return symbol(EVEN, yytext());
            }
            // fall through
          case 184: break;
          case 81:
            { return symbol(TRACK, yytext());
            }
            // fall through
          case 185: break;
          case 82:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 186: break;
          case 83:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 187: break;
          case 84:
            { return symbol(CAD, yytext());
            }
            // fall through
          case 188: break;
          case 85:
            { return symbol(INT, yytext());
            }
            // fall through
          case 189: break;
          case 86:
            { return symbol(WAIT, yytext());
            }
            // fall through
          case 190: break;
          case 87:
            { return symbol(PRIME, yytext());
            }
            // fall through
          case 191: break;
          case 88:
            { return symbol(SWITCH, yytext());
            }
            // fall through
          case 192: break;
          case 89:
            { return symbol(ARRAY, yytext());
            }
            // fall through
          case 193: break;
          case 90:
            { return symbol(DEFAULT, yytext());
            }
            // fall through
          case 194: break;
          case 91:
            { return symbol(ODD, yytext());
            }
            // fall through
          case 195: break;
          case 92:
            { return symbol(MSG, yytext());
            }
            // fall through
          case 196: break;
          case 93:
            { return symbol(ORDER, yytext());
            }
            // fall through
          case 197: break;
          case 94:
            { return symbol(RETURN, yytext());
            }
            // fall through
          case 198: break;
          case 95:
            { return symbol(CAR, yytext());
            }
            // fall through
          case 199: break;
          case 96:
            { return symbol(EXTENDS, yytext());
            }
            // fall through
          case 200: break;
          case 97:
            { return symbol(LENGTH, yytext());
            }
            // fall through
          case 201: break;
          case 98:
            { return symbol(WHILE, yytext());
            }
            // fall through
          case 202: break;
          case 99:
            { return symbol(CONTINUE, yytext());
            }
            // fall through
          case 203: break;
          case 100:
            { return symbol(MAIN, yytext());
            }
            // fall through
          case 204: break;
          case 101:
            { return symbol(SUM, yytext());
            }
            // fall through
          case 205: break;
          case 102:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 206: break;
          case 103:
            { return symbol(PLAY, yytext());
            }
            // fall through
          case 207: break;
          case 104:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
