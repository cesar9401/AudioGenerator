// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: audio.flex


package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import static com.cesar31.audiogenerator.parser.AudioParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AudioLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\11\24"+
    "\1\0\1\25\1\26\1\27\1\30\2\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\37"+
    "\1\42\1\43\1\44\1\37\1\45\1\46\1\37\1\47"+
    "\1\50\1\51\1\37\1\52\4\37\1\53\1\54\1\55"+
    "\1\56\1\57\1\0\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\42\1\72\1\73"+
    "\1\74\1\75\1\76\1\37\1\77\1\100\1\101\1\102"+
    "\1\52\1\103\1\104\1\37\1\105\1\106\1\107\1\110"+
    "\54\0\1\57\12\0\1\57\4\0\1\57\5\0\27\57"+
    "\1\0\37\57\1\0\u01ca\57\4\0\14\57\16\0\5\57"+
    "\7\0\1\57\1\0\1\57\21\0\165\57\1\0\2\57"+
    "\2\0\4\57\1\0\1\57\6\0\1\57\1\0\3\57"+
    "\1\0\1\57\1\0\24\57\1\0\123\57\1\0\213\57"+
    "\1\0\255\57\1\0\46\57\2\0\1\57\6\0\51\57"+
    "\10\0\55\57\1\0\1\57\1\0\2\57\1\0\2\57"+
    "\1\0\1\57\10\0\33\57\4\0\4\57\35\0\13\57"+
    "\5\0\100\57\12\111\4\0\146\57\1\0\10\57\2\0"+
    "\12\57\1\0\6\57\12\111\3\57\2\0\1\57\20\0"+
    "\73\57\2\0\145\57\16\0\12\111\54\57\4\0\1\57"+
    "\2\0\1\57\2\0\56\57\22\0\34\57\4\0\13\57"+
    "\65\0\25\57\1\0\10\57\25\0\17\57\1\0\201\57"+
    "\2\0\12\111\1\0\23\57\1\0\10\57\2\0\2\57"+
    "\2\0\26\57\1\0\7\57\1\0\1\57\3\0\4\57"+
    "\2\0\11\57\2\0\2\57\2\0\4\57\10\0\1\57"+
    "\4\0\2\57\1\0\5\57\2\0\12\111\2\57\12\0"+
    "\1\57\1\0\1\57\2\0\3\57\1\0\6\57\4\0"+
    "\2\57\2\0\26\57\1\0\7\57\1\0\2\57\1\0"+
    "\2\57\1\0\2\57\2\0\1\57\1\0\5\57\4\0"+
    "\2\57\2\0\3\57\3\0\1\57\7\0\4\57\1\0"+
    "\1\57\7\0\12\111\6\57\13\0\3\57\1\0\11\57"+
    "\1\0\3\57\1\0\26\57\1\0\7\57\1\0\2\57"+
    "\1\0\5\57\2\0\12\57\1\0\3\57\1\0\3\57"+
    "\2\0\1\57\17\0\4\57\2\0\12\111\11\0\7\57"+
    "\1\0\3\57\1\0\10\57\2\0\2\57\2\0\26\57"+
    "\1\0\7\57\1\0\2\57\1\0\5\57\2\0\11\57"+
    "\2\0\2\57\2\0\3\57\10\0\2\57\4\0\2\57"+
    "\1\0\5\57\2\0\12\111\1\0\1\57\20\0\2\57"+
    "\1\0\6\57\3\0\3\57\1\0\4\57\3\0\2\57"+
    "\1\0\1\57\1\0\2\57\3\0\2\57\3\0\3\57"+
    "\3\0\14\57\4\0\5\57\3\0\3\57\1\0\4\57"+
    "\2\0\1\57\6\0\1\57\16\0\12\111\20\0\15\57"+
    "\1\0\3\57\1\0\27\57\1\0\20\57\3\0\10\57"+
    "\1\0\3\57\1\0\4\57\7\0\2\57\1\0\3\57"+
    "\5\0\4\57\2\0\12\111\20\0\4\57\1\0\10\57"+
    "\1\0\3\57\1\0\27\57\1\0\12\57\1\0\5\57"+
    "\2\0\11\57\1\0\3\57\1\0\4\57\7\0\2\57"+
    "\7\0\1\57\1\0\4\57\2\0\12\111\1\0\2\57"+
    "\15\0\4\57\1\0\10\57\1\0\3\57\1\0\63\57"+
    "\1\0\3\57\1\0\5\57\5\0\4\57\7\0\5\57"+
    "\2\0\12\111\12\0\6\57\2\0\2\57\1\0\22\57"+
    "\3\0\30\57\1\0\11\57\1\0\1\57\2\0\7\57"+
    "\3\0\1\57\4\0\6\57\1\0\1\57\1\0\10\57"+
    "\6\0\12\111\2\0\2\57\15\0\72\57\5\0\17\57"+
    "\1\0\12\111\47\0\2\57\1\0\1\57\1\0\5\57"+
    "\1\0\30\57\1\0\1\57\1\0\27\57\2\0\5\57"+
    "\1\0\1\57\1\0\6\57\2\0\12\111\2\0\4\57"+
    "\40\0\1\57\27\0\2\57\6\0\12\111\13\0\1\57"+
    "\1\0\1\57\1\0\1\57\4\0\12\57\1\0\44\57"+
    "\4\0\24\57\1\0\22\57\1\0\44\57\11\0\1\57"+
    "\71\0\100\57\12\111\6\0\100\57\12\111\4\57\2\0"+
    "\46\57\1\0\1\57\5\0\1\57\2\0\53\57\1\0"+
    "\115\57\1\0\4\57\2\0\7\57\1\0\1\57\1\0"+
    "\4\57\2\0\51\57\1\0\4\57\2\0\41\57\1\0"+
    "\4\57\2\0\7\57\1\0\1\57\1\0\4\57\2\0"+
    "\17\57\1\0\71\57\1\0\4\57\2\0\103\57\2\0"+
    "\3\57\40\0\20\57\20\0\126\57\2\0\6\57\3\0"+
    "\u016c\57\2\0\21\57\1\0\32\57\5\0\113\57\3\0"+
    "\13\57\7\0\15\57\1\0\7\57\13\0\25\57\13\0"+
    "\24\57\14\0\15\57\1\0\3\57\1\0\2\57\14\0"+
    "\124\57\3\0\1\57\4\0\2\57\2\0\12\111\41\0"+
    "\3\57\2\0\12\111\6\0\131\57\7\0\53\57\5\0"+
    "\106\57\12\0\37\57\1\0\14\57\4\0\14\57\12\0"+
    "\12\111\36\57\2\0\5\57\13\0\54\57\4\0\32\57"+
    "\6\0\12\111\46\0\34\57\4\0\77\57\1\0\35\57"+
    "\2\0\1\57\12\111\6\0\12\111\15\0\1\57\10\0"+
    "\17\57\101\0\114\57\4\0\12\111\21\0\11\57\14\0"+
    "\60\57\12\111\72\57\14\0\70\57\10\0\12\111\3\0"+
    "\3\57\12\111\44\57\2\0\11\57\7\0\53\57\2\0"+
    "\3\57\20\0\3\57\1\0\47\57\5\0\372\57\1\0"+
    "\33\57\2\0\6\57\2\0\46\57\2\0\6\57\2\0"+
    "\10\57\1\0\1\57\1\0\1\57\1\0\1\57\1\0"+
    "\37\57\2\0\65\57\1\0\7\57\1\0\1\57\3\0"+
    "\3\57\1\0\7\57\3\0\4\57\2\0\6\57\4\0"+
    "\15\57\5\0\3\57\1\0\7\57\102\0\2\57\23\0"+
    "\1\57\34\0\1\57\15\0\1\57\20\0\15\57\63\0"+
    "\41\57\21\0\1\57\4\0\1\57\2\0\12\57\1\0"+
    "\1\57\3\0\5\57\6\0\1\57\1\0\1\57\1\0"+
    "\1\57\1\0\4\57\1\0\13\57\2\0\4\57\5\0"+
    "\5\57\4\0\1\57\21\0\51\57\u022d\0\64\57\26\0"+
    "\57\57\1\0\57\57\1\0\205\57\6\0\11\57\14\0"+
    "\46\57\1\0\1\57\5\0\1\57\2\0\70\57\7\0"+
    "\1\57\17\0\30\57\11\0\7\57\1\0\7\57\1\0"+
    "\7\57\1\0\7\57\1\0\7\57\1\0\7\57\1\0"+
    "\7\57\1\0\7\57\1\0\40\57\57\0\1\57\325\0"+
    "\3\57\31\0\17\57\1\0\5\57\2\0\5\57\4\0"+
    "\126\57\2\0\2\57\2\0\3\57\1\0\132\57\1\0"+
    "\4\57\5\0\53\57\1\0\136\57\21\0\33\57\65\0"+
    "\306\57\112\0\360\57\20\0\215\57\103\0\56\57\2\0"+
    "\15\57\3\0\20\57\12\111\2\57\24\0\63\57\1\0"+
    "\12\57\1\0\163\57\45\0\11\57\2\0\147\57\2\0"+
    "\65\57\2\0\5\57\60\0\61\57\30\0\64\57\14\0"+
    "\106\57\12\0\12\111\6\0\30\57\3\0\1\57\1\0"+
    "\3\57\12\111\44\57\2\0\44\57\14\0\35\57\3\0"+
    "\101\57\16\0\1\57\12\111\6\0\20\57\12\111\5\57"+
    "\1\0\67\57\11\0\16\57\2\0\12\111\6\0\27\57"+
    "\3\0\111\57\30\0\3\57\2\0\20\57\2\0\5\57"+
    "\12\0\6\57\2\0\6\57\2\0\6\57\11\0\7\57"+
    "\1\0\7\57\1\0\53\57\1\0\14\57\10\0\173\57"+
    "\1\0\2\57\2\0\12\111\6\0\244\57\14\0\27\57"+
    "\4\0\61\57\4\0\156\57\2\0\152\57\46\0\7\57"+
    "\14\0\5\57\5\0\14\57\1\0\15\57\1\0\5\57"+
    "\1\0\1\57\1\0\2\57\1\0\2\57\1\0\154\57"+
    "\41\0\153\57\22\0\100\57\2\0\66\57\50\0\14\57"+
    "\4\0\20\57\20\0\20\57\3\0\2\57\30\0\3\57"+
    "\40\0\5\57\1\0\207\57\23\0\12\111\7\0\32\57"+
    "\4\0\1\57\1\0\32\57\13\0\131\57\3\0\6\57"+
    "\2\0\6\57\2\0\6\57\2\0\3\57\43\0\14\57"+
    "\1\0\32\57\1\0\23\57\1\0\2\57\1\0\17\57"+
    "\2\0\16\57\42\0\173\57\105\0\65\57\210\0\1\57"+
    "\202\0\35\57\3\0\61\57\17\0\1\57\37\0\40\57"+
    "\15\0\36\57\5\0\53\57\5\0\36\57\2\0\44\57"+
    "\4\0\10\57\1\0\5\57\52\0\236\57\2\0\12\111"+
    "\6\0\44\57\4\0\44\57\4\0\50\57\10\0\64\57"+
    "\234\0\67\57\11\0\26\57\12\0\10\57\230\0\6\57"+
    "\2\0\1\57\1\0\54\57\1\0\2\57\3\0\1\57"+
    "\2\0\27\57\12\0\27\57\11\0\37\57\101\0\23\57"+
    "\1\0\2\57\12\0\26\57\12\0\32\57\106\0\70\57"+
    "\6\0\2\57\100\0\4\57\1\0\2\57\5\0\10\57"+
    "\1\0\3\57\1\0\35\57\2\0\3\57\4\0\1\57"+
    "\40\0\35\57\3\0\35\57\43\0\10\57\1\0\36\57"+
    "\31\0\66\57\12\0\26\57\12\0\23\57\15\0\22\57"+
    "\156\0\111\57\67\0\63\57\15\0\63\57\15\0\50\57"+
    "\10\0\12\111\306\0\35\57\12\0\1\57\10\0\41\57"+
    "\217\0\27\57\11\0\107\57\37\0\12\111\17\0\74\57"+
    "\25\0\31\57\7\0\12\111\6\0\65\57\1\0\12\111"+
    "\4\0\3\57\11\0\44\57\2\0\1\57\11\0\105\57"+
    "\4\0\4\57\3\0\12\111\1\57\1\0\1\57\43\0"+
    "\22\57\1\0\45\57\6\0\1\57\101\0\7\57\1\0"+
    "\1\57\1\0\4\57\1\0\17\57\1\0\12\57\7\0"+
    "\73\57\5\0\12\111\6\0\4\57\1\0\10\57\2\0"+
    "\2\57\2\0\26\57\1\0\7\57\1\0\2\57\1\0"+
    "\5\57\1\0\12\57\2\0\2\57\2\0\3\57\2\0"+
    "\1\57\6\0\1\57\5\0\7\57\2\0\7\57\3\0"+
    "\5\57\213\0\113\57\5\0\12\111\4\0\2\57\40\0"+
    "\106\57\1\0\1\57\10\0\12\111\246\0\66\57\2\0"+
    "\11\57\27\0\6\57\42\0\101\57\3\0\1\57\13\0"+
    "\12\111\46\0\71\57\7\0\12\111\66\0\33\57\2\0"+
    "\17\57\4\0\12\111\306\0\73\57\145\0\100\57\12\111"+
    "\25\0\1\57\240\0\10\57\2\0\56\57\2\0\10\57"+
    "\1\0\2\57\33\0\77\57\10\0\1\57\10\0\112\57"+
    "\3\0\1\57\42\0\71\57\7\0\11\57\1\0\55\57"+
    "\1\0\11\57\17\0\12\111\30\0\36\57\2\0\26\57"+
    "\1\0\16\57\111\0\7\57\1\0\2\57\1\0\54\57"+
    "\3\0\1\57\1\0\2\57\1\0\11\57\10\0\12\111"+
    "\6\0\6\57\1\0\2\57\1\0\45\57\1\0\2\57"+
    "\1\0\6\57\7\0\12\111\u0136\0\27\57\11\0\232\57"+
    "\146\0\157\57\21\0\304\57\274\0\57\57\321\0\107\57"+
    "\271\0\71\57\7\0\37\57\1\0\12\111\146\0\36\57"+
    "\2\0\5\57\13\0\67\57\11\0\4\57\14\0\12\111"+
    "\11\0\25\57\5\0\23\57\260\0\100\57\200\0\113\57"+
    "\4\0\71\57\7\0\21\57\100\0\2\57\1\0\1\57"+
    "\34\0\370\57\10\0\363\57\15\0\37\57\61\0\3\57"+
    "\21\0\4\57\10\0\u018c\57\4\0\153\57\5\0\15\57"+
    "\3\0\11\57\7\0\12\57\3\0\2\57\306\0\5\57"+
    "\3\0\6\57\10\0\10\57\2\0\7\57\36\0\4\57"+
    "\224\0\3\57\273\0\125\57\1\0\107\57\1\0\2\57"+
    "\2\0\1\57\2\0\2\57\2\0\4\57\1\0\14\57"+
    "\1\0\1\57\1\0\7\57\1\0\101\57\1\0\4\57"+
    "\2\0\10\57\1\0\7\57\1\0\34\57\1\0\4\57"+
    "\1\0\5\57\1\0\1\57\3\0\7\57\1\0\u0154\57"+
    "\2\0\31\57\1\0\31\57\1\0\37\57\1\0\31\57"+
    "\1\0\37\57\1\0\31\57\1\0\37\57\1\0\31\57"+
    "\1\0\37\57\1\0\31\57\1\0\10\57\2\0\62\111"+
    "\67\57\4\0\62\57\10\0\1\57\16\0\1\57\26\0"+
    "\5\57\1\0\17\57\120\0\7\57\1\0\21\57\2\0"+
    "\7\57\1\0\2\57\1\0\5\57\325\0\55\57\3\0"+
    "\16\57\2\0\12\111\4\0\1\57\u0171\0\60\57\12\111"+
    "\6\0\305\57\13\0\7\57\51\0\114\57\4\0\12\111"+
    "\246\0\4\57\1\0\33\57\1\0\2\57\1\0\1\57"+
    "\2\0\1\57\1\0\12\57\1\0\4\57\1\0\1\57"+
    "\1\0\1\57\6\0\1\57\4\0\1\57\1\0\1\57"+
    "\1\0\1\57\1\0\3\57\1\0\2\57\1\0\1\57"+
    "\2\0\1\57\1\0\1\57\1\0\1\57\1\0\1\57"+
    "\1\0\1\57\1\0\2\57\1\0\1\57\2\0\4\57"+
    "\1\0\7\57\1\0\4\57\1\0\4\57\1\0\1\57"+
    "\1\0\12\57\1\0\21\57\5\0\3\57\1\0\5\57"+
    "\1\0\21\57\164\0\32\57\6\0\32\57\6\0\32\57"+
    "\166\0\327\57\51\0\65\57\13\0\336\57\2\0\u0182\57"+
    "\16\0\u0131\57\37\0\36\57\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\22\25\1\26"+
    "\1\27\1\30\1\31\1\1\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\1\1\40\1\41\1\1\1\42\1\43"+
    "\1\0\1\4\4\0\1\44\1\0\1\45\1\0\1\46"+
    "\1\47\1\50\1\51\1\52\2\0\1\53\1\54\1\55"+
    "\1\4\6\25\1\56\3\25\1\57\3\25\1\60\2\25"+
    "\1\61\4\25\1\62\1\25\1\63\6\25\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\0\1\77\1\100\1\101\1\0\1\4\11\25"+
    "\1\102\4\25\1\103\4\25\1\104\7\25\1\105\4\25"+
    "\1\106\3\25\1\107\1\25\1\2\5\25\1\110\12\25"+
    "\1\111\4\25\1\112\7\25\1\113\1\114\2\25\1\115"+
    "\11\25\1\116\3\25\1\117\1\120\5\25\1\121\1\122"+
    "\4\25\1\123\6\25\1\124\4\25\1\125\1\126\6\25"+
    "\1\127\4\25\1\130\1\25\1\131\1\25\1\132\2\25"+
    "\1\133\2\25\1\134\1\25\1\135\1\25\1\136\2\25"+
    "\1\137\3\25\1\140\2\25\1\141\1\142\1\143\5\25"+
    "\1\144\1\25\1\145\1\25\1\146\1\147\1\25\1\150"+
    "\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\336\0\u0172\0\u01bc"+
    "\0\u0206\0\336\0\336\0\u0250\0\336\0\336\0\336\0\336"+
    "\0\u029a\0\336\0\u02e4\0\336\0\u032e\0\u0378\0\336\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862"+
    "\0\u08ac\0\u08f6\0\u0940\0\u098a\0\336\0\336\0\336\0\336"+
    "\0\u09d4\0\336\0\u0a1e\0\336\0\336\0\336\0\336\0\u0a68"+
    "\0\336\0\336\0\u0ab2\0\336\0\336\0\u0128\0\336\0\u0afc"+
    "\0\u0b46\0\u0b90\0\u0bda\0\336\0\u0c24\0\336\0\u0c6e\0\336"+
    "\0\336\0\336\0\336\0\336\0\u0cb8\0\u0d02\0\336\0\336"+
    "\0\336\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08"+
    "\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8"+
    "\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8"+
    "\0\u1642\0\336\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\336\0\u168c\0\336\0\336\0\u0cb8"+
    "\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\336\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2"+
    "\0\336\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\336\0\u1c54\0\u1c9e"+
    "\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\336\0\u1e5a\0\u1ea4"+
    "\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u065c\0\u20aa"+
    "\0\u0afc\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u065c\0\u2266"+
    "\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6"+
    "\0\u2500\0\u065c\0\u254a\0\u2594\0\u25de\0\u2628\0\u065c\0\u2672"+
    "\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u065c\0\336"+
    "\0\u2878\0\u28c2\0\u065c\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\u065c\0\u2ba6\0\u2bf0\0\u2c3a"+
    "\0\u065c\0\u065c\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u065c"+
    "\0\u065c\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u065c\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u065c\0\u30da\0\u3124\0\u316e"+
    "\0\u31b8\0\u065c\0\u065c\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a"+
    "\0\u3374\0\u065c\0\u33be\0\u3408\0\u3452\0\u349c\0\u065c\0\u34e6"+
    "\0\u065c\0\u3530\0\u065c\0\u357a\0\u35c4\0\u065c\0\u360e\0\u3658"+
    "\0\u065c\0\u36a2\0\u065c\0\u36ec\0\u065c\0\u3736\0\u3780\0\u065c"+
    "\0\u37ca\0\u3814\0\u385e\0\u065c\0\u38a8\0\u38f2\0\u065c\0\u065c"+
    "\0\u065c\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u065c\0\u3aae"+
    "\0\u065c\0\u3af8\0\u065c\0\u065c\0\u3b42\0\u065c\0\u065c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\4\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\4\1\56\1\57\1\4"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\41\1\45\1\46\1\41\1\47\1\50\1\51"+
    "\1\52\1\53\4\41\1\60\1\61\1\62\1\4\1\63"+
    "\1\64\1\65\1\66\2\63\1\67\1\70\44\63\1\71"+
    "\35\63\1\72\3\4\3\72\1\73\2\72\1\74\41\72"+
    "\1\75\35\72\113\0\1\76\1\77\1\0\1\100\21\0"+
    "\1\101\1\0\1\102\63\0\1\6\110\0\1\100\2\0"+
    "\1\103\21\0\1\101\1\0\1\102\66\0\1\104\3\0"+
    "\1\105\15\0\1\106\57\0\1\107\13\0\1\110\75\0"+
    "\1\111\20\0\1\112\10\0\1\113\102\0\1\114\112\0"+
    "\1\115\111\0\1\115\1\0\2\26\105\0\1\116\6\0"+
    "\1\117\111\0\1\120\111\0\1\121\1\122\104\0\2\41"+
    "\4\0\22\41\4\0\20\41\1\123\1\124\5\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\16\41\1\125"+
    "\10\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\126\14\41\1\127\10\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\5\41\1\130\10\41\1\131"+
    "\10\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\15\41\1\132\3\41\1\133\3\41\1\134\1\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\1\41\1\135"+
    "\25\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\27\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\136\25\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\14\41\1\137\12\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\5\41\1\140\21\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\1\41\1\141"+
    "\14\41\1\142\10\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\143\3\41\1\144\15\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\20\41\1\145"+
    "\6\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\146\7\41\1\147\6\41\1\150\6\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\5\41\1\151"+
    "\21\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\152\7\41\1\153\4\41\1\154\4\41\1\155"+
    "\1\156\2\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\20\41\1\157\6\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\1\41\1\160\3\41\1\161\21\41"+
    "\3\0\1\41\107\0\1\162\2\0\1\63\3\0\2\63"+
    "\2\0\44\63\1\0\35\63\6\0\1\163\1\164\64\0"+
    "\1\165\2\0\1\166\1\0\1\167\17\0\1\170\2\0"+
    "\1\171\61\0\1\172\2\0\1\173\1\0\1\174\11\0"+
    "\1\100\2\0\1\100\21\0\1\101\1\0\1\102\101\0"+
    "\1\116\121\0\1\122\62\0\1\100\2\0\1\175\21\0"+
    "\1\101\1\0\1\102\72\0\1\176\207\0\1\177\25\0"+
    "\2\200\64\0\1\200\20\116\1\201\71\116\2\122\1\77"+
    "\1\202\106\122\23\0\2\41\4\0\22\41\4\0\20\41"+
    "\1\203\6\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\3\41\1\204\23\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\16\41\1\205\10\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\4\41\1\206\13\41"+
    "\1\207\1\210\5\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\15\41\1\211\11\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\6\41\1\212\12\41\1\213"+
    "\5\41\3\0\1\41\7\0\1\214\13\0\2\41\4\0"+
    "\22\41\4\0\2\41\1\215\24\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\22\41\1\216\4\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\17\41\1\217"+
    "\7\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\22\41\1\220\4\41\3\0\1\41\7\0\1\221\13\0"+
    "\2\41\4\0\22\41\4\0\13\41\1\222\13\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\3\41\1\223"+
    "\23\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\17\41\1\224\7\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\225\21\41\3\0\1\41\7\0"+
    "\1\226\13\0\2\41\4\0\22\41\4\0\27\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\15\41\1\227"+
    "\11\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\15\41\1\230\11\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\231\21\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\4\41\1\232\22\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\20\41\1\233"+
    "\6\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\21\41\1\234\5\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\11\41\1\235\15\41\3\0\1\41\7\0"+
    "\1\236\13\0\2\41\4\0\22\41\4\0\17\41\1\237"+
    "\2\41\1\240\4\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\13\41\1\241\13\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\15\41\1\242\11\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\13\41\1\243"+
    "\13\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\14\41\1\244\12\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\11\41\1\245\15\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\23\41\1\246\3\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\20\41\1\247"+
    "\6\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\20\41\1\250\6\41\3\0\1\41\1\0\1\100\2\0"+
    "\1\251\21\0\1\101\1\0\1\102\61\0\20\116\1\201"+
    "\7\116\1\77\61\116\2\0\1\77\132\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\252\21\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\5\41\1\253\21\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\13\41\1\254"+
    "\13\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\5\41\1\255\21\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\1\41\1\256\25\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\16\41\1\257\10\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\22\41\1\260"+
    "\4\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\261\25\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\3\41\1\262\23\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\13\41\1\263\13\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\5\41\1\264"+
    "\21\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\5\41\1\265\21\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\11\41\1\266\15\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\21\41\1\267\5\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\5\41\1\270"+
    "\21\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\271\25\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\17\41\1\272\7\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\7\41\1\273\17\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\21\41\1\274"+
    "\5\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\15\41\1\275\11\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\276\21\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\1\41\1\277\3\41\1\300"+
    "\21\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\22\41\1\301\4\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\14\41\1\302\1\303\11\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\20\41\1\304\6\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\16\41"+
    "\1\305\10\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\11\41\1\306\15\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\16\41\1\307\10\41\3\0\1\41"+
    "\7\0\1\310\13\0\2\41\4\0\22\41\4\0\27\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\1\41"+
    "\1\311\25\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\22\41\1\312\4\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\5\41\1\313\21\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\4\41\1\314\22\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\7\41"+
    "\1\315\17\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\15\41\1\316\11\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\5\41\1\317\21\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\15\41\1\320\11\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\3\41"+
    "\1\321\23\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\11\41\1\322\15\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\23\41\1\323\3\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\5\41\1\324\21\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\5\41"+
    "\1\325\21\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\20\41\1\326\6\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\20\41\1\327\6\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\5\41\1\330\21\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\5\41"+
    "\1\331\10\41\1\331\10\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\20\41\1\332\6\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\20\41\1\333\6\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\11\41"+
    "\1\334\15\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\1\41\1\335\25\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\22\41\1\336\4\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\15\41\1\337\11\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\21\41"+
    "\1\340\5\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\1\41\1\341\25\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\16\41\1\342\10\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\3\41\1\343\23\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\16\41"+
    "\1\344\10\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\20\41\1\345\6\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\20\41\1\346\6\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\20\41\1\347\6\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\3\41"+
    "\1\350\23\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\1\41\1\351\25\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\13\41\1\352\13\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\4\41\1\353\22\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\1\41"+
    "\1\354\25\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\1\41\1\355\25\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\22\41\1\356\4\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\15\41\1\357\11\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\13\41"+
    "\1\360\13\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\15\41\1\361\11\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\16\41\1\362\10\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\1\41\1\363\25\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\15\41"+
    "\1\364\11\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\5\41\1\365\21\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\22\41\1\366\4\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\12\41\1\367\14\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\20\41"+
    "\1\370\6\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\1\41\1\371\25\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\21\41\1\372\5\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\11\41\1\373\15\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\4\41"+
    "\1\374\22\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\15\41\1\375\11\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\11\41\1\376\15\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\10\41\1\377\16\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\4\41"+
    "\1\u0100\22\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\16\41\1\u0101\10\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\5\41\1\u0102\21\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\15\41\1\u0103\11\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\5\41"+
    "\1\u0104\21\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\23\41\1\u0105\3\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\22\41\1\u0106\4\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\4\41\1\u0107\22\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\4\41"+
    "\1\u0108\22\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\21\41\1\u0109\5\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\23\41\1\u010a\3\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\5\41\1\u010b\21\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\1\41"+
    "\1\u010c\25\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\20\41\1\u010d\6\41\3\0\1\41\23\0\2\41"+
    "\4\0\22\41\4\0\17\41\1\u010e\7\41\3\0\1\41"+
    "\23\0\2\41\4\0\22\41\4\0\23\41\1\u010f\3\41"+
    "\3\0\1\41\23\0\2\41\4\0\22\41\4\0\1\41"+
    "\1\u0110\25\41\3\0\1\41\23\0\2\41\4\0\22\41"+
    "\4\0\26\41\1\u0111\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\u0112\21\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\15\41\1\u0113\11\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\20\41\1\u0114"+
    "\6\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\1\41\1\u0115\25\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\5\41\1\u0116\21\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\5\41\1\u0117\21\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\4\41\1\u0118"+
    "\22\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\21\41\1\u0119\5\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\1\41\1\u011a\25\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\3\41\1\u011b\23\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\1\41\1\u011c"+
    "\25\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\20\41\1\u011d\6\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\22\41\1\u011e\4\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\20\41\1\u011f\6\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\15\41\1\u0120"+
    "\11\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\13\41\1\u0121\13\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\11\41\1\u0122\15\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\20\41\1\u0123\6\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\16\41\1\313"+
    "\10\41\3\0\1\41\23\0\2\41\4\0\22\41\4\0"+
    "\5\41\1\u0124\21\41\3\0\1\41\23\0\2\41\4\0"+
    "\22\41\4\0\22\41\1\u0125\4\41\3\0\1\41\23\0"+
    "\2\41\4\0\22\41\4\0\20\41\1\u0126\6\41\3\0"+
    "\1\41\23\0\2\41\4\0\22\41\4\0\5\41\1\u0127"+
    "\21\41\3\0\1\41";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15244];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\2\11\1\1\4\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\25\1\4\11"+
    "\1\1\1\11\1\1\4\11\1\1\2\11\1\1\2\11"+
    "\1\0\1\11\4\0\1\11\1\0\1\11\1\0\5\11"+
    "\2\0\3\11\40\1\13\11\1\0\2\11\1\1\1\0"+
    "\12\1\1\11\4\1\1\11\4\1\1\11\7\1\1\11"+
    "\51\1\1\11\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	StringBuffer character = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, yyline + 1, yycolumn + 1));
		// return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object object) {
		return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, (String) object, yyline + 1, yycolumn + 1));
		// return new Symbol(type, yyline + 1, yycolumn + 1, object);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AudioLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
            }
            // fall through
          case 106: break;
          case 2:
            { return symbol(TAB, yytext());
            }
            // fall through
          case 107: break;
          case 3:
            { return symbol(EOL, yytext());
            }
            // fall through
          case 108: break;
          case 4:
            { /* Ignore */
            }
            // fall through
          case 109: break;
          case 5:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 110: break;
          case 6:
            { string.setLength(0);
		yybegin(STRING);
            }
            // fall through
          case 111: break;
          case 7:
            { return symbol(MOD, yytext());
            }
            // fall through
          case 112: break;
          case 8:
            { character.setLength(0);
		yybegin(CHARACTER);
            }
            // fall through
          case 113: break;
          case 9:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 114: break;
          case 10:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 115: break;
          case 11:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 116: break;
          case 12:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 117: break;
          case 13:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 118: break;
          case 14:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 119: break;
          case 15:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 120: break;
          case 16:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 121: break;
          case 17:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 122: break;
          case 18:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 123: break;
          case 19:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 124: break;
          case 20:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 125: break;
          case 21:
            { return symbol(ID, yytext());
            }
            // fall through
          case 126: break;
          case 22:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 127: break;
          case 23:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 128: break;
          case 24:
            { return symbol(POW, yytext());
            }
            // fall through
          case 129: break;
          case 25:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 130: break;
          case 26:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 131: break;
          case 27:
            { string.append(yytext());
            }
            // fall through
          case 132: break;
          case 28:
            { string.append("\\t");
            }
            // fall through
          case 133: break;
          case 29:
            { string.append("\\n");
            }
            // fall through
          case 134: break;
          case 30:
            { string.append("\\r");
            }
            // fall through
          case 135: break;
          case 31:
            { yybegin(YYINITIAL);
		return symbol(STR, string.toString());
            }
            // fall through
          case 136: break;
          case 32:
            { string.append('\\');
            }
            // fall through
          case 137: break;
          case 33:
            { character.append(yytext());
            }
            // fall through
          case 138: break;
          case 34:
            { yybegin(YYINITIAL);
		return symbol(CHAR, character.toString());
            }
            // fall through
          case 139: break;
          case 35:
            { character.append('\\');
            }
            // fall through
          case 140: break;
          case 36:
            { return symbol(NULL, yytext());
            }
            // fall through
          case 141: break;
          case 37:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 142: break;
          case 38:
            { return symbol(AND, yytext());
            }
            // fall through
          case 143: break;
          case 39:
            { return symbol(XOR, yytext());
            }
            // fall through
          case 144: break;
          case 40:
            { return symbol(PLUS_PLUS, yytext());
            }
            // fall through
          case 145: break;
          case 41:
            { return symbol(PLUS_EQ, yytext());
            }
            // fall through
          case 146: break;
          case 42:
            { return symbol(MINUS_MINUS, yytext());
            }
            // fall through
          case 147: break;
          case 43:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 148: break;
          case 44:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 149: break;
          case 45:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 150: break;
          case 46:
            { return symbol(DO, yytext());
            }
            // fall through
          case 151: break;
          case 47:
            { return symbol(FA, yytext());
            }
            // fall through
          case 152: break;
          case 48:
            { return symbol(LA, yytext());
            }
            // fall through
          case 153: break;
          case 49:
            { return symbol(MI, yytext());
            }
            // fall through
          case 154: break;
          case 50:
            { return symbol(RE, yytext());
            }
            // fall through
          case 155: break;
          case 51:
            { return symbol(IF, yytext());
            }
            // fall through
          case 156: break;
          case 52:
            { return symbol(OR, yytext());
            }
            // fall through
          case 157: break;
          case 53:
            { string.append('\"');
            }
            // fall through
          case 158: break;
          case 54:
            { string.append('#');
            }
            // fall through
          case 159: break;
          case 55:
            { string.append('\n');
            }
            // fall through
          case 160: break;
          case 56:
            { string.append('\r');
            }
            // fall through
          case 161: break;
          case 57:
            { string.append('\t');
            }
            // fall through
          case 162: break;
          case 58:
            { character.append('#');
            }
            // fall through
          case 163: break;
          case 59:
            { character.append('\'');
            }
            // fall through
          case 164: break;
          case 60:
            { character.append('\n');
            }
            // fall through
          case 165: break;
          case 61:
            { character.append('\r');
            }
            // fall through
          case 166: break;
          case 62:
            { character.append('\t');
            }
            // fall through
          case 167: break;
          case 63:
            { return symbol(NAND, yytext());
            }
            // fall through
          case 168: break;
          case 64:
            { return symbol(NOR, yytext());
            }
            // fall through
          case 169: break;
          case 65:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 170: break;
          case 66:
            { return symbol(DO_, yytext());
            }
            // fall through
          case 171: break;
          case 67:
            { return symbol(FA_, yytext());
            }
            // fall through
          case 172: break;
          case 68:
            { return symbol(LA_, yytext());
            }
            // fall through
          case 173: break;
          case 69:
            { return symbol(RE_, yytext());
            }
            // fall through
          case 174: break;
          case 70:
            { return symbol(SOL, yytext());
            }
            // fall through
          case 175: break;
          case 71:
            { return symbol(VAR, yytext());
            }
            // fall through
          case 176: break;
          case 72:
            { return symbol(CASE, yytext());
            }
            // fall through
          case 177: break;
          case 73:
            { return symbol(KEEP, yytext());
            }
            // fall through
          case 178: break;
          case 74:
            { return symbol(FOR, yytext());
            }
            // fall through
          case 179: break;
          case 75:
            { return symbol(ELSE, yytext());
            }
            // fall through
          case 180: break;
          case 76:
            { return symbol(SOL_, yytext());
            }
            // fall through
          case 181: break;
          case 77:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 182: break;
          case 78:
            { return symbol(DOB, yytext());
            }
            // fall through
          case 183: break;
          case 79:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 184: break;
          case 80:
            { return symbol(DO_WHILE, yytext());
            }
            // fall through
          case 185: break;
          case 81:
            { return symbol(EVEN, yytext());
            }
            // fall through
          case 186: break;
          case 82:
            { return symbol(TRACK, yytext());
            }
            // fall through
          case 187: break;
          case 83:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 188: break;
          case 84:
            { return symbol(CAD, yytext());
            }
            // fall through
          case 189: break;
          case 85:
            { return symbol(INT, yytext());
            }
            // fall through
          case 190: break;
          case 86:
            { return symbol(WAIT, yytext());
            }
            // fall through
          case 191: break;
          case 87:
            { return symbol(PRIME, yytext());
            }
            // fall through
          case 192: break;
          case 88:
            { return symbol(SWITCH, yytext());
            }
            // fall through
          case 193: break;
          case 89:
            { return symbol(ARRAY, yytext());
            }
            // fall through
          case 194: break;
          case 90:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 195: break;
          case 91:
            { return symbol(DEFAULT, yytext());
            }
            // fall through
          case 196: break;
          case 92:
            { return symbol(ODD, yytext());
            }
            // fall through
          case 197: break;
          case 93:
            { return symbol(MSG, yytext());
            }
            // fall through
          case 198: break;
          case 94:
            { return symbol(ORDER, yytext());
            }
            // fall through
          case 199: break;
          case 95:
            { return symbol(RETURN, yytext());
            }
            // fall through
          case 200: break;
          case 96:
            { return symbol(CAR, yytext());
            }
            // fall through
          case 201: break;
          case 97:
            { return symbol(EXTENDS, yytext());
            }
            // fall through
          case 202: break;
          case 98:
            { return symbol(LENGTH, yytext());
            }
            // fall through
          case 203: break;
          case 99:
            { return symbol(WHILE, yytext());
            }
            // fall through
          case 204: break;
          case 100:
            { return symbol(CONTINUE, yytext());
            }
            // fall through
          case 205: break;
          case 101:
            { return symbol(MAIN, yytext());
            }
            // fall through
          case 206: break;
          case 102:
            { return symbol(SUM, yytext());
            }
            // fall through
          case 207: break;
          case 103:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 208: break;
          case 104:
            { return symbol(PLAY, yytext());
            }
            // fall through
          case 209: break;
          case 105:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
