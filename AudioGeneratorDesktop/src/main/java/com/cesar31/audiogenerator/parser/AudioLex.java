// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: audio.flex

package com.cesar31.audiogenerator.parser;

import static com.cesar31.audiogenerator.parser.AudioParserSym.*;
import java_cup.runtime.Symbol;
import java.util.Stack;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AudioLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;
  public static final int LINE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\11\25"+
    "\1\10\1\26\1\27\1\30\1\31\2\10\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\40"+
    "\1\43\1\44\1\45\1\40\1\46\1\47\1\40\1\50"+
    "\1\51\1\52\1\40\1\53\4\40\1\54\1\55\1\56"+
    "\1\57\1\60\1\10\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\43\1\73\1\74"+
    "\1\75\1\76\1\77\1\40\1\100\1\101\1\102\1\103"+
    "\1\53\1\104\1\105\1\40\1\106\1\107\1\110\1\111"+
    "\1\10\42\0\1\10\2\0\4\10\1\0\1\10\1\60"+
    "\4\10\1\0\5\10\1\60\1\10\1\0\1\10\1\0"+
    "\1\60\5\10\27\60\1\0\37\60\1\0\u01ca\60\4\0"+
    "\14\60\12\0\1\10\3\0\5\60\7\0\1\60\1\0"+
    "\1\60\21\0\165\60\1\0\2\60\2\0\4\60\1\0"+
    "\1\60\6\0\1\60\1\0\3\60\1\0\1\60\1\0"+
    "\24\60\1\0\123\60\1\0\213\60\1\0\255\60\1\0"+
    "\46\60\2\0\1\60\6\0\51\60\10\0\55\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\1\60\10\0"+
    "\33\60\4\0\4\60\35\0\13\60\5\0\100\60\12\112"+
    "\4\0\146\60\1\0\10\60\2\0\12\60\1\0\6\60"+
    "\12\112\3\60\2\0\1\60\20\0\73\60\2\0\145\60"+
    "\16\0\12\112\54\60\4\0\1\60\2\0\1\60\2\0"+
    "\56\60\22\0\34\60\4\0\13\60\65\0\25\60\1\0"+
    "\10\60\25\0\17\60\1\0\201\60\2\0\12\112\1\0"+
    "\23\60\1\0\10\60\2\0\2\60\2\0\26\60\1\0"+
    "\7\60\1\0\1\60\3\0\4\60\2\0\11\60\2\0"+
    "\2\60\2\0\4\60\10\0\1\60\4\0\2\60\1\0"+
    "\5\60\2\0\12\112\2\60\12\0\1\60\1\0\1\60"+
    "\2\0\3\60\1\0\6\60\4\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\2\60\1\0\2\60\1\0\2\60"+
    "\2\0\1\60\1\0\5\60\4\0\2\60\2\0\3\60"+
    "\3\0\1\60\7\0\4\60\1\0\1\60\7\0\12\112"+
    "\6\60\13\0\3\60\1\0\11\60\1\0\3\60\1\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\5\60\2\0"+
    "\12\60\1\0\3\60\1\0\3\60\2\0\1\60\17\0"+
    "\4\60\2\0\12\112\11\0\7\60\1\0\3\60\1\0"+
    "\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0"+
    "\2\60\1\0\5\60\2\0\11\60\2\0\2\60\2\0"+
    "\3\60\10\0\2\60\4\0\2\60\1\0\5\60\2\0"+
    "\12\112\1\0\1\60\20\0\2\60\1\0\6\60\3\0"+
    "\3\60\1\0\4\60\3\0\2\60\1\0\1\60\1\0"+
    "\2\60\3\0\2\60\3\0\3\60\3\0\14\60\4\0"+
    "\5\60\3\0\3\60\1\0\4\60\2\0\1\60\6\0"+
    "\1\60\16\0\12\112\20\0\15\60\1\0\3\60\1\0"+
    "\27\60\1\0\20\60\3\0\10\60\1\0\3\60\1\0"+
    "\4\60\7\0\2\60\1\0\3\60\5\0\4\60\2\0"+
    "\12\112\20\0\4\60\1\0\10\60\1\0\3\60\1\0"+
    "\27\60\1\0\12\60\1\0\5\60\2\0\11\60\1\0"+
    "\3\60\1\0\4\60\7\0\2\60\7\0\1\60\1\0"+
    "\4\60\2\0\12\112\1\0\2\60\15\0\4\60\1\0"+
    "\10\60\1\0\3\60\1\0\63\60\1\0\3\60\1\0"+
    "\5\60\5\0\4\60\7\0\5\60\2\0\12\112\12\0"+
    "\6\60\2\0\2\60\1\0\22\60\3\0\30\60\1\0"+
    "\11\60\1\0\1\60\2\0\7\60\3\0\1\60\4\0"+
    "\6\60\1\0\1\60\1\0\10\60\6\0\12\112\2\0"+
    "\2\60\15\0\72\60\5\0\17\60\1\0\12\112\47\0"+
    "\2\60\1\0\1\60\1\0\5\60\1\0\30\60\1\0"+
    "\1\60\1\0\27\60\2\0\5\60\1\0\1\60\1\0"+
    "\6\60\2\0\12\112\2\0\4\60\40\0\1\60\27\0"+
    "\2\60\6\0\12\112\13\0\1\60\1\0\1\60\1\0"+
    "\1\60\4\0\12\60\1\0\44\60\4\0\24\60\1\0"+
    "\22\60\1\0\44\60\11\0\1\60\71\0\100\60\12\112"+
    "\6\0\100\60\12\112\4\60\2\0\46\60\1\0\1\60"+
    "\5\0\1\60\2\0\53\60\1\0\115\60\1\0\4\60"+
    "\2\0\7\60\1\0\1\60\1\0\4\60\2\0\51\60"+
    "\1\0\4\60\2\0\41\60\1\0\4\60\2\0\7\60"+
    "\1\0\1\60\1\0\4\60\2\0\17\60\1\0\71\60"+
    "\1\0\4\60\2\0\103\60\2\0\3\60\40\0\20\60"+
    "\20\0\126\60\2\0\6\60\3\0\u016c\60\2\0\21\60"+
    "\1\0\32\60\5\0\113\60\3\0\13\60\7\0\15\60"+
    "\1\0\7\60\13\0\25\60\13\0\24\60\14\0\15\60"+
    "\1\0\3\60\1\0\2\60\14\0\124\60\3\0\1\60"+
    "\4\0\2\60\2\0\12\112\41\0\3\60\2\0\12\112"+
    "\6\0\131\60\7\0\53\60\5\0\106\60\12\0\37\60"+
    "\1\0\14\60\4\0\14\60\12\0\12\112\36\60\2\0"+
    "\5\60\13\0\54\60\4\0\32\60\6\0\12\112\46\0"+
    "\34\60\4\0\77\60\1\0\35\60\2\0\1\60\12\112"+
    "\6\0\12\112\15\0\1\60\10\0\17\60\101\0\114\60"+
    "\4\0\12\112\21\0\11\60\14\0\60\60\12\112\72\60"+
    "\14\0\70\60\10\0\12\112\3\0\3\60\12\112\44\60"+
    "\2\0\11\60\7\0\53\60\2\0\3\60\20\0\3\60"+
    "\1\0\47\60\5\0\372\60\1\0\33\60\2\0\6\60"+
    "\2\0\46\60\2\0\6\60\2\0\10\60\1\0\1\60"+
    "\1\0\1\60\1\0\1\60\1\0\37\60\2\0\65\60"+
    "\1\0\7\60\1\0\1\60\3\0\3\60\1\0\7\60"+
    "\3\0\4\60\2\0\6\60\4\0\15\60\5\0\3\60"+
    "\1\0\7\60\27\0\1\10\5\0\1\10\44\0\2\60"+
    "\23\0\1\60\34\0\1\60\15\0\1\60\20\0\15\60"+
    "\17\0\1\10\43\0\41\60\21\0\1\60\4\0\1\60"+
    "\2\0\12\60\1\0\1\60\3\0\5\60\4\0\1\10"+
    "\1\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60"+
    "\1\0\13\60\2\0\4\60\5\0\5\60\4\0\1\60"+
    "\21\0\51\60\u022d\0\64\60\26\0\57\60\1\0\57\60"+
    "\1\0\205\60\6\0\11\60\14\0\46\60\1\0\1\60"+
    "\5\0\1\60\2\0\70\60\7\0\1\60\17\0\30\60"+
    "\11\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\40\60\57\0\1\60\325\0\3\60\31\0\17\60"+
    "\1\0\5\60\2\0\5\60\4\0\126\60\2\0\2\60"+
    "\2\0\3\60\1\0\132\60\1\0\4\60\5\0\53\60"+
    "\1\0\136\60\21\0\33\60\65\0\306\60\112\0\360\60"+
    "\20\0\215\60\103\0\56\60\2\0\15\60\3\0\20\60"+
    "\12\112\2\60\24\0\63\60\1\0\12\60\1\0\163\60"+
    "\45\0\11\60\2\0\147\60\2\0\65\60\2\0\5\60"+
    "\60\0\61\60\30\0\64\60\14\0\106\60\12\0\12\112"+
    "\6\0\30\60\3\0\1\60\1\0\3\60\12\112\44\60"+
    "\2\0\44\60\14\0\35\60\3\0\101\60\16\0\1\60"+
    "\12\112\6\0\20\60\12\112\5\60\1\0\67\60\11\0"+
    "\16\60\2\0\12\112\6\0\27\60\3\0\111\60\30\0"+
    "\3\60\2\0\20\60\2\0\5\60\12\0\6\60\2\0"+
    "\6\60\2\0\6\60\11\0\7\60\1\0\7\60\1\0"+
    "\53\60\1\0\14\60\10\0\173\60\1\0\2\60\2\0"+
    "\12\112\6\0\244\60\14\0\27\60\4\0\61\60\4\0"+
    "\156\60\2\0\152\60\46\0\7\60\14\0\5\60\5\0"+
    "\14\60\1\0\15\60\1\0\5\60\1\0\1\60\1\0"+
    "\2\60\1\0\2\60\1\0\154\60\41\0\153\60\22\0"+
    "\100\60\2\0\66\60\50\0\14\60\4\0\20\60\20\0"+
    "\20\60\3\0\2\60\30\0\3\60\40\0\5\60\1\0"+
    "\207\60\23\0\12\112\7\0\32\60\4\0\1\60\1\0"+
    "\32\60\13\0\131\60\3\0\6\60\2\0\6\60\2\0"+
    "\6\60\2\0\3\60\43\0\14\60\1\0\32\60\1\0"+
    "\23\60\1\0\2\60\1\0\17\60\2\0\16\60\42\0"+
    "\173\60\105\0\65\60\210\0\1\60\202\0\35\60\3\0"+
    "\61\60\17\0\1\60\37\0\40\60\15\0\36\60\5\0"+
    "\53\60\5\0\36\60\2\0\44\60\4\0\10\60\1\0"+
    "\5\60\52\0\236\60\2\0\12\112\6\0\44\60\4\0"+
    "\44\60\4\0\50\60\10\0\64\60\234\0\67\60\11\0"+
    "\26\60\12\0\10\60\230\0\6\60\2\0\1\60\1\0"+
    "\54\60\1\0\2\60\3\0\1\60\2\0\27\60\12\0"+
    "\27\60\11\0\37\60\101\0\23\60\1\0\2\60\12\0"+
    "\26\60\12\0\32\60\106\0\70\60\6\0\2\60\100\0"+
    "\4\60\1\0\2\60\5\0\10\60\1\0\3\60\1\0"+
    "\35\60\2\0\3\60\4\0\1\60\40\0\35\60\3\0"+
    "\35\60\43\0\10\60\1\0\36\60\31\0\66\60\12\0"+
    "\26\60\12\0\23\60\15\0\22\60\156\0\111\60\67\0"+
    "\63\60\15\0\63\60\15\0\50\60\10\0\12\112\306\0"+
    "\35\60\12\0\1\60\10\0\41\60\217\0\27\60\11\0"+
    "\107\60\37\0\12\112\17\0\74\60\25\0\31\60\7\0"+
    "\12\112\6\0\65\60\1\0\12\112\4\0\3\60\11\0"+
    "\44\60\2\0\1\60\11\0\105\60\4\0\4\60\3\0"+
    "\12\112\1\60\1\0\1\60\43\0\22\60\1\0\45\60"+
    "\6\0\1\60\101\0\7\60\1\0\1\60\1\0\4\60"+
    "\1\0\17\60\1\0\12\60\7\0\73\60\5\0\12\112"+
    "\6\0\4\60\1\0\10\60\2\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\2\60\1\0\5\60\1\0\12\60"+
    "\2\0\2\60\2\0\3\60\2\0\1\60\6\0\1\60"+
    "\5\0\7\60\2\0\7\60\3\0\5\60\213\0\113\60"+
    "\5\0\12\112\4\0\2\60\40\0\106\60\1\0\1\60"+
    "\10\0\12\112\246\0\66\60\2\0\11\60\27\0\6\60"+
    "\42\0\101\60\3\0\1\60\13\0\12\112\46\0\71\60"+
    "\7\0\12\112\66\0\33\60\2\0\17\60\4\0\12\112"+
    "\306\0\73\60\145\0\100\60\12\112\25\0\1\60\240\0"+
    "\10\60\2\0\56\60\2\0\10\60\1\0\2\60\33\0"+
    "\77\60\10\0\1\60\10\0\112\60\3\0\1\60\42\0"+
    "\71\60\7\0\11\60\1\0\55\60\1\0\11\60\17\0"+
    "\12\112\30\0\36\60\2\0\26\60\1\0\16\60\111\0"+
    "\7\60\1\0\2\60\1\0\54\60\3\0\1\60\1\0"+
    "\2\60\1\0\11\60\10\0\12\112\6\0\6\60\1\0"+
    "\2\60\1\0\45\60\1\0\2\60\1\0\6\60\7\0"+
    "\12\112\u0136\0\27\60\11\0\232\60\146\0\157\60\21\0"+
    "\304\60\274\0\57\60\321\0\107\60\271\0\71\60\7\0"+
    "\37\60\1\0\12\112\146\0\36\60\2\0\5\60\13\0"+
    "\67\60\11\0\4\60\14\0\12\112\11\0\25\60\5\0"+
    "\23\60\260\0\100\60\200\0\113\60\4\0\71\60\7\0"+
    "\21\60\100\0\2\60\1\0\1\60\34\0\370\60\10\0"+
    "\363\60\15\0\37\60\61\0\3\60\21\0\4\60\10\0"+
    "\u018c\60\4\0\153\60\5\0\15\60\3\0\11\60\7\0"+
    "\12\60\3\0\2\60\306\0\5\60\3\0\6\60\10\0"+
    "\10\60\2\0\7\60\36\0\4\60\224\0\3\60\273\0"+
    "\125\60\1\0\107\60\1\0\2\60\2\0\1\60\2\0"+
    "\2\60\2\0\4\60\1\0\14\60\1\0\1\60\1\0"+
    "\7\60\1\0\101\60\1\0\4\60\2\0\10\60\1\0"+
    "\7\60\1\0\34\60\1\0\4\60\1\0\5\60\1\0"+
    "\1\60\3\0\7\60\1\0\u0154\60\2\0\31\60\1\0"+
    "\31\60\1\0\37\60\1\0\31\60\1\0\37\60\1\0"+
    "\31\60\1\0\37\60\1\0\31\60\1\0\37\60\1\0"+
    "\31\60\1\0\10\60\2\0\62\112\67\60\4\0\62\60"+
    "\10\0\1\60\16\0\1\60\26\0\5\60\1\0\17\60"+
    "\120\0\7\60\1\0\21\60\2\0\7\60\1\0\2\60"+
    "\1\0\5\60\325\0\55\60\3\0\16\60\2\0\12\112"+
    "\4\0\1\60\u0171\0\60\60\12\112\6\0\305\60\13\0"+
    "\7\60\51\0\114\60\4\0\12\112\246\0\4\60\1\0"+
    "\33\60\1\0\2\60\1\0\1\60\2\0\1\60\1\0"+
    "\12\60\1\0\4\60\1\0\1\60\1\0\1\60\6\0"+
    "\1\60\4\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\3\60\1\0\2\60\1\0\1\60\2\0\1\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\2\60\1\0\1\60\2\0\4\60\1\0\7\60\1\0"+
    "\4\60\1\0\4\60\1\0\1\60\1\0\12\60\1\0"+
    "\21\60\5\0\3\60\1\0\5\60\1\0\21\60\164\0"+
    "\32\60\6\0\32\60\6\0\32\60\166\0\327\60\51\0"+
    "\65\60\13\0\336\60\2\0\u0182\60\16\0\u0131\60\37\0"+
    "\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\22\25\1\26"+
    "\1\27\1\30\1\31\1\1\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\1\1\40\1\41\1\1\1\42\1\43"+
    "\1\44\1\45\1\46\1\2\2\44\2\0\1\47\1\0"+
    "\1\50\1\0\1\51\1\52\1\53\1\54\1\55\1\6"+
    "\1\0\1\56\1\57\1\60\1\2\6\25\1\61\3\25"+
    "\1\61\3\25\1\61\2\25\1\61\4\25\1\61\1\25"+
    "\1\62\6\25\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\2\2\1\44\1\76"+
    "\1\77\1\100\1\0\10\25\1\61\26\25\1\101\1\25"+
    "\1\2\1\44\1\2\5\25\1\102\11\25\1\103\4\25"+
    "\1\104\7\25\1\105\2\25\1\106\1\25\1\2\7\25"+
    "\1\107\3\25\1\110\1\111\5\25\1\112\1\113\3\25"+
    "\1\114\6\25\1\115\3\25\1\116\1\117\11\25\1\120"+
    "\1\25\1\121\1\25\1\122\2\25\1\123\2\25\1\124"+
    "\1\25\1\125\2\25\1\126\3\25\1\127\1\25\1\130"+
    "\1\131\1\132\5\25\1\133\1\134\1\25\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u012c\0\u01c2"+
    "\0\u020d\0\u012c\0\u0258\0\u0258\0\u02a3\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u02ee\0\u012c\0\u0339\0\u012c\0\u0384\0\u03cf\0\u012c"+
    "\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627"+
    "\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f"+
    "\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u012c\0\u012c\0\u012c"+
    "\0\u0258\0\u0a41\0\u0258\0\u0a8c\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u0ad7\0\u012c\0\u012c\0\u0b22\0\u012c\0\u012c\0\u0b6d\0\u0bb8"+
    "\0\u012c\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u012c\0\u0d7a"+
    "\0\u012c\0\u0dc5\0\u0258\0\u012c\0\u012c\0\u012c\0\u012c\0\u0e10"+
    "\0\u0e5b\0\u012c\0\u012c\0\u012c\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df"+
    "\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437"+
    "\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u16da\0\u1725\0\u1770\0\u17bb\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u1806"+
    "\0\u1851\0\u189c\0\u012c\0\u012c\0\u0e10\0\u18e7\0\u1932\0\u197d"+
    "\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u0258\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u06bd\0\u21fc\0\u2247"+
    "\0\u2292\0\u012c\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u06bd"+
    "\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661"+
    "\0\u26ac\0\u06bd\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u06bd\0\u2823"+
    "\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u06bd\0\u2a30"+
    "\0\u2a7b\0\u06bd\0\u2ac6\0\u0b6d\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2"+
    "\0\u2c3d\0\u2c88\0\u2cd3\0\u06bd\0\u2d1e\0\u2d69\0\u2db4\0\u06bd"+
    "\0\u06bd\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u06bd\0\u06bd"+
    "\0\u2f76\0\u2fc1\0\u300c\0\u06bd\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u06bd\0\u3219\0\u3264\0\u32af\0\u06bd\0\u06bd"+
    "\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507"+
    "\0\u3552\0\u06bd\0\u359d\0\u06bd\0\u35e8\0\u06bd\0\u3633\0\u367e"+
    "\0\u06bd\0\u36c9\0\u3714\0\u06bd\0\u375f\0\u06bd\0\u37aa\0\u37f5"+
    "\0\u06bd\0\u3840\0\u388b\0\u38d6\0\u06bd\0\u3921\0\u06bd\0\u06bd"+
    "\0\u06bd\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u06bd\0\u06bd"+
    "\0\u3ae3\0\u06bd\0\u06bd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\6\1\11\1\12\2\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\13\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\5\1\57\1\60\1\13"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\42\1\46\1\47\1\42\1\50\1\51\1\52"+
    "\1\53\1\54\4\42\1\61\1\62\1\63\1\13\1\64"+
    "\1\65\1\66\1\67\2\64\1\70\1\71\45\64\1\72"+
    "\35\64\1\73\3\5\3\73\1\74\3\73\1\75\41\73"+
    "\1\76\35\73\1\77\1\100\1\101\1\5\1\102\22\77"+
    "\1\103\1\77\1\104\61\77\114\0\1\6\2\0\1\6"+
    "\22\0\1\105\1\0\1\106\63\0\1\7\115\0\1\107"+
    "\4\0\1\110\15\0\1\111\57\0\1\112\11\0\4\13"+
    "\7\0\1\13\1\0\2\13\4\0\22\13\4\0\30\13"+
    "\1\0\2\13\7\0\3\13\1\113\7\0\1\13\1\0"+
    "\2\13\4\0\22\13\4\0\30\13\1\114\2\13\17\0"+
    "\1\115\10\0\1\116\103\0\1\117\100\0\4\13\7\0"+
    "\1\120\1\0\2\13\4\0\22\13\4\0\30\13\1\0"+
    "\2\13\7\0\4\13\7\0\1\120\1\0\2\27\4\0"+
    "\22\13\4\0\30\13\1\0\2\13\21\0\1\121\6\0"+
    "\1\122\112\0\1\123\112\0\1\124\1\125\70\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\20\42"+
    "\1\126\1\127\5\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\16\42\1\130\10\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\1\42\1\131\14\42\1\132\10\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\5\42\1\133\10\42\1\134\10\42\1\13"+
    "\1\0\1\13\1\42\7\0\4\13\7\0\1\13\1\0"+
    "\2\42\4\0\22\42\4\0\15\42\1\135\3\42\1\136"+
    "\3\42\1\137\1\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\1\42\1\140\25\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\27\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\1\42\1\141"+
    "\25\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\14\42\1\142"+
    "\12\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\5\42\1\143"+
    "\21\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\1\42\1\144"+
    "\14\42\1\145\10\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\5\42\1\146\3\42\1\147\15\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\20\42\1\150\6\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\1\42\1\151\7\42\1\152\6\42\1\153"+
    "\6\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\5\42\1\154"+
    "\21\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\1\42\1\155"+
    "\7\42\1\156\4\42\1\157\4\42\1\160\1\161\2\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\20\42\1\162\6\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\1\42\1\163\3\42"+
    "\1\164\21\42\1\13\1\0\1\13\1\42\110\0\1\165"+
    "\2\0\1\64\3\0\2\64\2\0\45\64\1\0\35\64"+
    "\6\0\1\166\1\167\65\0\1\170\2\0\1\171\1\0"+
    "\1\172\17\0\1\173\3\0\1\174\61\0\1\175\2\0"+
    "\1\176\1\0\1\177\10\0\1\77\4\0\106\77\1\0"+
    "\1\100\1\101\1\0\1\102\22\0\1\105\1\0\1\106"+
    "\62\0\1\200\1\101\1\0\1\201\22\0\1\105\1\0"+
    "\1\106\61\0\1\77\4\0\14\77\1\202\72\77\4\0"+
    "\24\77\1\125\61\77\21\0\1\121\122\0\1\125\73\0"+
    "\1\203\210\0\1\204\11\0\4\13\7\0\1\13\1\0"+
    "\2\205\4\0\22\13\4\0\30\13\1\0\1\13\1\205"+
    "\21\121\1\206\71\121\2\125\2\0\107\125\7\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\20\42"+
    "\1\207\6\42\1\13\1\0\1\13\1\42\7\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\3\42"+
    "\1\210\23\42\1\13\1\0\1\13\1\42\7\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\16\42"+
    "\1\211\10\42\1\13\1\0\1\13\1\42\7\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\4\42"+
    "\1\212\13\42\1\213\1\214\5\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\15\42\1\215\11\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\6\42\1\216\12\42\1\127\5\42\1\13"+
    "\1\0\1\13\1\42\7\0\1\217\3\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\2\42\1\220\24\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\22\42\1\221\4\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\17\42\1\222\7\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\22\42\1\223\4\42"+
    "\1\13\1\0\1\13\1\42\7\0\1\217\3\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\13\42\1\224"+
    "\13\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\3\42\1\225"+
    "\23\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\17\42\1\226"+
    "\7\42\1\13\1\0\1\13\1\42\7\0\4\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\5\42\1\227"+
    "\21\42\1\13\1\0\1\13\1\42\7\0\1\217\3\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\27\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\15\42\1\230\11\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\15\42\1\231\11\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\232\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\4\42\1\233\22\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\20\42\1\234\6\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\21\42\1\235\5\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\11\42\1\236\15\42"+
    "\1\13\1\0\1\13\1\42\7\0\1\217\3\13\7\0"+
    "\1\13\1\0\2\42\4\0\22\42\4\0\17\42\1\237"+
    "\2\42\1\240\4\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\13\42\1\241\13\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\15\42\1\242\11\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\13\42\1\144\13\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\14\42\1\243\12\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\11\42\1\244\15\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\23\42\1\245\3\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\20\42\1\246\6\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\20\42\1\247\6\42\1\13\1\0\1\13\1\42\1\0"+
    "\1\200\1\101\1\0\1\200\22\0\1\105\1\0\1\106"+
    "\62\0\1\200\1\101\1\0\1\250\22\0\1\105\1\0"+
    "\1\106\61\0\1\202\4\121\14\202\1\251\71\202\21\121"+
    "\1\206\7\121\1\252\61\121\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\253\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\254\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\13\42\1\255\13\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\256\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\1\42\1\257\25\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\16\42\1\260\10\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\22\42\1\261\4\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\1\42\1\262\25\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\13\42\1\263\13\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\264\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\265\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\11\42\1\266\15\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\21\42\1\267\5\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\270\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\1\42\1\271\25\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\17\42\1\272\7\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\7\42\1\273\17\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\21\42\1\274\5\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\15\42\1\275\11\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\5\42\1\276\21\42"+
    "\1\13\1\0\1\13\1\42\7\0\4\13\7\0\1\13"+
    "\1\0\2\42\4\0\22\42\4\0\1\42\1\277\3\42"+
    "\1\300\21\42\1\13\1\0\1\13\1\42\7\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\22\42"+
    "\1\301\4\42\1\13\1\0\1\13\1\42\7\0\4\13"+
    "\7\0\1\13\1\0\2\42\4\0\22\42\4\0\14\42"+
    "\1\302\1\303\11\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\20\42\1\304\6\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\16\42\1\305\10\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\11\42\1\306\15\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\16\42\1\307\10\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\1\42\1\310\25\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\22\42\1\311\4\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\5\42\1\312\21\42\1\13\1\0\1\13\1\42\7\0"+
    "\4\13\7\0\1\13\1\0\2\42\4\0\22\42\4\0"+
    "\4\42\1\313\22\42\1\13\1\0\1\13\1\42\1\0"+
    "\1\200\1\101\1\0\1\100\22\0\1\105\1\0\1\106"+
    "\61\0\1\202\4\121\14\202\1\251\7\202\1\314\61\202"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\7\42\1\315\17\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\15\42\1\316\11\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\5\42\1\317\21\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\15\42\1\320\11\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\3\42\1\321\23\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\11\42\1\322\15\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\23\42\1\323\3\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\5\42\1\324\21\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\20\42\1\325\6\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\20\42\1\326\6\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\5\42\1\327\21\42\1\13\1\0\1\13\1\42"+
    "\7\0\4\13\7\0\1\13\1\0\2\42\4\0\22\42"+
    "\4\0\5\42\1\330\10\42\1\330\10\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\331\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\332\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\11\42\1\333\15\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\334\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\22\42\1\335\4\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\15\42\1\336\11\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\21\42\1\337\5\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\340\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\16\42\1\300\10\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\3\42\1\341\23\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\16\42\1\342\10\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\343\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\344\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\345\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\3\42\1\346\23\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\347\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\13\42\1\350\13\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\4\42\1\351\22\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\352\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\353\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\22\42\1\354\4\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\15\42\1\355\11\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\13\42\1\356\13\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\16\42\1\357\10\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\360\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\15\42\1\361\11\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\5\42\1\300\21\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\22\42\1\362\4\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\12\42\1\363\14\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\364\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\365\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\11\42\1\366\15\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\4\42\1\367\22\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\15\42\1\370\11\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\11\42\1\371\15\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\10\42\1\372\16\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\4\42\1\373\22\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\16\42\1\374\10\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\5\42\1\375\21\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\15\42\1\376\11\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\5\42\1\377\21\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\23\42\1\u0100\3\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\22\42\1\u0101\4\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\4\42\1\u0102\22\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\23\42\1\u0103\3\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\5\42\1\u0104\21\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\u0105\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\20\42\1\u0106\6\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\17\42\1\u0107\7\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\23\42\1\u0108\3\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\1\42\1\u0109\25\42\1\13\1\0"+
    "\1\13\1\42\7\0\4\13\7\0\1\13\1\0\2\42"+
    "\4\0\22\42\4\0\26\42\1\u010a\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\5\42\1\u010b\21\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\15\42\1\u010c\11\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\20\42\1\u010d\6\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\1\42\1\u010e\25\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\5\42\1\u010f\21\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\4\42\1\u0110\22\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\21\42\1\u0111\5\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\1\42\1\u0112\25\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\3\42\1\u0113\23\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\1\42\1\u0114\25\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\20\42\1\u0115\6\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\22\42\1\u0116\4\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\20\42\1\u0117\6\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\13\42\1\u0118\13\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\11\42\1\u0119\15\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\20\42\1\u011a\6\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\16\42\1\312\10\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\5\42\1\337\21\42\1\13\1\0\1\13"+
    "\1\42\7\0\4\13\7\0\1\13\1\0\2\42\4\0"+
    "\22\42\4\0\20\42\1\u011b\6\42\1\13\1\0\1\13"+
    "\1\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\2\1\1\11\3\1\4\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\25\1\3\11"+
    "\4\1\4\11\1\1\2\11\1\1\2\11\2\1\1\11"+
    "\3\1\2\0\1\11\1\0\1\11\1\0\1\1\4\11"+
    "\1\1\1\0\3\11\40\1\13\11\3\1\2\11\1\1"+
    "\1\0\43\1\1\11\161\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private Stack<Integer> stack = new Stack<>();
	private boolean end = false;

	StringBuffer string = new StringBuffer();
	StringBuffer character = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, yyline + 1, yycolumn + 1));
		// return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object object) {
		return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, (String) object, yyline + 1, yycolumn + 1));
		// return new Symbol(type, yyline + 1, yycolumn + 1, object);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AudioLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if(!stack.isEmpty() && !end) {
			end = true;
			return symbol(EOL, yytext());
		} else {
			while(!stack.isEmpty()) {
				stack.pop();
				return symbol(DEDENT);
			}
		}

		return symbol(EOF);
            }  // fall though
            case 284: break;
            case LINE: {
              if(!stack.isEmpty() && !end) {
			end = true;
			return symbol(EOL, yytext());
		} else {
			while(!stack.isEmpty()) {
				stack.pop();
				return symbol(DEDENT);
			}
		}

		return symbol(EOF);
            }  // fall though
            case 285: break;
            default:
          { 	// System.out.println("Stack -> " + stack.size());
	return symbol(EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
            }
            // fall through
          case 95: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 96: break;
          case 3:
            { yybegin(LINE);
		return symbol(EOL, yytext());
            }
            // fall through
          case 97: break;
          case 4:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 98: break;
          case 5:
            { string.setLength(0);
		yybegin(STRING);
            }
            // fall through
          case 99: break;
          case 6:
            { System.out.println(yytext()); return symbol(SYM, yytext());
            }
            // fall through
          case 100: break;
          case 7:
            { return symbol(MOD, yytext());
            }
            // fall through
          case 101: break;
          case 8:
            { character.setLength(0);
		yybegin(CHARACTER);
            }
            // fall through
          case 102: break;
          case 9:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 103: break;
          case 10:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 104: break;
          case 11:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 105: break;
          case 12:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 106: break;
          case 13:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 107: break;
          case 14:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 108: break;
          case 15:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 109: break;
          case 16:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 110: break;
          case 17:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 111: break;
          case 18:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 112: break;
          case 19:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 113: break;
          case 20:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 114: break;
          case 21:
            { return symbol(ID, yytext());
            }
            // fall through
          case 115: break;
          case 22:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 116: break;
          case 23:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 117: break;
          case 24:
            { return symbol(POW, yytext());
            }
            // fall through
          case 118: break;
          case 25:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 119: break;
          case 26:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 120: break;
          case 27:
            { string.append(yytext());
            }
            // fall through
          case 121: break;
          case 28:
            { string.append("\\t");
            }
            // fall through
          case 122: break;
          case 29:
            { string.append("\\n");
            }
            // fall through
          case 123: break;
          case 30:
            { string.append("\\r");
            }
            // fall through
          case 124: break;
          case 31:
            { yybegin(YYINITIAL);
		return symbol(STR, string.toString());
            }
            // fall through
          case 125: break;
          case 32:
            { string.append('\\');
            }
            // fall through
          case 126: break;
          case 33:
            { character.append(yytext());
            }
            // fall through
          case 127: break;
          case 34:
            { yybegin(YYINITIAL);
		return symbol(CHAR, character.toString());
            }
            // fall through
          case 128: break;
          case 35:
            { character.append('\\');
            }
            // fall through
          case 129: break;
          case 36:
            { if(!stack.isEmpty()) {
			System.out.println("Error ident -> nivel de indentacion actual: " + stack.peek() + " -> " + (yyline + 1) + ", " + (yycolumn + 1));
		}
		yypushback(yytext().length());
		yybegin(YYINITIAL);
            }
            // fall through
          case 130: break;
          case 37:
            { int amount = yytext().replace("    ", "\t").length();
		// System.out.println("tab -> " + amount);

		if(stack.isEmpty()) {
			if(amount > 1) {
				// error identacion
				System.out.println("error indent " + amount + " -> " + (yyline + 1) + ", " + (yycolumn + 1));
				yybegin(YYINITIAL);
			} else {
				// generar token INDENT
				stack.push(amount);
				yybegin(YYINITIAL);
				return symbol(INDENT);
			}
		} else if(amount == stack.peek()) {
			// do nothing
			yybegin(YYINITIAL);
		} else if(amount == stack.peek() + 1) {
			// generar token INDENT
			stack.push(amount);
			yybegin(YYINITIAL);
			return symbol(INDENT);
		} else if(amount > stack.peek() + 1) {
			// error identacion
			System.out.println("error indent " + amount + " -> " + (yyline + 1) + ", " + (yycolumn + 1));
			yybegin(YYINITIAL);
		}else if(amount < stack.peek()) {
			while(amount != stack.peek()) {
				stack.pop();
				//push back
				yypushback(yytext().length());

				//emitir token DEDENT
				return symbol(DEDENT);
			}
			yybegin(YYINITIAL);
		}
            }
            // fall through
          case 131: break;
          case 38:
            { return symbol(EOL, yytext());
            }
            // fall through
          case 132: break;
          case 39:
            { return symbol(NULL, yytext());
            }
            // fall through
          case 133: break;
          case 40:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 134: break;
          case 41:
            { return symbol(AND, yytext());
            }
            // fall through
          case 135: break;
          case 42:
            { return symbol(XOR, yytext());
            }
            // fall through
          case 136: break;
          case 43:
            { return symbol(PLUS_PLUS, yytext());
            }
            // fall through
          case 137: break;
          case 44:
            { return symbol(PLUS_EQ, yytext());
            }
            // fall through
          case 138: break;
          case 45:
            { return symbol(MINUS_MINUS, yytext());
            }
            // fall through
          case 139: break;
          case 46:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 140: break;
          case 47:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 141: break;
          case 48:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 142: break;
          case 49:
            { return symbol(NOTE, yytext());
            }
            // fall through
          case 143: break;
          case 50:
            { return symbol(IF, yytext());
            }
            // fall through
          case 144: break;
          case 51:
            { return symbol(OR, yytext());
            }
            // fall through
          case 145: break;
          case 52:
            { string.append('\"');
            }
            // fall through
          case 146: break;
          case 53:
            { string.append('#');
            }
            // fall through
          case 147: break;
          case 54:
            { string.append('\n');
            }
            // fall through
          case 148: break;
          case 55:
            { string.append('\r');
            }
            // fall through
          case 149: break;
          case 56:
            { string.append('\t');
            }
            // fall through
          case 150: break;
          case 57:
            { character.append('#');
            }
            // fall through
          case 151: break;
          case 58:
            { character.append('\'');
            }
            // fall through
          case 152: break;
          case 59:
            { character.append('\n');
            }
            // fall through
          case 153: break;
          case 60:
            { character.append('\r');
            }
            // fall through
          case 154: break;
          case 61:
            { character.append('\t');
            }
            // fall through
          case 155: break;
          case 62:
            { return symbol(NAND, yytext());
            }
            // fall through
          case 156: break;
          case 63:
            { return symbol(NOR, yytext());
            }
            // fall through
          case 157: break;
          case 64:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 158: break;
          case 65:
            { return symbol(VAR, yytext());
            }
            // fall through
          case 159: break;
          case 66:
            { return symbol(CASE, yytext());
            }
            // fall through
          case 160: break;
          case 67:
            { return symbol(KEEP, yytext());
            }
            // fall through
          case 161: break;
          case 68:
            { return symbol(FOR, yytext());
            }
            // fall through
          case 162: break;
          case 69:
            { return symbol(ELSE, yytext());
            }
            // fall through
          case 163: break;
          case 70:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 164: break;
          case 71:
            { return symbol(DOB, yytext());
            }
            // fall through
          case 165: break;
          case 72:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 166: break;
          case 73:
            { return symbol(DO_WHILE, yytext());
            }
            // fall through
          case 167: break;
          case 74:
            { return symbol(WAY, yytext());
            }
            // fall through
          case 168: break;
          case 75:
            { return symbol(TRACK, yytext());
            }
            // fall through
          case 169: break;
          case 76:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 170: break;
          case 77:
            { return symbol(CAD, yytext());
            }
            // fall through
          case 171: break;
          case 78:
            { return symbol(INT, yytext());
            }
            // fall through
          case 172: break;
          case 79:
            { return symbol(WAIT, yytext());
            }
            // fall through
          case 173: break;
          case 80:
            { return symbol(SWITCH, yytext());
            }
            // fall through
          case 174: break;
          case 81:
            { return symbol(ARRAY, yytext());
            }
            // fall through
          case 175: break;
          case 82:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 176: break;
          case 83:
            { return symbol(DEFAULT, yytext());
            }
            // fall through
          case 177: break;
          case 84:
            { return symbol(MSG, yytext());
            }
            // fall through
          case 178: break;
          case 85:
            { return symbol(ORDER, yytext());
            }
            // fall through
          case 179: break;
          case 86:
            { return symbol(RETURN, yytext());
            }
            // fall through
          case 180: break;
          case 87:
            { return symbol(CAR, yytext());
            }
            // fall through
          case 181: break;
          case 88:
            { return symbol(EXTENDS, yytext());
            }
            // fall through
          case 182: break;
          case 89:
            { return symbol(LENGTH, yytext());
            }
            // fall through
          case 183: break;
          case 90:
            { return symbol(WHILE, yytext());
            }
            // fall through
          case 184: break;
          case 91:
            { return symbol(CONTINUE, yytext());
            }
            // fall through
          case 185: break;
          case 92:
            { return symbol(MAIN, yytext());
            }
            // fall through
          case 186: break;
          case 93:
            { return symbol(SUM, yytext());
            }
            // fall through
          case 187: break;
          case 94:
            { return symbol(PLAY, yytext());
            }
            // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
