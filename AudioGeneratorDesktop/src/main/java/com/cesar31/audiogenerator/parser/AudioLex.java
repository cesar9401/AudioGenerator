// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: audio.flex


package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import static com.cesar31.audiogenerator.parser.AudioParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AudioLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\2\0\1\24\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\35\1\40"+
    "\1\41\1\42\1\35\1\43\1\44\1\35\1\45\1\46"+
    "\1\47\1\35\1\50\4\35\1\51\1\52\1\53\1\54"+
    "\1\35\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\40\1\67\1\70\1\71"+
    "\1\72\1\73\1\35\1\74\1\75\1\76\1\77\1\50"+
    "\1\100\1\101\1\35\1\102\1\0\1\103\55\0\1\104"+
    "\12\0\1\104\4\0\1\104\5\0\27\104\1\0\37\104"+
    "\1\0\u01ca\104\4\0\14\104\16\0\5\104\7\0\1\104"+
    "\1\0\1\104\21\0\165\104\1\0\2\104\2\0\4\104"+
    "\1\0\1\104\6\0\1\104\1\0\3\104\1\0\1\104"+
    "\1\0\24\104\1\0\123\104\1\0\213\104\1\0\255\104"+
    "\1\0\46\104\2\0\1\104\6\0\51\104\10\0\55\104"+
    "\1\0\1\104\1\0\2\104\1\0\2\104\1\0\1\104"+
    "\10\0\33\104\4\0\4\104\35\0\13\104\5\0\100\104"+
    "\12\105\4\0\146\104\1\0\10\104\2\0\12\104\1\0"+
    "\6\104\12\105\3\104\2\0\1\104\20\0\73\104\2\0"+
    "\145\104\16\0\12\105\54\104\4\0\1\104\2\0\1\104"+
    "\2\0\56\104\22\0\34\104\4\0\13\104\65\0\25\104"+
    "\1\0\10\104\25\0\17\104\1\0\201\104\2\0\12\105"+
    "\1\0\23\104\1\0\10\104\2\0\2\104\2\0\26\104"+
    "\1\0\7\104\1\0\1\104\3\0\4\104\2\0\11\104"+
    "\2\0\2\104\2\0\4\104\10\0\1\104\4\0\2\104"+
    "\1\0\5\104\2\0\12\105\2\104\12\0\1\104\1\0"+
    "\1\104\2\0\3\104\1\0\6\104\4\0\2\104\2\0"+
    "\26\104\1\0\7\104\1\0\2\104\1\0\2\104\1\0"+
    "\2\104\2\0\1\104\1\0\5\104\4\0\2\104\2\0"+
    "\3\104\3\0\1\104\7\0\4\104\1\0\1\104\7\0"+
    "\12\105\6\104\13\0\3\104\1\0\11\104\1\0\3\104"+
    "\1\0\26\104\1\0\7\104\1\0\2\104\1\0\5\104"+
    "\2\0\12\104\1\0\3\104\1\0\3\104\2\0\1\104"+
    "\17\0\4\104\2\0\12\105\11\0\7\104\1\0\3\104"+
    "\1\0\10\104\2\0\2\104\2\0\26\104\1\0\7\104"+
    "\1\0\2\104\1\0\5\104\2\0\11\104\2\0\2\104"+
    "\2\0\3\104\10\0\2\104\4\0\2\104\1\0\5\104"+
    "\2\0\12\105\1\0\1\104\20\0\2\104\1\0\6\104"+
    "\3\0\3\104\1\0\4\104\3\0\2\104\1\0\1\104"+
    "\1\0\2\104\3\0\2\104\3\0\3\104\3\0\14\104"+
    "\4\0\5\104\3\0\3\104\1\0\4\104\2\0\1\104"+
    "\6\0\1\104\16\0\12\105\20\0\15\104\1\0\3\104"+
    "\1\0\27\104\1\0\20\104\3\0\10\104\1\0\3\104"+
    "\1\0\4\104\7\0\2\104\1\0\3\104\5\0\4\104"+
    "\2\0\12\105\20\0\4\104\1\0\10\104\1\0\3\104"+
    "\1\0\27\104\1\0\12\104\1\0\5\104\2\0\11\104"+
    "\1\0\3\104\1\0\4\104\7\0\2\104\7\0\1\104"+
    "\1\0\4\104\2\0\12\105\1\0\2\104\15\0\4\104"+
    "\1\0\10\104\1\0\3\104\1\0\63\104\1\0\3\104"+
    "\1\0\5\104\5\0\4\104\7\0\5\104\2\0\12\105"+
    "\12\0\6\104\2\0\2\104\1\0\22\104\3\0\30\104"+
    "\1\0\11\104\1\0\1\104\2\0\7\104\3\0\1\104"+
    "\4\0\6\104\1\0\1\104\1\0\10\104\6\0\12\105"+
    "\2\0\2\104\15\0\72\104\5\0\17\104\1\0\12\105"+
    "\47\0\2\104\1\0\1\104\1\0\5\104\1\0\30\104"+
    "\1\0\1\104\1\0\27\104\2\0\5\104\1\0\1\104"+
    "\1\0\6\104\2\0\12\105\2\0\4\104\40\0\1\104"+
    "\27\0\2\104\6\0\12\105\13\0\1\104\1\0\1\104"+
    "\1\0\1\104\4\0\12\104\1\0\44\104\4\0\24\104"+
    "\1\0\22\104\1\0\44\104\11\0\1\104\71\0\100\104"+
    "\12\105\6\0\100\104\12\105\4\104\2\0\46\104\1\0"+
    "\1\104\5\0\1\104\2\0\53\104\1\0\115\104\1\0"+
    "\4\104\2\0\7\104\1\0\1\104\1\0\4\104\2\0"+
    "\51\104\1\0\4\104\2\0\41\104\1\0\4\104\2\0"+
    "\7\104\1\0\1\104\1\0\4\104\2\0\17\104\1\0"+
    "\71\104\1\0\4\104\2\0\103\104\2\0\3\104\40\0"+
    "\20\104\20\0\126\104\2\0\6\104\3\0\u016c\104\2\0"+
    "\21\104\1\0\32\104\5\0\113\104\3\0\13\104\7\0"+
    "\15\104\1\0\7\104\13\0\25\104\13\0\24\104\14\0"+
    "\15\104\1\0\3\104\1\0\2\104\14\0\124\104\3\0"+
    "\1\104\4\0\2\104\2\0\12\105\41\0\3\104\2\0"+
    "\12\105\6\0\131\104\7\0\53\104\5\0\106\104\12\0"+
    "\37\104\1\0\14\104\4\0\14\104\12\0\12\105\36\104"+
    "\2\0\5\104\13\0\54\104\4\0\32\104\6\0\12\105"+
    "\46\0\34\104\4\0\77\104\1\0\35\104\2\0\1\104"+
    "\12\105\6\0\12\105\15\0\1\104\10\0\17\104\101\0"+
    "\114\104\4\0\12\105\21\0\11\104\14\0\60\104\12\105"+
    "\72\104\14\0\70\104\10\0\12\105\3\0\3\104\12\105"+
    "\44\104\2\0\11\104\7\0\53\104\2\0\3\104\20\0"+
    "\3\104\1\0\47\104\5\0\372\104\1\0\33\104\2\0"+
    "\6\104\2\0\46\104\2\0\6\104\2\0\10\104\1\0"+
    "\1\104\1\0\1\104\1\0\1\104\1\0\37\104\2\0"+
    "\65\104\1\0\7\104\1\0\1\104\3\0\3\104\1\0"+
    "\7\104\3\0\4\104\2\0\6\104\4\0\15\104\5\0"+
    "\3\104\1\0\7\104\102\0\2\104\23\0\1\104\34\0"+
    "\1\104\15\0\1\104\20\0\15\104\63\0\41\104\21\0"+
    "\1\104\4\0\1\104\2\0\12\104\1\0\1\104\3\0"+
    "\5\104\6\0\1\104\1\0\1\104\1\0\1\104\1\0"+
    "\4\104\1\0\13\104\2\0\4\104\5\0\5\104\4\0"+
    "\1\104\21\0\51\104\u022d\0\64\104\26\0\57\104\1\0"+
    "\57\104\1\0\205\104\6\0\11\104\14\0\46\104\1\0"+
    "\1\104\5\0\1\104\2\0\70\104\7\0\1\104\17\0"+
    "\30\104\11\0\7\104\1\0\7\104\1\0\7\104\1\0"+
    "\7\104\1\0\7\104\1\0\7\104\1\0\7\104\1\0"+
    "\7\104\1\0\40\104\57\0\1\104\325\0\3\104\31\0"+
    "\17\104\1\0\5\104\2\0\5\104\4\0\126\104\2\0"+
    "\2\104\2\0\3\104\1\0\132\104\1\0\4\104\5\0"+
    "\53\104\1\0\136\104\21\0\33\104\65\0\306\104\112\0"+
    "\360\104\20\0\215\104\103\0\56\104\2\0\15\104\3\0"+
    "\20\104\12\105\2\104\24\0\63\104\1\0\12\104\1\0"+
    "\163\104\45\0\11\104\2\0\147\104\2\0\65\104\2\0"+
    "\5\104\60\0\61\104\30\0\64\104\14\0\106\104\12\0"+
    "\12\105\6\0\30\104\3\0\1\104\1\0\3\104\12\105"+
    "\44\104\2\0\44\104\14\0\35\104\3\0\101\104\16\0"+
    "\1\104\12\105\6\0\20\104\12\105\5\104\1\0\67\104"+
    "\11\0\16\104\2\0\12\105\6\0\27\104\3\0\111\104"+
    "\30\0\3\104\2\0\20\104\2\0\5\104\12\0\6\104"+
    "\2\0\6\104\2\0\6\104\11\0\7\104\1\0\7\104"+
    "\1\0\53\104\1\0\14\104\10\0\173\104\1\0\2\104"+
    "\2\0\12\105\6\0\244\104\14\0\27\104\4\0\61\104"+
    "\4\0\156\104\2\0\152\104\46\0\7\104\14\0\5\104"+
    "\5\0\14\104\1\0\15\104\1\0\5\104\1\0\1\104"+
    "\1\0\2\104\1\0\2\104\1\0\154\104\41\0\153\104"+
    "\22\0\100\104\2\0\66\104\50\0\14\104\4\0\20\104"+
    "\20\0\20\104\3\0\2\104\30\0\3\104\40\0\5\104"+
    "\1\0\207\104\23\0\12\105\7\0\32\104\4\0\1\104"+
    "\1\0\32\104\13\0\131\104\3\0\6\104\2\0\6\104"+
    "\2\0\6\104\2\0\3\104\43\0\14\104\1\0\32\104"+
    "\1\0\23\104\1\0\2\104\1\0\17\104\2\0\16\104"+
    "\42\0\173\104\105\0\65\104\210\0\1\104\202\0\35\104"+
    "\3\0\61\104\17\0\1\104\37\0\40\104\15\0\36\104"+
    "\5\0\53\104\5\0\36\104\2\0\44\104\4\0\10\104"+
    "\1\0\5\104\52\0\236\104\2\0\12\105\6\0\44\104"+
    "\4\0\44\104\4\0\50\104\10\0\64\104\234\0\67\104"+
    "\11\0\26\104\12\0\10\104\230\0\6\104\2\0\1\104"+
    "\1\0\54\104\1\0\2\104\3\0\1\104\2\0\27\104"+
    "\12\0\27\104\11\0\37\104\101\0\23\104\1\0\2\104"+
    "\12\0\26\104\12\0\32\104\106\0\70\104\6\0\2\104"+
    "\100\0\4\104\1\0\2\104\5\0\10\104\1\0\3\104"+
    "\1\0\35\104\2\0\3\104\4\0\1\104\40\0\35\104"+
    "\3\0\35\104\43\0\10\104\1\0\36\104\31\0\66\104"+
    "\12\0\26\104\12\0\23\104\15\0\22\104\156\0\111\104"+
    "\67\0\63\104\15\0\63\104\15\0\50\104\10\0\12\105"+
    "\306\0\35\104\12\0\1\104\10\0\41\104\217\0\27\104"+
    "\11\0\107\104\37\0\12\105\17\0\74\104\25\0\31\104"+
    "\7\0\12\105\6\0\65\104\1\0\12\105\4\0\3\104"+
    "\11\0\44\104\2\0\1\104\11\0\105\104\4\0\4\104"+
    "\3\0\12\105\1\104\1\0\1\104\43\0\22\104\1\0"+
    "\45\104\6\0\1\104\101\0\7\104\1\0\1\104\1\0"+
    "\4\104\1\0\17\104\1\0\12\104\7\0\73\104\5\0"+
    "\12\105\6\0\4\104\1\0\10\104\2\0\2\104\2\0"+
    "\26\104\1\0\7\104\1\0\2\104\1\0\5\104\1\0"+
    "\12\104\2\0\2\104\2\0\3\104\2\0\1\104\6\0"+
    "\1\104\5\0\7\104\2\0\7\104\3\0\5\104\213\0"+
    "\113\104\5\0\12\105\4\0\2\104\40\0\106\104\1\0"+
    "\1\104\10\0\12\105\246\0\66\104\2\0\11\104\27\0"+
    "\6\104\42\0\101\104\3\0\1\104\13\0\12\105\46\0"+
    "\71\104\7\0\12\105\66\0\33\104\2\0\17\104\4\0"+
    "\12\105\306\0\73\104\145\0\100\104\12\105\25\0\1\104"+
    "\240\0\10\104\2\0\56\104\2\0\10\104\1\0\2\104"+
    "\33\0\77\104\10\0\1\104\10\0\112\104\3\0\1\104"+
    "\42\0\71\104\7\0\11\104\1\0\55\104\1\0\11\104"+
    "\17\0\12\105\30\0\36\104\2\0\26\104\1\0\16\104"+
    "\111\0\7\104\1\0\2\104\1\0\54\104\3\0\1\104"+
    "\1\0\2\104\1\0\11\104\10\0\12\105\6\0\6\104"+
    "\1\0\2\104\1\0\45\104\1\0\2\104\1\0\6\104"+
    "\7\0\12\105\u0136\0\27\104\11\0\232\104\146\0\157\104"+
    "\21\0\304\104\274\0\57\104\321\0\107\104\271\0\71\104"+
    "\7\0\37\104\1\0\12\105\146\0\36\104\2\0\5\104"+
    "\13\0\67\104\11\0\4\104\14\0\12\105\11\0\25\104"+
    "\5\0\23\104\260\0\100\104\200\0\113\104\4\0\71\104"+
    "\7\0\21\104\100\0\2\104\1\0\1\104\34\0\370\104"+
    "\10\0\363\104\15\0\37\104\61\0\3\104\21\0\4\104"+
    "\10\0\u018c\104\4\0\153\104\5\0\15\104\3\0\11\104"+
    "\7\0\12\104\3\0\2\104\306\0\5\104\3\0\6\104"+
    "\10\0\10\104\2\0\7\104\36\0\4\104\224\0\3\104"+
    "\273\0\125\104\1\0\107\104\1\0\2\104\2\0\1\104"+
    "\2\0\2\104\2\0\4\104\1\0\14\104\1\0\1\104"+
    "\1\0\7\104\1\0\101\104\1\0\4\104\2\0\10\104"+
    "\1\0\7\104\1\0\34\104\1\0\4\104\1\0\5\104"+
    "\1\0\1\104\3\0\7\104\1\0\u0154\104\2\0\31\104"+
    "\1\0\31\104\1\0\37\104\1\0\31\104\1\0\37\104"+
    "\1\0\31\104\1\0\37\104\1\0\31\104\1\0\37\104"+
    "\1\0\31\104\1\0\10\104\2\0\62\105\67\104\4\0"+
    "\62\104\10\0\1\104\16\0\1\104\26\0\5\104\1\0"+
    "\17\104\120\0\7\104\1\0\21\104\2\0\7\104\1\0"+
    "\2\104\1\0\5\104\325\0\55\104\3\0\16\104\2\0"+
    "\12\105\4\0\1\104\u0171\0\60\104\12\105\6\0\305\104"+
    "\13\0\7\104\51\0\114\104\4\0\12\105\246\0\4\104"+
    "\1\0\33\104\1\0\2\104\1\0\1\104\2\0\1\104"+
    "\1\0\12\104\1\0\4\104\1\0\1\104\1\0\1\104"+
    "\6\0\1\104\4\0\1\104\1\0\1\104\1\0\1\104"+
    "\1\0\3\104\1\0\2\104\1\0\1\104\2\0\1\104"+
    "\1\0\1\104\1\0\1\104\1\0\1\104\1\0\1\104"+
    "\1\0\2\104\1\0\1\104\2\0\4\104\1\0\7\104"+
    "\1\0\4\104\1\0\4\104\1\0\1\104\1\0\12\104"+
    "\1\0\21\104\5\0\3\104\1\0\5\104\1\0\21\104"+
    "\164\0\32\104\6\0\32\104\6\0\32\104\166\0\327\104"+
    "\51\0\65\104\13\0\336\104\2\0\u0182\104\16\0\u0131\104"+
    "\37\0\36\104\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\22\1\1\23\1\24\1\25"+
    "\2\1\1\26\1\27\1\30\1\31\1\32\1\1\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\2\0\1\43\1\44\1\45\1\4\6\46\1\47"+
    "\3\46\1\50\3\46\1\51\2\46\1\52\4\46\1\53"+
    "\1\46\1\54\7\46\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\0\1\4\10\46\1\66"+
    "\4\46\1\67\4\46\1\70\7\46\1\71\4\46\1\72"+
    "\3\46\1\73\6\46\1\74\12\46\1\75\4\46\1\76"+
    "\7\46\1\77\1\100\2\46\1\101\10\46\1\102\3\46"+
    "\1\103\1\104\5\46\1\105\1\106\4\46\1\107\4\46"+
    "\1\110\1\111\4\46\1\112\1\113\6\46\1\114\4\46"+
    "\1\115\4\46\1\116\2\46\1\117\1\46\1\120\1\46"+
    "\1\121\2\46\1\122\3\46\1\123\2\46\1\124\1\125"+
    "\1\126\5\46\1\127\1\46\1\130\1\46\1\131\1\132"+
    "\1\46\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\214\0\214\0\322\0\214\0\u0118"+
    "\0\214\0\214\0\u015e\0\214\0\214\0\214\0\u01a4\0\214"+
    "\0\u01ea\0\214\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\214\0\214\0\214\0\u087a\0\u08c0\0\u0906\0\214"+
    "\0\214\0\214\0\214\0\u094c\0\214\0\214\0\u0992\0\214"+
    "\0\u09d8\0\214\0\214\0\214\0\214\0\214\0\u0a1e\0\u0a64"+
    "\0\214\0\214\0\214\0\u0aaa\0\u0532\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\214\0\214\0\u0a1e\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\214"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\214\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\214\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4"+
    "\0\u19fa\0\214\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u0532\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u0532\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u0532\0\u20d0\0\u2116\0\u215c"+
    "\0\u21a2\0\u0532\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u0532\0\214\0\u23d2\0\u2418\0\u0532\0\u245e\0\u24a4"+
    "\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u0532\0\u268e"+
    "\0\u26d4\0\u271a\0\u0532\0\u0532\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u0532\0\u0532\0\u28be\0\u2904\0\u294a\0\u2990\0\u0532"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u0532\0\u0532\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u0532\0\u0532\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u0532\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u0532"+
    "\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u0532\0\u2fda\0\u3020\0\u0532"+
    "\0\u3066\0\u0532\0\u30ac\0\u0532\0\u30f2\0\u3138\0\u0532\0\u317e"+
    "\0\u31c4\0\u320a\0\u0532\0\u3250\0\u3296\0\u0532\0\u0532\0\u0532"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u0532\0\u343a\0\u0532"+
    "\0\u3480\0\u0532\0\u0532\0\u34c6\0\u0532\0\u0532";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\3\1\53\1\54\1\30\1\55\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\36\1\42"+
    "\1\43\1\36\1\44\1\45\1\46\1\47\1\50\4\36"+
    "\1\56\2\3\1\57\1\60\1\61\1\62\2\57\1\63"+
    "\1\64\42\57\1\65\33\57\110\0\1\5\110\0\1\66"+
    "\3\0\1\67\13\0\1\70\55\0\1\71\13\0\1\72"+
    "\71\0\1\73\17\0\1\74\7\0\1\75\77\0\1\76"+
    "\106\0\1\77\105\0\1\77\1\0\2\24\101\0\1\100"+
    "\5\0\1\101\105\0\1\102\105\0\1\103\1\104\101\0"+
    "\2\105\3\0\22\105\4\0\20\105\1\106\5\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\15\105\1\107"+
    "\10\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\1\110\14\105\1\111\10\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\4\105\1\112\10\105\1\113\10\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\14\105"+
    "\1\114\3\105\1\115\3\105\1\116\1\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\1\117\25\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\26\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\1\120\25\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\13\105"+
    "\1\121\12\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\122\21\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\1\123\14\105\1\124\10\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\4\105\1\125"+
    "\3\105\1\126\15\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\17\105\1\127\6\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\1\130\7\105\1\131\6\105"+
    "\1\132\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\133\21\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\1\134\7\105\1\135\4\105\1\136"+
    "\4\105\1\137\1\140\2\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\17\105\1\141\6\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\1\142\3\105\1\143"+
    "\21\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\15\105\1\144\10\105\1\0\2\105\103\0\1\145\2\0"+
    "\1\57\3\0\2\57\2\0\42\57\1\0\33\57\6\0"+
    "\1\146\1\147\61\0\1\150\2\0\1\151\1\0\1\152"+
    "\20\0\1\153\177\0\1\154\24\0\2\155\61\0\1\155"+
    "\17\100\1\156\66\100\2\104\1\7\1\157\102\104\22\0"+
    "\2\105\3\0\22\105\4\0\2\105\1\160\23\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\15\105\1\161"+
    "\10\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\3\105\1\162\13\105\1\163\1\164\5\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\14\105\1\165\11\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\5\105"+
    "\1\166\12\105\1\167\5\105\1\0\2\105\7\0\1\170"+
    "\12\0\2\105\3\0\22\105\4\0\1\105\1\171\24\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\21\105"+
    "\1\172\4\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\16\105\1\173\7\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\21\105\1\174\4\105\1\0\2\105"+
    "\7\0\1\175\12\0\2\105\3\0\22\105\4\0\12\105"+
    "\1\176\13\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\2\105\1\177\23\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\16\105\1\200\7\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\4\105\1\201\21\105"+
    "\1\0\2\105\7\0\1\202\12\0\2\105\3\0\22\105"+
    "\4\0\26\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\14\105\1\203\11\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\14\105\1\204\11\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\4\105\1\205\21\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\3\105"+
    "\1\206\22\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\17\105\1\207\6\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\20\105\1\210\5\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\10\105\1\211\15\105"+
    "\1\0\2\105\7\0\1\212\12\0\2\105\3\0\22\105"+
    "\4\0\16\105\1\213\2\105\1\214\4\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\12\105\1\215\13\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\14\105"+
    "\1\216\11\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\12\105\1\217\13\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\13\105\1\220\12\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\10\105\1\221\15\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\22\105"+
    "\1\222\3\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\17\105\1\223\6\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\17\105\1\224\6\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\15\105\1\225\10\105"+
    "\1\0\2\105\17\100\1\156\6\100\1\7\57\100\2\0"+
    "\1\7\125\0\2\105\3\0\22\105\4\0\4\105\1\226"+
    "\21\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\4\105\1\227\21\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\4\105\1\230\21\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\1\231\25\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\15\105\1\232\10\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\21\105"+
    "\1\233\4\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\1\234\25\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\2\105\1\235\23\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\12\105\1\236\13\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\4\105\1\237"+
    "\21\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\4\105\1\240\21\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\10\105\1\241\15\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\20\105\1\242\5\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\4\105\1\243"+
    "\21\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\1\244\25\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\16\105\1\245\7\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\6\105\1\246\17\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\20\105\1\247\5\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\14\105"+
    "\1\250\11\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\251\21\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\1\252\3\105\1\253\21\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\21\105\1\254"+
    "\4\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\13\105\1\255\1\256\11\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\17\105\1\257\6\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\15\105\1\260\10\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\10\105"+
    "\1\261\15\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\15\105\1\262\10\105\1\0\2\105\7\0\1\263"+
    "\12\0\2\105\3\0\22\105\4\0\26\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\1\264\25\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\21\105\1\265"+
    "\4\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\4\105\1\266\21\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\3\105\1\267\22\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\12\105\1\161\13\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\14\105\1\270"+
    "\11\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\1\271\25\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\14\105\1\272\11\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\2\105\1\273\23\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\10\105\1\274\15\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\22\105"+
    "\1\275\3\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\276\21\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\4\105\1\277\21\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\17\105\1\300\6\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\17\105"+
    "\1\301\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\302\21\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\4\105\1\303\10\105\1\303\10\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\17\105"+
    "\1\304\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\17\105\1\305\6\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\10\105\1\306\15\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\1\307\25\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\21\105\1\310"+
    "\4\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\14\105\1\311\11\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\20\105\1\312\5\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\1\313\25\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\15\105\1\314\10\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\2\105"+
    "\1\315\23\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\15\105\1\316\10\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\17\105\1\317\6\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\17\105\1\320\6\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\17\105"+
    "\1\321\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\2\105\1\322\23\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\1\323\25\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\3\105\1\324\22\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\14\105\1\325"+
    "\11\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\1\326\25\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\21\105\1\327\4\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\14\105\1\330\11\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\12\105\1\331\13\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\14\105"+
    "\1\332\11\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\15\105\1\333\10\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\1\334\25\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\14\105\1\335\11\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\4\105\1\336"+
    "\21\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\21\105\1\337\4\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\11\105\1\340\14\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\17\105\1\341\6\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\1\342\25\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\20\105"+
    "\1\343\5\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\10\105\1\344\15\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\3\105\1\345\22\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\14\105\1\346\11\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\10\105"+
    "\1\347\15\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\7\105\1\350\16\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\3\105\1\351\22\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\4\105\1\352\21\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\4\105"+
    "\1\353\21\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\22\105\1\354\3\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\21\105\1\355\4\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\3\105\1\356\22\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\3\105"+
    "\1\357\22\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\20\105\1\360\5\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\22\105\1\361\3\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\4\105\1\362\21\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\1\363"+
    "\25\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\17\105\1\364\6\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\16\105\1\365\7\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\22\105\1\366\3\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\1\367\25\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\25\105"+
    "\1\370\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\4\105\1\371\21\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\14\105\1\372\11\105\1\0\2\105\22\0"+
    "\2\105\3\0\22\105\4\0\17\105\1\373\6\105\1\0"+
    "\2\105\22\0\2\105\3\0\22\105\4\0\1\374\25\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\4\105"+
    "\1\375\21\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\376\21\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\3\105\1\377\22\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\20\105\1\u0100\5\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\1\u0101"+
    "\25\105\1\0\2\105\22\0\2\105\3\0\22\105\4\0"+
    "\2\105\1\u0102\23\105\1\0\2\105\22\0\2\105\3\0"+
    "\22\105\4\0\1\u0103\25\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\17\105\1\u0104\6\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\21\105\1\u0105\4\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\17\105"+
    "\1\u0106\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\14\105\1\u0107\11\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\12\105\1\u0108\13\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\10\105\1\u0109\15\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\17\105"+
    "\1\u010a\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\15\105\1\266\10\105\1\0\2\105\22\0\2\105"+
    "\3\0\22\105\4\0\4\105\1\u010b\21\105\1\0\2\105"+
    "\22\0\2\105\3\0\22\105\4\0\21\105\1\u010c\4\105"+
    "\1\0\2\105\22\0\2\105\3\0\22\105\4\0\17\105"+
    "\1\u010d\6\105\1\0\2\105\22\0\2\105\3\0\22\105"+
    "\4\0\4\105\1\u010e\21\105\1\0\2\105";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\1\1\1\11\1\1\2\11\1\1\3\11"+
    "\1\1\1\11\1\1\1\11\27\1\3\11\3\1\4\11"+
    "\1\1\2\11\1\0\1\11\1\0\5\11\2\0\3\11"+
    "\41\1\10\11\1\1\1\0\11\1\1\11\4\1\1\11"+
    "\4\1\1\11\7\1\1\11\50\1\1\11\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object object) {
		return new Symbol(type, yyline + 1, yycolumn + 1, object);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AudioLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
            }
            // fall through
          case 93: break;
          case 2:
            { return symbol(TAB, yytext());
            }
            // fall through
          case 94: break;
          case 3:
            { return symbol(EOL, yytext());
            }
            // fall through
          case 95: break;
          case 4:
            { /* Ignore */
            }
            // fall through
          case 96: break;
          case 5:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 97: break;
          case 6:
            { string.setLength(0);
		yybegin(STRING);
            }
            // fall through
          case 98: break;
          case 7:
            { return symbol(MOD, yytext());
            }
            // fall through
          case 99: break;
          case 8:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 100: break;
          case 9:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 101: break;
          case 10:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 102: break;
          case 11:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 103: break;
          case 12:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 104: break;
          case 13:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 105: break;
          case 14:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 106: break;
          case 15:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 107: break;
          case 16:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 108: break;
          case 17:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 109: break;
          case 18:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 110: break;
          case 19:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 111: break;
          case 20:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 112: break;
          case 21:
            { return symbol(POW, yytext());
            }
            // fall through
          case 113: break;
          case 22:
            { string.append(yytext());
            }
            // fall through
          case 114: break;
          case 23:
            { string.append("\\t");
            }
            // fall through
          case 115: break;
          case 24:
            { string.append("\\n");
            }
            // fall through
          case 116: break;
          case 25:
            { string.append("\\r");
            }
            // fall through
          case 117: break;
          case 26:
            { yybegin(YYINITIAL);
		return symbol(STR, string.toString());
            }
            // fall through
          case 118: break;
          case 27:
            { string.append('\\');
            }
            // fall through
          case 119: break;
          case 28:
            { return symbol(NULL, yytext());
            }
            // fall through
          case 120: break;
          case 29:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 121: break;
          case 30:
            { return symbol(AND, yytext());
            }
            // fall through
          case 122: break;
          case 31:
            { return symbol(XOR, yytext());
            }
            // fall through
          case 123: break;
          case 32:
            { return symbol(PLUS_PLUS, yytext());
            }
            // fall through
          case 124: break;
          case 33:
            { return symbol(PLUS_EQ, yytext());
            }
            // fall through
          case 125: break;
          case 34:
            { return symbol(MINUS_MINUS, yytext());
            }
            // fall through
          case 126: break;
          case 35:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 127: break;
          case 36:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 128: break;
          case 37:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 129: break;
          case 38:
            { return symbol(ID, yytext());
            }
            // fall through
          case 130: break;
          case 39:
            { return symbol(DO, yytext());
            }
            // fall through
          case 131: break;
          case 40:
            { return symbol(FA, yytext());
            }
            // fall through
          case 132: break;
          case 41:
            { return symbol(LA, yytext());
            }
            // fall through
          case 133: break;
          case 42:
            { return symbol(MI, yytext());
            }
            // fall through
          case 134: break;
          case 43:
            { return symbol(RE, yytext());
            }
            // fall through
          case 135: break;
          case 44:
            { return symbol(IF, yytext());
            }
            // fall through
          case 136: break;
          case 45:
            { return symbol(OR, yytext());
            }
            // fall through
          case 137: break;
          case 46:
            { string.append('\"');
            }
            // fall through
          case 138: break;
          case 47:
            { string.append("#");
            }
            // fall through
          case 139: break;
          case 48:
            { string.append('\n');
            }
            // fall through
          case 140: break;
          case 49:
            { string.append('\r');
            }
            // fall through
          case 141: break;
          case 50:
            { string.append('\t');
            }
            // fall through
          case 142: break;
          case 51:
            { return symbol(NAND, yytext());
            }
            // fall through
          case 143: break;
          case 52:
            { return symbol(NOR, yytext());
            }
            // fall through
          case 144: break;
          case 53:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 145: break;
          case 54:
            { return symbol(DO_, yytext());
            }
            // fall through
          case 146: break;
          case 55:
            { return symbol(FA_, yytext());
            }
            // fall through
          case 147: break;
          case 56:
            { return symbol(LA_, yytext());
            }
            // fall through
          case 148: break;
          case 57:
            { return symbol(RE_, yytext());
            }
            // fall through
          case 149: break;
          case 58:
            { return symbol(SOL, yytext());
            }
            // fall through
          case 150: break;
          case 59:
            { return symbol(VAR, yytext());
            }
            // fall through
          case 151: break;
          case 60:
            { return symbol(CASE, yytext());
            }
            // fall through
          case 152: break;
          case 61:
            { return symbol(KEEP, yytext());
            }
            // fall through
          case 153: break;
          case 62:
            { return symbol(FOR, yytext());
            }
            // fall through
          case 154: break;
          case 63:
            { return symbol(ELSE, yytext());
            }
            // fall through
          case 155: break;
          case 64:
            { return symbol(SOL_, yytext());
            }
            // fall through
          case 156: break;
          case 65:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 157: break;
          case 66:
            { return symbol(DOB, yytext());
            }
            // fall through
          case 158: break;
          case 67:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 159: break;
          case 68:
            { return symbol(DO_WHILE, yytext());
            }
            // fall through
          case 160: break;
          case 69:
            { return symbol(EVEN, yytext());
            }
            // fall through
          case 161: break;
          case 70:
            { return symbol(TRACK, yytext());
            }
            // fall through
          case 162: break;
          case 71:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 163: break;
          case 72:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 164: break;
          case 73:
            { return symbol(CAD, yytext());
            }
            // fall through
          case 165: break;
          case 74:
            { return symbol(INT, yytext());
            }
            // fall through
          case 166: break;
          case 75:
            { return symbol(WAIT, yytext());
            }
            // fall through
          case 167: break;
          case 76:
            { return symbol(PRIME, yytext());
            }
            // fall through
          case 168: break;
          case 77:
            { return symbol(SWITCH, yytext());
            }
            // fall through
          case 169: break;
          case 78:
            { return symbol(DEFAULT, yytext());
            }
            // fall through
          case 170: break;
          case 79:
            { return symbol(ODD, yytext());
            }
            // fall through
          case 171: break;
          case 80:
            { return symbol(MSG, yytext());
            }
            // fall through
          case 172: break;
          case 81:
            { return symbol(ORDER, yytext());
            }
            // fall through
          case 173: break;
          case 82:
            { return symbol(RETURN, yytext());
            }
            // fall through
          case 174: break;
          case 83:
            { return symbol(CAR, yytext());
            }
            // fall through
          case 175: break;
          case 84:
            { return symbol(EXTENDS, yytext());
            }
            // fall through
          case 176: break;
          case 85:
            { return symbol(LENGTH, yytext());
            }
            // fall through
          case 177: break;
          case 86:
            { return symbol(WHILE, yytext());
            }
            // fall through
          case 178: break;
          case 87:
            { return symbol(CONTINUE, yytext());
            }
            // fall through
          case 179: break;
          case 88:
            { return symbol(MAIN, yytext());
            }
            // fall through
          case 180: break;
          case 89:
            { return symbol(SUM, yytext());
            }
            // fall through
          case 181: break;
          case 90:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 182: break;
          case 91:
            { return symbol(PLAY, yytext());
            }
            // fall through
          case 183: break;
          case 92:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
