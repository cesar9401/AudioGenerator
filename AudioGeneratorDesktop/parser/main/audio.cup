
package com.cesar31.audiogenerator.parser.main;


import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Array;

import com.cesar31.audiogenerator.parser.Token;
import com.cesar31.audiogenerator.instruction.*;
import com.cesar31.audiogenerator.error.*;

class AudioParser;

parser code {:
	private ErrorHandler errorHandler;

	private Token info;
	private List<Integer> ind;

	public AudioParser(AudioLex lex) {
		super(lex);
		this.errorHandler = new ErrorHandler();
        this.errorHandler.initMainGrammar();
		this.ind = new ArrayList<>();
	}

	public List<Err> getErrors() {
		return this.errorHandler.getErrors();
	}

	public Token getInfo() {
		return this.info;
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		this.errorHandler.setError((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public void report_fatal_error(String message, Object info) {
		System.out.println("message: " + message);
		System.out.println("info: " + info);
	}

	protected int error_sync_size() {
		return 1;
	}
:}

terminal Token TRACK, EXTENDS, KEEP, VAR, INT, DOB, BOOL, CAR, CAD, TRUE, FALSE;
terminal Token ARRAY, IF, ELSE, SWITCH, CASE,EXIT, DEFAULT, FOR, WHILE, DO_WHILE, CONTINUE, RETURN;
terminal Token PLAY, NOTE;
terminal Token WAIT, ORDER, WAY, SUM, LENGTH, MSG, MAIN;
terminal Token ID, INTEGER, DECIMAL, EQEQ, NEQ, GREATER, SMALLER, GRTREQ, SMLLREQ;
terminal Token NULL, AND, NAND, OR, NOR, XOR, NOT, COMMA, EQUAL, PLUS, MINUS, TIMES, DIVIDE, MOD, POW, PLUS_EQ, PLUS_PLUS, MINUS_MINUS;
terminal Token LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN, SEMI, EOL, STR, CHAR;
terminal Token INDENT, DEDENT;
terminal Token SYM, ERROR;

non terminal Token type, id;
non terminal Operation value;
non terminal List<Token> id_list;
non terminal List<Assignment> statement, statement_function;
non terminal Assignment assignment, for_assign;
non terminal List<Instruction> body, bod, inicio1, f_body, function_body;
non terminal If if_, else_, else_if;
non terminal List<If> list_else_if;
non terminal Variable boolean_val;
non terminal Operation a, b, c, d, e, f, g, h, i, j;
non terminal ArrayIndex dimension;
non terminal List<ArrayIndex> dimensions;
non terminal List<Operation> value_list;
non terminal While while_;
non terminal Instruction function;
non terminal Principal principal;
non terminal Message message;
non terminal For for_;
non terminal DoWhile do_while;
non terminal List<ArrayStatement> array_statement, array_statement_function;
non terminal Object list, fn, array_value;
non terminal List<Object> list_fn;
non terminal ArrayAccess l;
non terminal IfInstruction list_if;
non terminal Instruction control;
non terminal List<Instruction> m_body, main_body;
non terminal Continue continue_;
non terminal Exit exit_;
non terminal Case case_, default_;
non terminal List<Case> case_list, switch_body;
non terminal Switch switch_;
non terminal Token note;
non terminal Parameter param;
non terminal List<Parameter> params, params_f;
non terminal FunctionCall function_call;
non terminal List<Operation> args, args_;
non terminal Return return_;
// non terminal length, sum;
// non terminal play, wait, order;

non terminal eol;
non terminal extends_;

start with inicio1;

inicio1 ::=
			eol TRACK id:id extends_ eol bod:list_i
				{:
					info = id;
					RESULT = list_i;
				:}
			| TRACK id:id extends_ eol bod:list_i
				{: info = id; RESULT = list_i; :}

			// Errores
			| error TRACK id:id extends_ eol bod:list_i
				{: info = id; RESULT = list_i; :}
			| eol TRACK error extends_ eol bod:list_i
				{: RESULT = list_i; :}
			| eol TRACK id:id error eol bod:list_i
				{: info = id; RESULT = list_i; :}
			| eol TRACK id:id extends_ eol error
				{: RESULT = null; :}

			| error id:id extends_ eol bod:list_i
				{: info = id; RESULT = list_i; :}
			| TRACK error extends_ eol bod:list_i
				{: RESULT = list_i; :}
			| TRACK id:id error eol bod:list_i
				{: info = id; RESULT = list_i; :}
			| TRACK id:id extends_ eol error
				{: RESULT = null; :}
			// Errores
			;

extends_ ::=
			EXTENDS id_list
			|

			// Errores
			| error id_list
			| EXTENDS error
			// Errores
			;

/* main_body */
bod ::=
			INDENT m_body:list DEDENT
				{: RESULT = list; :}
			|
				{: RESULT = new ArrayList<>(); :}

			// Errores
			| INDENT m_body:list error
				{: RESULT = list; :}
			| error m_body:list DEDENT
				{: RESULT = list; :}
			| INDENT error DEDENT
				{: RESULT = new ArrayList<>(); :}
			// Errores
			;

m_body ::=
			m_body:list main_body:instruction
				{: RESULT = list; RESULT.addAll(instruction); :}
			| main_body:instruction
				{: RESULT = new ArrayList<>(); RESULT.addAll(instruction); :}
			;

main_body ::=
			principal:principal
				{:
					RESULT = new ArrayList<>();
					if(principal != null) {
						RESULT.add(principal);
					}
				:}
			| function:function
				{:
					RESULT = new ArrayList<>();
					if(function != null) {
						RESULT.add(function);
					}
				:}
			| statement:statement eol
				{: RESULT = new ArrayList<>(); RESULT.addAll(statement); :}
			| array_statement:array_statement eol
				{: RESULT = new ArrayList<>(); RESULT.addAll(array_statement); :}

			// Errores
			| error eol
				{: RESULT = new ArrayList<>(); :}
			// Errores
			;
/* main_body */

/* cuerpo para funciones */
function_body ::=
			INDENT f_body:list DEDENT
				{: RESULT = list; :}
			|
				{: RESULT = new ArrayList<>(); :}

			// Errores
			| INDENT error DEDENT
				{: RESULT = new ArrayList<>(); :}
			| INDENT f_body:list error
				{: RESULT = list; :}
			// Errores
			;

f_body ::=
			f_body:list_ins body:list
				{: RESULT = list_ins; RESULT.addAll(list); :}
			| body:list
				{: RESULT = list; :}
			;

body ::=
			statement_function:list eol /* ArrayList<>(); */
				{: RESULT = new ArrayList<>(); RESULT.addAll(list); :}
			| assignment:assign eol /* Assignment */
				{:
					RESULT = new ArrayList<>();
					if(assign != null) {
						RESULT.add(assign);
					}
				:}
			| array_statement_function:list eol /* List<ArrayAssignment> */
				{:  RESULT = new ArrayList<>(); RESULT.addAll(list); :}
			| message:message eol /* Message */
				{: RESULT = new ArrayList<>(); RESULT.add(message); :}
			| control:instruction
				{:
					RESULT = new ArrayList<>();
					if(instruction != null) {
						RESULT.add(instruction);
					}
				:}
			| continue_:continue_ eol
				{: RESULT = new ArrayList<>(); RESULT.add(continue_); :}
			| exit_:exit_ eol
				{: RESULT = new ArrayList<>(); RESULT.add(exit_); :}
			| function_call:f_call eol
				{: RESULT = new ArrayList<>(); RESULT.add(f_call); :}
			// return
			| return_:return_ eol
				{: RESULT = new ArrayList<>(); RESULT.add(return_); :}

			// Error
			| error eol
				{: RESULT = new ArrayList<>(); :}
			// Error
			;
/* cuerpo para funciones */

/* declaracion de variables */
statement ::=
			KEEP:info VAR type:token id_list:list value:operation
				{:
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				:}
			| VAR:info type:token id_list:list value:operation
				{:
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				:}

			// Errores
			| error VAR:info type:token id_list:list value:operation
				{:
					RESULT = new ArrayList<>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				:}
			| KEEP:info error type:token id_list:list value:operation
				{:
					RESULT = new ArrayList<>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, true, token, id, operation));
					}
				:}
			| KEEP:info VAR error id_list value
				{: RESULT = new ArrayList<>(); :}
			| KEEP:info VAR type error value
				{: RESULT = new ArrayList<>(); :}

			| error type:token id_list:list value:operation
				{:
					RESULT = new ArrayList<>();
					for(Token id : list) {
						RESULT.add(new Assignment(token, false, token, id, operation));
					}
				:}
			| VAR:info error id_list:list value:operation
				{: RESULT = new ArrayList<>(); :}
			| VAR:info type:token error value:operation
				{: RESULT = new ArrayList<>(); :}
			// Errores
			;

// Declaracion dentro de funciones
statement_function ::=
			VAR:info type:token id_list:list value:operation
				{:
					RESULT = new ArrayList<Assignment>();
					for(Token id : list) {
						RESULT.add(new Assignment(info, false, token, id, operation));
					}
				:}

			// Errores
			| VAR:info error id_list:list value:operation
				{: RESULT = new ArrayList<>(); :}
			| VAR:info type:token error value:operation
				{: RESULT = new ArrayList<>(); :}
			// Errores
			;


value ::=
			EQUAL a:operation {: RESULT = operation; :}
			|{: RESULT = null; :}

			// Errores
			// | EQUAL error {: RESULT = null; :}
			| error a {: RESULT = null; :}
			| error {: RESULT = null; :}
			// Errores
			;

id_list ::=
			id_list:list COMMA id:token
				{:
					list.add(token);
					RESULT = list;
				:}
			| id:token
				{:
					RESULT = new ArrayList<Token>();
					RESULT.add(token);
				:}
			;

type ::=
			INT:token {: RESULT = token; :}
			| DOB:token {: RESULT = token; :}
			| BOOL:token {: RESULT = token; :}
			| CAD:token {: RESULT = token; :}
			| CAR:token {: RESULT = token; :}
			;

/* asignacion de variables */
assignment ::=
			id:token EQUAL a:operation
				{: RESULT = new Assignment(Assignment.TypeA.EQUAL, token, operation); :}
			| id:token PLUS_EQ:op a:operation
				{:
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), operation, op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_EQ, token, tmp);
				:}
			| id:token PLUS_PLUS:op
				{:
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.PLUS_PLUS, token, tmp);
				:}
			| id:token MINUS_MINUS:op
				{:
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ID, new Variable(token)), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new Assignment(Assignment.TypeA.MINUS_MINUS, token, tmp);
				:}
			/* asignacion a arreglos */
			| l:array_access EQUAL a:operation
				{: RESULT = new ArrayAssignment(array_access, operation, Assignment.TypeA.EQUAL); :}
			| l:array_access PLUS_EQ:op a:operation
				{:
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), operation, op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_EQ);
				:}
			| l:array_access PLUS_PLUS:op
				{:
					Operation tmp = new Operation(OperationType.SUM, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.PLUS_PLUS);
				:}
			| l:array_access MINUS_MINUS:op
				{:
					Operation tmp = new Operation(OperationType.SUBTRACTION, new Operation(OperationType.ARRAY_ACCESS, array_access), new Operation(OperationType.INTEGER, new Variable(Var.INTEGER, "1")), op);
					RESULT = new ArrayAssignment(array_access, tmp, Assignment.TypeA.MINUS_MINUS);
				:}

			// Errores
			| error EQUAL a {: RESULT = null; :}
			| error PLUS_EQ a{: RESULT = null; :}
			| error PLUS_PLUS {: RESULT = null; :}
			| error MINUS_MINUS {: RESULT = null; :}
			| id error a {: RESULT = null; :}
			| id error {: RESULT = null; :}
			| l error a {: RESULT = null; :}
			| l error {: RESULT = null; :}
			// Errores
			;

l ::=
			id:token_id dimensions:list_array_index
				{: RESULT = new ArrayAccess(token_id, list_array_index); :}
			;

/* declaracion de arreglos */
array_statement ::=
			KEEP:info VAR type:type ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| VAR:info type:type ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}

			// Errores
			| error VAR:info type:type ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| KEEP:info error type:type ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| KEEP:info VAR error ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			| KEEP:info VAR type:type error id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, true, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| KEEP:info VAR type:type ARRAY error dimensions:list_array_index array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			| KEEP:info VAR type:type ARRAY id_list:list_token error array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}

			| error type:type ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(type, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| VAR:info error ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			| VAR:info type:type error id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| VAR:info type:type ARRAY error dimensions:list_array_index array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			| VAR:info type:type ARRAY id_list:list_token error array_value:array_list
				{: RESULT = new ArrayList<>();  ind = new ArrayList<>(); :}
			// Errores
			;

array_statement_function ::=
			VAR:info type:type ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}

			// Errores
			| VAR:info error ARRAY id_list:list_token dimensions:list_array_index array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			| VAR:info type:type error id_list:list_token dimensions:list_array_index array_value:array_list
				{:
					RESULT = new ArrayList<>();
					for(Token id : list_token) {
						RESULT.add(new ArrayStatement(info, false, type, id, list_array_index, array_list, ind));
					}
					ind = new ArrayList<>();
				:}
			| VAR:info type:type ARRAY error dimensions:list_array_index array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			| VAR:info type:type ARRAY id_list:list_token error array_value:array_list
				{: RESULT = new ArrayList<>(); ind = new ArrayList<>(); :}
			// Errores
			;

dimensions ::=
			dimensions:list_op dimension:array_index
				{: RESULT = list_op; RESULT.add(array_index); :}
			| dimension:array_index
				{: RESULT = new ArrayList<>(); RESULT.add(array_index); :}
			;

dimension ::=
			LBRACKET:left a:operation RBRACKET:right
				{: RESULT = new ArrayIndex(left, operation, right); :}
			;

array_value ::=
			EQUAL list:list {: RESULT = list; :}
			| {: RESULT = null; :}
			| error {: RESULT = null; :}
			;

list ::=
			LBRACE value_list:list_op RBRACE
				{:
					RESULT = Array.newInstance(Operation.class, list_op.size());
					ind.add(list_op.size());
					// System.out.println(list_op.size());
					for(int i = 0; i < list_op.size(); i++) {
						Array.set(RESULT, i, list_op.get(i));
					}
				:}
			| LBRACE list_fn:list_fn RBRACE
				{:
					RESULT = Array.newInstance(Object.class, list_fn.size());
					for(int i = 0; i < list_fn.size(); i++) {
						Array.set(RESULT, i, list_fn.get(i));
					}
				:}
			;

list_fn ::=
			list_fn:list_fn COMMA fn:fn
				{: RESULT = list_fn; RESULT.add(fn); :}
			| fn:fn
				{: RESULT = new ArrayList<>(); RESULT.add(fn); :}
			;

fn ::=
			list:list_op
				{: RESULT = list_op; :}
			;

value_list ::=
			value_list:list COMMA a:operation
				{: RESULT = list; RESULT.add(operation); :}
			| a:operation
				{: RESULT = new ArrayList<>(); RESULT.add(operation); :}
			;
/* declaracion de arreglos */

/* Operaciones logicas y aritmeticas */
a ::=
			a:l OR:token b:r {: RESULT = new Operation(OperationType.OR, l, r, token); :}
			| a:l NOR:token b:r {: RESULT = new Operation(OperationType.NOR, l, r, token); :}
			| a:l XOR:token b:r {: RESULT = new Operation(OperationType.XOR, l, r, token); :}
			| b:op {: RESULT = op; :}
			;

b ::=
			b:l AND:token c:r {: RESULT = new Operation(OperationType.AND, l, r, token); :}
			| b:l NAND:token c:r {: RESULT = new Operation(OperationType.NAND, l, r, token); :}
			| c:op {: RESULT = op; :}
			;

c ::=
			c:l EQEQ:token d:r {: RESULT = new Operation(OperationType.EQEQ, l, r, token); :}
			| c:l NEQ:token d:r {: RESULT = new Operation(OperationType.NEQ, l, r, token); :}
			| c:l GREATER:token d:r {: RESULT = new Operation(OperationType.GREATER, l, r, token); :}
			| c:l SMALLER:token d:r {: RESULT = new Operation(OperationType.SMALLER, l, r, token); :}
			| c:l GRTREQ:token d:r {: RESULT = new Operation(OperationType.GREATER_OR_EQUAL, l, r, token); :}
			| c:l SMLLREQ:token d:r {: RESULT = new Operation(OperationType.LESS_OR_EQUAL, l, r, token); :}
			| d:op {: RESULT = op; :}
			;

d ::=
			d:l PLUS:token e:r {: RESULT = new Operation(OperationType.SUM, l, r, token); :}
			| d:l MINUS:token e:r {: RESULT = new Operation(OperationType.SUBTRACTION, l, r, token); :}
			| e:op {: RESULT = op; :}
			;

e ::=
			e:l TIMES:token f:r {: RESULT = new Operation(OperationType.MULTIPLICATION, l, r, token); :}
			| e:l DIVIDE:token f:r {: RESULT =new Operation(OperationType.DIVISION, l, r, token); :}
			| e:l MOD:token f:r {: RESULT = new Operation(OperationType.MOD, l, r, token); :}
			| f:op {: RESULT = op; :}
			;

f ::=
			g:l POW:token f:r {: RESULT = new Operation(OperationType.POW, l, r, token); :}
			| g:op {: RESULT = op; :}
			;

g ::=
			MINUS:token h:l {: RESULT = new Operation(OperationType.UMINUS, l, token); :}
			| h:op {: RESULT = op; :}
			;

h ::=
			NOT:token i:l {: RESULT = new Operation(OperationType.NOT, l, token); :}
			| i:op {: RESULT = op; :}
			;

i ::=
			NULL:token j:l {: RESULT = new Operation(OperationType.NULL, l, token); :}
			| j:op {: RESULT = op; :}
			;

j ::=
			INTEGER:var {: RESULT = new Operation(OperationType.INTEGER, new Variable(var, Var.INTEGER, var.getValue())); :}
			| DECIMAL:var {: RESULT = new Operation(OperationType.DOUBLE, new Variable(var, Var.DOUBLE, var.getValue())); :}
			| STR:var {: RESULT = new Operation(OperationType.STRING, new Variable(var, Var.STRING, var.getValue())); :}
			| CHAR:var {: RESULT = new Operation(OperationType.CHAR, new Variable(var, Var.CHAR, var.getValue())); :}
			| boolean_val:var {: RESULT = new Operation(OperationType.BOOLEAN, var); :}
			| id:token {: RESULT = new Operation(OperationType.ID, new Variable(token)); :}
			| l:array_access {: RESULT = new Operation(OperationType.ARRAY_ACCESS, array_access); :} /* arreglo */
			| LPAREN a:var RPAREN {: RESULT = var; :}
			// Llamada a funcion
			| function_call:call {: RESULT = new Operation(OperationType.FUNCTION_CALL, call); :}

			// Errores
			| error {: RESULT = null; :}
			// Errores
			;

boolean_val ::=
			TRUE:var {: RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); :}
			| FALSE:var {: RESULT = new Variable(var, Var.BOOLEAN, var.getValue()); :}
			;
/* Operaciones logicas y aritmeticas */

eol ::=
			eol EOL
			| EOL
			;

/* ciclos y sentencias de control */
control ::=
			list_if:ifIns /* IfInstruction */
				{: RESULT = ifIns; :}
			| for_:for_
				{: RESULT = for_; :}
			| while_:while_
				{: RESULT = while_; :}
			| do_while:do_while
				{: RESULT = do_while; :}
			| switch_:sw
				{: RESULT = sw; :}
			;
/* ciclos y sentencias de control */

/* if - si */
list_if ::=
			if_:if_
				{: RESULT = new IfInstruction(if_); :}
			| if_:if_ else_:else_
				{: RESULT = new IfInstruction(if_, else_); :}
			| if_:if_ list_else_if:list_if
				{: RESULT = new IfInstruction(if_, list_if); :}
			| if_:if_ list_else_if:list_if else_:else_
				{: RESULT = new IfInstruction(if_, list_if, else_); :}
			;

if_ ::=
			IF:token LPAREN a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				:}

			//Errores
			| error LPAREN:token a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				:}
			| IF:token error a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				:}
			| IF:token LPAREN a:condition error eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				:}
			| IF:token LPAREN a:condition RPAREN error function_body:list_ins
				{:
					RESULT = new If(token, If.Type.IF, condition, list_ins);
				:}
			// Errores
			;

else_ ::=
			ELSE:token eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				:}

			// Errores
			| ELSE:token error function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE, null, list_ins);
				:}
			// Errores
			;

list_else_if ::=
			list_else_if:list else_if:else_if
				{: RESULT = list; RESULT.add(else_if); :}
			| else_if:else_if
				{: RESULT = new ArrayList<>(); RESULT.add(else_if); :}
			;

else_if ::=
			ELSE:token IF LPAREN a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				:}

			// Errores
			| ELSE:token error LPAREN a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				:}
			| ELSE:token IF error a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				:}
			| ELSE:token IF LPAREN a:condition error eol function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				:}
			| ELSE:token IF LPAREN a:condition RPAREN error function_body:list_ins
				{:
					RESULT = new If(token, If.Type.ELSE_IF, condition, list_ins);
				:}
			// Errores
			;
/* if - si */

/* for - para */
for_ ::=
			FOR:token LPAREN for_assign:assign SEMI a:condition SEMI assignment:increase RPAREN eol function_body:list_ins
				{:
					RESULT = new For(token, assign, condition, increase, list_ins);
				:}

			// Errores
			| error LPAREN:token for_assign:assign SEMI a:condition SEMI assignment:increase RPAREN eol function_body:list_ins
				{:
					RESULT = new For(token, assign, condition, increase, list_ins);
				:}
			| FOR:token error for_assign:assign SEMI a:condition SEMI assignment:increase RPAREN eol function_body:list_ins
				{:
					RESULT = new For(token, assign, condition, increase, list_ins);
				:}
			| FOR:token LPAREN error SEMI a:condition SEMI assignment:increase RPAREN eol function_body:list_ins
				{: RESULT = null; :}
			| FOR:token LPAREN for_assign:assign SEMI a:condition error assignment:increase RPAREN eol function_body:list_ins
				{:
					RESULT = new For(token, assign, condition, increase, list_ins);
				:}
			| FOR:token LPAREN for_assign:assign SEMI a:condition SEMI error RPAREN eol function_body:list_ins
				{: RESULT = null; :}
			| FOR:token LPAREN for_assign:assign SEMI a:condition SEMI assignment:increase RPAREN error function_body:list_ins
				{:
					RESULT = new For(token, assign, condition, increase, list_ins);
				:}
			// Errores
			;

for_assign ::=
			INT:type id:id EQUAL a:operation
				{: RESULT = new Assignment(type, id, operation); :}
			| assignment:assign
				{: RESULT = assign; :}
			;
/* for - para */

/* while - mientras */
while_ ::=
			WHILE:token LPAREN a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new While(token, condition, list_ins);
				:}

			// Errores
			| WHILE:token error a:condition RPAREN eol function_body:list_ins
				{:
					RESULT = new While(token, condition, list_ins);
				:}
			| WHILE:token LPAREN a:condition error eol function_body:list_ins
				{:
					RESULT = new While(token, condition, list_ins);
				:}
			| WHILE:token LPAREN a:condition RPAREN error function_body:list_ins
				{:
					RESULT = new While(token, condition, list_ins);
				:}
			// Errores
			;

/* do-while - hacer-mientras */
do_while ::=
			DO_WHILE:info eol function_body:list_ins WHILE:token LPAREN a:condition RPAREN eol
				{:
					RESULT = new DoWhile(info, token, list_ins, condition);
				:}

			// Errores
			| DO_WHILE:info error function_body:list_ins WHILE:token LPAREN a:condition RPAREN eol
				{: RESULT = new DoWhile(info, token, list_ins, condition); :}
			| DO_WHILE:info eol function_body:list_ins error LPAREN:token a:condition RPAREN eol
				{: RESULT = new DoWhile(info, token, list_ins, condition); :}
			| DO_WHILE:info eol function_body:list_ins WHILE:token error a:condition RPAREN eol
				{: RESULT = new DoWhile(info, token, list_ins, condition); :}
			| DO_WHILE:info eol function_body:list_ins WHILE:token LPAREN a:condition error eol
				{: RESULT = new DoWhile(info, token, list_ins, condition); :}
			| DO_WHILE:info eol function_body:list_ins WHILE:token LPAREN a:condition RPAREN error
				{: RESULT = new DoWhile(info, token, list_ins, condition); :}
			// Errores
			;
/* do-while - hacer-mientras */

/* switch  */
switch_ ::=
			SWITCH:token LPAREN a:condition RPAREN eol switch_body:list
				{: RESULT = new Switch(token, condition, list); :}

			// Errores
			| SWITCH:token error a:condition RPAREN eol switch_body:list
				{: RESULT = new Switch(token, condition, list); :}
			| SWITCH:token LPAREN a:condition error eol switch_body:list
				{: RESULT = new Switch(token, condition, list); :}
			| SWITCH:token LPAREN a:condition RPAREN error switch_body:list
				{: RESULT = new Switch(token, condition, list); :}
			// Errores
			;

switch_body ::=
			INDENT case_list:list default_:default_ DEDENT
				{:
					RESULT = list;
					if(default_ != null) {
						RESULT.add(default_);
					}
				:}
			|
				{: RESULT = null; :}
			;

case_list ::=
			case_list:list case_:case_
				{: RESULT = list; RESULT.add(case_); :}
			|
				{: RESULT = new ArrayList<>(); :}
			;

case_ ::=
			CASE:token a:operation eol function_body:instructions
				{: RESULT = new Case(token, operation, instructions); :}

			// Errores
			| error a:operation eol function_body:instructions
				{: RESULT = new Case(null, operation, instructions); :}
			| CASE:token a:operation error function_body:instructions
				{: RESULT = new Case(token, operation, instructions); :}
			// Errores
			;

default_ ::=
			DEFAULT:token eol function_body:instructions
				{: RESULT = new Case(token, null, instructions); :}
			|
				{: RESULT = null; :}

			// Errores
			| error eol function_body:instructions
				{: RESULT = new Case(null, null, instructions); :}
			| DEFAULT:token error function_body:instructions
				{: RESULT = new Case(token, null, instructions); :}
			// Errores
			;
/* switch  */

/* continue - exit - return */
exit_ ::=
			EXIT:token
				{: RESULT = new Exit(token); :}
			;

continue_ ::=
			CONTINUE:token
				{: RESULT = new Continue(token); :}
			;

return_ ::=
			RETURN:info a:operation
				{: RESULT = new Return(info, operation); :}
			;
/* continue - exit return */

/*  functions */
function ::=
			id:id LPAREN params_f:list RPAREN eol function_body:instructions // no keep - void
				{: RESULT = new Function(id, false, id, list, instructions); :}
			| KEEP:info id:id LPAREN params_f:list RPAREN eol function_body:instructions // keep - void
				{: RESULT = new Function(info, false, id, list, instructions); :}
			| KEEP:info type:token_type id:id LPAREN params_f:list RPAREN eol function_body:instructions // keep - type
				{: RESULT = new Function(info, true, token_type, id, list, instructions); :}
			| type:token_type id:id LPAREN params_f:list RPAREN eol function_body:instructions // no keep - type
				{: RESULT = new Function(token_type, false, token_type, id, list, instructions); :}

			// Errores
			| error LPAREN params_f:list RPAREN eol function_body:instructions
			| id:id error params_f:list RPAREN eol function_body:instructions
			| id:id LPAREN error RPAREN eol function_body:instructions
			| id:id LPAREN params_f:list RPAREN error function_body:instructions

			| error id:id LPAREN params_f:list RPAREN eol function_body:instructions
			| KEEP:info error LPAREN params_f:list RPAREN eol function_body:instructions
			| KEEP:info id:id error params_f:list RPAREN eol function_body:instructions
			| KEEP:info id:id LPAREN error RPAREN eol function_body:instructions
			| KEEP:info id:id LPAREN params_f:list RPAREN error function_body:instructions

			| error type:token_type id:id LPAREN params_f:list RPAREN eol function_body:instructions
			| KEEP:info error id:id LPAREN params_f:list RPAREN eol function_body:instructions
			| KEEP:info type:token_type error LPAREN params_f:list RPAREN eol function_body:instructions
			| KEEP:info type:token_type id:id error params_f:list RPAREN eol function_body:instructions
			| KEEP:info type:token_type id:id LPAREN error RPAREN eol function_body:instructions
			| KEEP:info type:token_type id:id LPAREN params_f:list RPAREN error function_body:instructions

			| type:token_type error LPAREN params_f:list RPAREN eol function_body:instructions
			| type:token_type id:id error params_f:list RPAREN eol function_body:instructions
			| type:token_type id:id LPAREN error RPAREN eol function_body:instructions
			| type:token_type id:id LPAREN params_f:list RPAREN error function_body:instructions
			// Errores
			;

/* principal */
principal ::=
			MAIN LPAREN RPAREN eol function_body:list_ins
				{: RESULT = new Principal(list_ins); :}
			| KEEP MAIN LPAREN RPAREN eol function_body:list_ins
				{: RESULT = new Principal(list_ins); :}

			// Errores
			| MAIN error RPAREN eol function_body:list_ins
			| MAIN LPAREN error eol function_body:list_ins
			| MAIN LPAREN RPAREN error function_body:list_ins

			| error MAIN LPAREN RPAREN eol function_body:list_ins
			| KEEP MAIN error RPAREN eol function_body:list_ins
			| KEEP MAIN LPAREN error eol function_body:list_ins
			| KEEP MAIN LPAREN RPAREN error function_body:list_ins
			// Errores
			;

/* principal */
message ::=
			MSG:token LPAREN a:operation RPAREN
				{:
					RESULT = new Message(token, operation);
				:}

			// Errores
			| MSG:token error a:operation RPAREN
				{: RESULT = new Message(token, operation); :}
			| MSG:token LPAREN a:operation error
				{: RESULT = new Message(token, operation); :}
			// Errores
			;

params_f ::=
			params:list
				{: RESULT = list; :}
			|
				{: RESULT = new ArrayList<>(); :}
			;

params ::=
			params:list COMMA param:param
				{: RESULT = list; RESULT.add(param); :}
			| param:param
				{: RESULT = new ArrayList<>(); RESULT.add(param); :}
			;

param ::=
			type:type id:id
				{: RESULT = new Parameter(type, id); :}
			;
/*  functions */

/* musical notes */
note ::=
			NOTE:token {: RESULT = token; :}
			| IF:token {: RESULT = token; :}
			;
/* musical notes */

/* reproducir */
// play ::=
// 			PLAY LPAREN note COMMA a COMMA a COMMA a RPAREN
// 			;
/* reproducir */

/* wait */
// wait ::=
// 			WAIT LPAREN a COMMA a RPAREN
// 			;
/* wait */

/* ordenar */
// order ::=
// 			ORDER LPAREN id COMMA WAY RPAREN
// 			;
/* ordenar */

/* sumarizar */
// sum ::=
// 			SUM LPAREN id RPAREN
// 			;
/* sumarizar */

/* longitud */
// length ::=
// 			LENGTH:token LPAREN a:operation RPAREN
// 				{:
// 					List<Operation> tmp = new ArrayList<>();
// 					RESULT = new Length(token, operation);
// 				:}
// 			;
/* longitud */

/* llamada de funcion */
function_call ::=
			id:token LPAREN args_:list RPAREN
				{: RESULT = new FunctionCall(token, list); :}
			| id:token LPAREN args:list COMMA WAY:way RPAREN // Ordenar
				{: RESULT = new Order(token, list, way); :}
			| id:token LPAREN note:note COMMA args:list RPAREN // Reproducir
				{: RESULT = new Play(token, note, list); :}

			// Errores
			// | error LPAREN:token args:list COMMA WAY:way RPAREN // Errores Ordenar
			// 	{: RESULT = new Order(token, list, way); :}
			// | id:token LPAREN args:list error WAY:way RPAREN
			// 	{: RESULT = new Order(token, list, way); :}
			// | id:token LPAREN args:list COMMA WAY:way error
			// 	{: RESULT = new Order(token, list, way); :}

			// | error LPAREN:token note:note COMMA args:list RPAREN // Errores Reproducir
			// 	{: RESULT = new Play(token, note, list); :}
			// | id:token LPAREN note:note error args:list RPAREN
			// 	{: RESULT = new Play(token, note, list); :}
			// |  id:token LPAREN note:note COMMA args:list error
			// 	{: RESULT = new Play(token, note, list); :}
			// Errores
			;

args_ ::=
			args:list
				{: RESULT = list; :}
			|
				{: RESULT = new ArrayList<>(); :}
			;

args ::=
			args:list COMMA a:operation
				{: RESULT = list; RESULT.add(operation); :}
			| a:operation
				{: RESULT = new ArrayList<>(); RESULT.add(operation); :}
			;
/* llamada de funcion */

/* id */
id ::=
			ID:t {: RESULT = t; :}
			| LENGTH:t {: RESULT = t; :}
			| SUM:t {: RESULT = t; :}
			| ORDER:t {: RESULT = t; :}
			| PLAY:t {: RESULT = t; :}
			| WAIT:t {: RESULT = t; :}
			;
/* id */
