
package com.cesar31.audiogenerator.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

class AudioParser;

parser code {:
	public AudioParser(AudioLex lex) {
		super(lex);
	}

	public void syntax_error(Symbol cur_token) {
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			// expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}
:}

terminal TRACK, EXTENDS, KEEP, VAR, INT, DOB, BOOL, CAR, CAD, TRUE, FALSE;
terminal ARRAY, IF, ELSE, SWITCH, CASE,EXIT, DEFAULT, FOR, WHILE, DO_WHILE, CONTINUE, RETURN;
terminal PLAY, DO, DO_, RE, RE_, MI, FA, FA_, SOL, SOL_, LA, LA_;
terminal WAIT, ORDER, ASC, DESC, EVEN, ODD, PRIME, SUM, LENGTH, MSG, MAIN;
terminal ID, INTEGER, DECIMAL, TAB, EQEQ, NEQ, GREATER, SMALLER, GRTREQ, SMLLREQ;
terminal NULL, AND, NAND, OR, NOR, XOR, NOT, COMMA, EQUAL, PLUS, MINUS, TIMES, DIVIDE, MOD, POW, PLUS_EQ, PLUS_PLUS, MINUS_MINUS;
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN, SEMI, EOL, STR, CHAR;
terminal ERROR;

non terminal instruction, list_ins, ins;
non terminal tab, eol, eol_;
non terminal statement;
non terminal array_statement, dimension, dimensions, array_value, value_list;
non terminal list, fn, list_fn;
non terminal type, id_list;
non terminal keep;
non terminal value, assignment, assign;
non terminal a, b, c, d, e, f, g, h, i, j;
non terminal boolean_val;
non terminal l;
non terminal control, control_if, if_, else_, else_if, list_else_if;
non terminal for_, for_assig, while_, while__, do_while;
non terminal inicio1, extends_, list_id;
non terminal body, bod;

start with inicio1;

inicio1 ::=
				eol TRACK ID extends_ bod
				;

extends_ ::=
				EXTENDS list_id
				|
				;

list_id ::=
				list_id COMMA ID
				| ID
				;

bod ::=			body
				| body eol_
				;

body ::=
				body statement
				| body assign:id
				| body array_statement
				| body for_
				| body if_
				| body:s else_
				| body else_if
				| body while_
				| body do_while
				|
				;

/* declaracion de variables */
statement ::=
				eol_ tab keep VAR type id_list value
				;

value ::=
				EQUAL a
				|
				;

id_list ::=
				id_list COMMA ID
				| ID
				;

type ::=
				INT
				| DOB
				| BOOL
				| CAD
				| CAR
				;

/* asignacion de variables */
assign ::=
				eol_ tab assignment
				;

assignment ::=
				ID EQUAL a
				| ID PLUS_EQ a
				| ID PLUS_PLUS
				| ID MINUS_MINUS
				| l EQUAL a /* asignacion a arreglos */
				| l PLUS_EQ a
				| l PLUS_PLUS
				| l MINUS_MINUS
				;

l ::=
				ID dimensions
				;

/* declaracion de arreglos */
array_statement ::=
				eol_ tab keep VAR type ARRAY id_list dimensions array_value
				;

dimensions ::=
				dimensions dimension
				| dimension
				;

dimension ::=
				LBRACKET a RBRACKET
				;

array_value ::=
				EQUAL list
				|
				;

list ::=
				LBRACE value_list RBRACE
				| LBRACE list_fn RBRACE
				;

list_fn ::=
				list_fn COMMA fn
				| fn
				;

fn ::=
				list
				;

value_list ::=
				value_list COMMA a
				| a
				;
/* declaracion de arreglos */

/* Operaciones logicas y aritmeticas */
a ::=
				a OR b
				| a NOR b
				| a XOR b
				| b
				;

b ::=
				b AND c
				| b NAND c
				| c
				;

c ::=
				c EQEQ d
				| c NEQ d
				| c GREATER d
				| c SMALLER d
				| c GRTREQ d
				| c SMLLREQ d
				| d
				;

d ::=
				d PLUS e
				| d MINUS e
				| e
				;

e ::=
				e TIMES f
				| e DIVIDE f
				| e MOD f
				| f
				;

f ::=
				g POW f
				| g
				;

g ::=
				MINUS h
				| h
				;

h ::=
				NOT i
				| i
				;

i ::=
				NULL j
				| j
				;

j ::=
				INTEGER
				| DECIMAL
				| STR
				| CHAR
				| boolean_val
				| ID
				| l /* arreglo */
				| LPAREN a RPAREN
				;

boolean_val ::=
				TRUE
				| FALSE
				;
/* Operaciones logicas y aritmeticas */

keep ::=
				KEEP
				|
				;

tab ::=
				tab TAB
				| TAB
				;

eol_ ::=
				eol_ EOL
				| EOL
				;

eol ::=
				eol EOL
				|
				;

if_ ::=
				eol_ tab IF LPAREN a RPAREN
				;

else_ ::=
				eol_ tab ELSE
				;

else_if ::=
				eol_ tab ELSE IF LPAREN a RPAREN
				;
/* if - si */

/* for - para */
for_ ::=
				eol_ tab FOR LPAREN for_assig SEMI a SEMI assignment RPAREN
				;

for_assig ::=
				VAR INT ID EQUAL a
				| assignment
				;
/* for - para */

/* while - mientras */
while_ ::=
				eol_ tab WHILE LPAREN a RPAREN
				;

/* do-while - hacer-mientras */
do_while ::=
				eol_ tab DO_WHILE
				;
/* do-while - hacer-mientras */
